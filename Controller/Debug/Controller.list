
Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ba8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08007cb4  08007cb4  00017cb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d1c  08007d1c  0002013c  2**0
                  CONTENTS
  4 .ARM          00000000  08007d1c  08007d1c  0002013c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007d1c  08007d1c  0002013c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d1c  08007d1c  00017d1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007d20  08007d20  00017d20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000013c  20000000  08007d24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000087c  2000013c  08007e60  0002013c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200009b8  08007e60  000209b8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002013c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012537  00000000  00000000  00020165  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002efe  00000000  00000000  0003269c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b98  00000000  00000000  000355a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a40  00000000  00000000  00036138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019d98  00000000  00000000  00036b78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f557  00000000  00000000  00050910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089ca1  00000000  00000000  0005fe67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e9b08  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d18  00000000  00000000  000e9b5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000013c 	.word	0x2000013c
 8000128:	00000000 	.word	0x00000000
 800012c:	08007c9c 	.word	0x08007c9c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000140 	.word	0x20000140
 8000148:	08007c9c 	.word	0x08007c9c

0800014c <HAL_ADC_ConvCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC1)
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	681b      	ldr	r3, [r3, #0]
 8000158:	4a09      	ldr	r2, [pc, #36]	; (8000180 <HAL_ADC_ConvCpltCallback+0x34>)
 800015a:	4293      	cmp	r3, r2
 800015c:	d10b      	bne.n	8000176 <HAL_ADC_ConvCpltCallback+0x2a>
	{
		data[0] = adc_buffer[0];
 800015e:	4b09      	ldr	r3, [pc, #36]	; (8000184 <HAL_ADC_ConvCpltCallback+0x38>)
 8000160:	681b      	ldr	r3, [r3, #0]
 8000162:	4a09      	ldr	r2, [pc, #36]	; (8000188 <HAL_ADC_ConvCpltCallback+0x3c>)
 8000164:	6013      	str	r3, [r2, #0]
		data[1] = adc_buffer[1];
 8000166:	4b07      	ldr	r3, [pc, #28]	; (8000184 <HAL_ADC_ConvCpltCallback+0x38>)
 8000168:	685b      	ldr	r3, [r3, #4]
 800016a:	4a07      	ldr	r2, [pc, #28]	; (8000188 <HAL_ADC_ConvCpltCallback+0x3c>)
 800016c:	6053      	str	r3, [r2, #4]
		data[2] = adc_buffer[2];
 800016e:	4b05      	ldr	r3, [pc, #20]	; (8000184 <HAL_ADC_ConvCpltCallback+0x38>)
 8000170:	689b      	ldr	r3, [r3, #8]
 8000172:	4a05      	ldr	r2, [pc, #20]	; (8000188 <HAL_ADC_ConvCpltCallback+0x3c>)
 8000174:	6093      	str	r3, [r2, #8]
	}
}
 8000176:	bf00      	nop
 8000178:	370c      	adds	r7, #12
 800017a:	46bd      	mov	sp, r7
 800017c:	bc80      	pop	{r7}
 800017e:	4770      	bx	lr
 8000180:	40012400 	.word	0x40012400
 8000184:	200001f8 	.word	0x200001f8
 8000188:	200001ec 	.word	0x200001ec

0800018c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800018c:	b580      	push	{r7, lr}
 800018e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  gameHID.JoyX = 0;
 8000190:	4b49      	ldr	r3, [pc, #292]	; (80002b8 <main+0x12c>)
 8000192:	2200      	movs	r2, #0
 8000194:	701a      	strb	r2, [r3, #0]
  gameHID.JoyY = 0; //ileri
 8000196:	4b48      	ldr	r3, [pc, #288]	; (80002b8 <main+0x12c>)
 8000198:	2200      	movs	r2, #0
 800019a:	705a      	strb	r2, [r3, #1]
  gameHID.JoyZ = 0;
 800019c:	4b46      	ldr	r3, [pc, #280]	; (80002b8 <main+0x12c>)
 800019e:	2200      	movs	r2, #0
 80001a0:	709a      	strb	r2, [r3, #2]
  gameHID.JoyRx = 0; //saÄŸ
 80001a2:	4b45      	ldr	r3, [pc, #276]	; (80002b8 <main+0x12c>)
 80001a4:	2200      	movs	r2, #0
 80001a6:	70da      	strb	r2, [r3, #3]
  gameHID.JoyRy = 0; //ileri
 80001a8:	4b43      	ldr	r3, [pc, #268]	; (80002b8 <main+0x12c>)
 80001aa:	2200      	movs	r2, #0
 80001ac:	711a      	strb	r2, [r3, #4]
  gameHID.JoyRz = 0;//Sol
 80001ae:	4b42      	ldr	r3, [pc, #264]	; (80002b8 <main+0x12c>)
 80001b0:	2200      	movs	r2, #0
 80001b2:	715a      	strb	r2, [r3, #5]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001b4:	f000 fab6 	bl	8000724 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001b8:	f000 f88c 	bl	80002d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001bc:	f000 f962 	bl	8000484 <MX_GPIO_Init>
  MX_DMA_Init();
 80001c0:	f000 f942 	bl	8000448 <MX_DMA_Init>
  MX_ADC1_Init();
 80001c4:	f000 f8e4 	bl	8000390 <MX_ADC1_Init>
  MX_USB_DEVICE_Init();
 80001c8:	f007 f982 	bl	80074d0 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, adc_buffer, 3);
 80001cc:	2203      	movs	r2, #3
 80001ce:	493b      	ldr	r1, [pc, #236]	; (80002bc <main+0x130>)
 80001d0:	483b      	ldr	r0, [pc, #236]	; (80002c0 <main+0x134>)
 80001d2:	f000 fc05 	bl	80009e0 <HAL_ADC_Start_DMA>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  if(adc_buffer[0] < 2012)
 80001d6:	4b39      	ldr	r3, [pc, #228]	; (80002bc <main+0x130>)
 80001d8:	681b      	ldr	r3, [r3, #0]
 80001da:	f240 72db 	movw	r2, #2011	; 0x7db
 80001de:	4293      	cmp	r3, r2
 80001e0:	d813      	bhi.n	800020a <main+0x7e>
	  {
		  gameHID.JoyRx = 0;
 80001e2:	4b35      	ldr	r3, [pc, #212]	; (80002b8 <main+0x12c>)
 80001e4:	2200      	movs	r2, #0
 80001e6:	70da      	strb	r2, [r3, #3]
		  gameHID.JoyRz =127 -  ((adc_buffer[0] - 0)*(127-0)/(2012-0) + 0);
 80001e8:	4b34      	ldr	r3, [pc, #208]	; (80002bc <main+0x130>)
 80001ea:	681a      	ldr	r2, [r3, #0]
 80001ec:	4613      	mov	r3, r2
 80001ee:	01db      	lsls	r3, r3, #7
 80001f0:	1a9b      	subs	r3, r3, r2
 80001f2:	4a34      	ldr	r2, [pc, #208]	; (80002c4 <main+0x138>)
 80001f4:	fba2 2303 	umull	r2, r3, r2, r3
 80001f8:	0a9b      	lsrs	r3, r3, #10
 80001fa:	b2db      	uxtb	r3, r3
 80001fc:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8000200:	b2db      	uxtb	r3, r3
 8000202:	b25a      	sxtb	r2, r3
 8000204:	4b2c      	ldr	r3, [pc, #176]	; (80002b8 <main+0x12c>)
 8000206:	715a      	strb	r2, [r3, #5]
 8000208:	e01f      	b.n	800024a <main+0xbe>
	  }
	  else if(adc_buffer[0] > 2012)
 800020a:	4b2c      	ldr	r3, [pc, #176]	; (80002bc <main+0x130>)
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	f240 72dc 	movw	r2, #2012	; 0x7dc
 8000212:	4293      	cmp	r3, r2
 8000214:	d913      	bls.n	800023e <main+0xb2>
	  {
		  gameHID.JoyRx = (((adc_buffer[0]-2012) - 0)*(127-0)/(2012-0) + 0);
 8000216:	4b29      	ldr	r3, [pc, #164]	; (80002bc <main+0x130>)
 8000218:	681a      	ldr	r2, [r3, #0]
 800021a:	4613      	mov	r3, r2
 800021c:	01db      	lsls	r3, r3, #7
 800021e:	1a9b      	subs	r3, r3, r2
 8000220:	f5a3 3379 	sub.w	r3, r3, #254976	; 0x3e400
 8000224:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 8000228:	4a26      	ldr	r2, [pc, #152]	; (80002c4 <main+0x138>)
 800022a:	fba2 2303 	umull	r2, r3, r2, r3
 800022e:	0a9b      	lsrs	r3, r3, #10
 8000230:	b25a      	sxtb	r2, r3
 8000232:	4b21      	ldr	r3, [pc, #132]	; (80002b8 <main+0x12c>)
 8000234:	70da      	strb	r2, [r3, #3]
	      gameHID.JoyRz = 0;
 8000236:	4b20      	ldr	r3, [pc, #128]	; (80002b8 <main+0x12c>)
 8000238:	2200      	movs	r2, #0
 800023a:	715a      	strb	r2, [r3, #5]
 800023c:	e005      	b.n	800024a <main+0xbe>
	  }
	  else
	  {
		  gameHID.JoyRx = 0;
 800023e:	4b1e      	ldr	r3, [pc, #120]	; (80002b8 <main+0x12c>)
 8000240:	2200      	movs	r2, #0
 8000242:	70da      	strb	r2, [r3, #3]
		  gameHID.JoyRz = 0;
 8000244:	4b1c      	ldr	r3, [pc, #112]	; (80002b8 <main+0x12c>)
 8000246:	2200      	movs	r2, #0
 8000248:	715a      	strb	r2, [r3, #5]
	  }
	  if(adc_buffer[1] > 2240)
 800024a:	4b1c      	ldr	r3, [pc, #112]	; (80002bc <main+0x130>)
 800024c:	685b      	ldr	r3, [r3, #4]
 800024e:	f5b3 6f0c 	cmp.w	r3, #2240	; 0x8c0
 8000252:	d910      	bls.n	8000276 <main+0xea>
		  gameHID.JoyRy = (adc_buffer[1]-2235)*(120-0)/(2620-2235) + 0;
 8000254:	4b19      	ldr	r3, [pc, #100]	; (80002bc <main+0x130>)
 8000256:	685a      	ldr	r2, [r3, #4]
 8000258:	4613      	mov	r3, r2
 800025a:	011b      	lsls	r3, r3, #4
 800025c:	1a9b      	subs	r3, r3, r2
 800025e:	00db      	lsls	r3, r3, #3
 8000260:	f5a3 2382 	sub.w	r3, r3, #266240	; 0x41000
 8000264:	f5a3 63f5 	sub.w	r3, r3, #1960	; 0x7a8
 8000268:	4a17      	ldr	r2, [pc, #92]	; (80002c8 <main+0x13c>)
 800026a:	fba2 2303 	umull	r2, r3, r2, r3
 800026e:	09db      	lsrs	r3, r3, #7
 8000270:	b25a      	sxtb	r2, r3
 8000272:	4b11      	ldr	r3, [pc, #68]	; (80002b8 <main+0x12c>)
 8000274:	711a      	strb	r2, [r3, #4]
	  if(adc_buffer[2] > 1745)
 8000276:	4b11      	ldr	r3, [pc, #68]	; (80002bc <main+0x130>)
 8000278:	689b      	ldr	r3, [r3, #8]
 800027a:	f240 62d1 	movw	r2, #1745	; 0x6d1
 800027e:	4293      	cmp	r3, r2
 8000280:	d911      	bls.n	80002a6 <main+0x11a>
		  gameHID.JoyZ = (adc_buffer[2]-1730)*(120-0)/(2090-1730) + 0;
 8000282:	4b0e      	ldr	r3, [pc, #56]	; (80002bc <main+0x130>)
 8000284:	689a      	ldr	r2, [r3, #8]
 8000286:	4613      	mov	r3, r2
 8000288:	011b      	lsls	r3, r3, #4
 800028a:	1a9b      	subs	r3, r3, r2
 800028c:	00db      	lsls	r3, r3, #3
 800028e:	f5a3 334a 	sub.w	r3, r3, #206848	; 0x32800
 8000292:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 8000296:	08db      	lsrs	r3, r3, #3
 8000298:	4a0c      	ldr	r2, [pc, #48]	; (80002cc <main+0x140>)
 800029a:	fba2 2303 	umull	r2, r3, r2, r3
 800029e:	089b      	lsrs	r3, r3, #2
 80002a0:	b25a      	sxtb	r2, r3
 80002a2:	4b05      	ldr	r3, [pc, #20]	; (80002b8 <main+0x12c>)
 80002a4:	709a      	strb	r2, [r3, #2]
	  USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
 80002a6:	2206      	movs	r2, #6
 80002a8:	4903      	ldr	r1, [pc, #12]	; (80002b8 <main+0x12c>)
 80002aa:	4809      	ldr	r0, [pc, #36]	; (80002d0 <main+0x144>)
 80002ac:	f006 f820 	bl	80062f0 <USBD_HID_SendReport>
	  HAL_Delay(20);
 80002b0:	2014      	movs	r0, #20
 80002b2:	f000 fa99 	bl	80007e8 <HAL_Delay>
	  if(adc_buffer[0] < 2012)
 80002b6:	e78e      	b.n	80001d6 <main+0x4a>
 80002b8:	20000170 	.word	0x20000170
 80002bc:	200001f8 	.word	0x200001f8
 80002c0:	20000178 	.word	0x20000178
 80002c4:	824a4e61 	.word	0x824a4e61
 80002c8:	551c979b 	.word	0x551c979b
 80002cc:	16c16c17 	.word	0x16c16c17
 80002d0:	20000208 	.word	0x20000208

080002d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b094      	sub	sp, #80	; 0x50
 80002d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002de:	2228      	movs	r2, #40	; 0x28
 80002e0:	2100      	movs	r1, #0
 80002e2:	4618      	mov	r0, r3
 80002e4:	f007 fcd2 	bl	8007c8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002e8:	f107 0314 	add.w	r3, r7, #20
 80002ec:	2200      	movs	r2, #0
 80002ee:	601a      	str	r2, [r3, #0]
 80002f0:	605a      	str	r2, [r3, #4]
 80002f2:	609a      	str	r2, [r3, #8]
 80002f4:	60da      	str	r2, [r3, #12]
 80002f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002f8:	1d3b      	adds	r3, r7, #4
 80002fa:	2200      	movs	r2, #0
 80002fc:	601a      	str	r2, [r3, #0]
 80002fe:	605a      	str	r2, [r3, #4]
 8000300:	609a      	str	r2, [r3, #8]
 8000302:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000304:	2301      	movs	r3, #1
 8000306:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000308:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800030c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800030e:	2300      	movs	r3, #0
 8000310:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000312:	2301      	movs	r3, #1
 8000314:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000316:	2302      	movs	r3, #2
 8000318:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800031a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800031e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000320:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000324:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000326:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800032a:	4618      	mov	r0, r3
 800032c:	f002 ff70 	bl	8003210 <HAL_RCC_OscConfig>
 8000330:	4603      	mov	r3, r0
 8000332:	2b00      	cmp	r3, #0
 8000334:	d001      	beq.n	800033a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000336:	f000 f8d3 	bl	80004e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800033a:	230f      	movs	r3, #15
 800033c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800033e:	2302      	movs	r3, #2
 8000340:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000342:	2300      	movs	r3, #0
 8000344:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000346:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800034a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800034c:	2300      	movs	r3, #0
 800034e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000350:	f107 0314 	add.w	r3, r7, #20
 8000354:	2101      	movs	r1, #1
 8000356:	4618      	mov	r0, r3
 8000358:	f003 f9da 	bl	8003710 <HAL_RCC_ClockConfig>
 800035c:	4603      	mov	r3, r0
 800035e:	2b00      	cmp	r3, #0
 8000360:	d001      	beq.n	8000366 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000362:	f000 f8bd 	bl	80004e0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8000366:	2312      	movs	r3, #18
 8000368:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 800036a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800036e:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000370:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000374:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000376:	1d3b      	adds	r3, r7, #4
 8000378:	4618      	mov	r0, r3
 800037a:	f003 fb31 	bl	80039e0 <HAL_RCCEx_PeriphCLKConfig>
 800037e:	4603      	mov	r3, r0
 8000380:	2b00      	cmp	r3, #0
 8000382:	d001      	beq.n	8000388 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000384:	f000 f8ac 	bl	80004e0 <Error_Handler>
  }
}
 8000388:	bf00      	nop
 800038a:	3750      	adds	r7, #80	; 0x50
 800038c:	46bd      	mov	sp, r7
 800038e:	bd80      	pop	{r7, pc}

08000390 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b084      	sub	sp, #16
 8000394:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000396:	1d3b      	adds	r3, r7, #4
 8000398:	2200      	movs	r2, #0
 800039a:	601a      	str	r2, [r3, #0]
 800039c:	605a      	str	r2, [r3, #4]
 800039e:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80003a0:	4b27      	ldr	r3, [pc, #156]	; (8000440 <MX_ADC1_Init+0xb0>)
 80003a2:	4a28      	ldr	r2, [pc, #160]	; (8000444 <MX_ADC1_Init+0xb4>)
 80003a4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80003a6:	4b26      	ldr	r3, [pc, #152]	; (8000440 <MX_ADC1_Init+0xb0>)
 80003a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80003ac:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80003ae:	4b24      	ldr	r3, [pc, #144]	; (8000440 <MX_ADC1_Init+0xb0>)
 80003b0:	2201      	movs	r2, #1
 80003b2:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80003b4:	4b22      	ldr	r3, [pc, #136]	; (8000440 <MX_ADC1_Init+0xb0>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80003ba:	4b21      	ldr	r3, [pc, #132]	; (8000440 <MX_ADC1_Init+0xb0>)
 80003bc:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80003c0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80003c2:	4b1f      	ldr	r3, [pc, #124]	; (8000440 <MX_ADC1_Init+0xb0>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 3;
 80003c8:	4b1d      	ldr	r3, [pc, #116]	; (8000440 <MX_ADC1_Init+0xb0>)
 80003ca:	2203      	movs	r2, #3
 80003cc:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80003ce:	481c      	ldr	r0, [pc, #112]	; (8000440 <MX_ADC1_Init+0xb0>)
 80003d0:	f000 fa2e 	bl	8000830 <HAL_ADC_Init>
 80003d4:	4603      	mov	r3, r0
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d001      	beq.n	80003de <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80003da:	f000 f881 	bl	80004e0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80003de:	2307      	movs	r3, #7
 80003e0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80003e2:	2301      	movs	r3, #1
 80003e4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 80003e6:	2305      	movs	r3, #5
 80003e8:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003ea:	1d3b      	adds	r3, r7, #4
 80003ec:	4619      	mov	r1, r3
 80003ee:	4814      	ldr	r0, [pc, #80]	; (8000440 <MX_ADC1_Init+0xb0>)
 80003f0:	f000 fbe6 	bl	8000bc0 <HAL_ADC_ConfigChannel>
 80003f4:	4603      	mov	r3, r0
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d001      	beq.n	80003fe <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80003fa:	f000 f871 	bl	80004e0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80003fe:	2308      	movs	r3, #8
 8000400:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000402:	2302      	movs	r3, #2
 8000404:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000406:	1d3b      	adds	r3, r7, #4
 8000408:	4619      	mov	r1, r3
 800040a:	480d      	ldr	r0, [pc, #52]	; (8000440 <MX_ADC1_Init+0xb0>)
 800040c:	f000 fbd8 	bl	8000bc0 <HAL_ADC_ConfigChannel>
 8000410:	4603      	mov	r3, r0
 8000412:	2b00      	cmp	r3, #0
 8000414:	d001      	beq.n	800041a <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000416:	f000 f863 	bl	80004e0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800041a:	2309      	movs	r3, #9
 800041c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800041e:	2303      	movs	r3, #3
 8000420:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000422:	1d3b      	adds	r3, r7, #4
 8000424:	4619      	mov	r1, r3
 8000426:	4806      	ldr	r0, [pc, #24]	; (8000440 <MX_ADC1_Init+0xb0>)
 8000428:	f000 fbca 	bl	8000bc0 <HAL_ADC_ConfigChannel>
 800042c:	4603      	mov	r3, r0
 800042e:	2b00      	cmp	r3, #0
 8000430:	d001      	beq.n	8000436 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000432:	f000 f855 	bl	80004e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000436:	bf00      	nop
 8000438:	3710      	adds	r7, #16
 800043a:	46bd      	mov	sp, r7
 800043c:	bd80      	pop	{r7, pc}
 800043e:	bf00      	nop
 8000440:	20000178 	.word	0x20000178
 8000444:	40012400 	.word	0x40012400

08000448 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	b082      	sub	sp, #8
 800044c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800044e:	4b0c      	ldr	r3, [pc, #48]	; (8000480 <MX_DMA_Init+0x38>)
 8000450:	695b      	ldr	r3, [r3, #20]
 8000452:	4a0b      	ldr	r2, [pc, #44]	; (8000480 <MX_DMA_Init+0x38>)
 8000454:	f043 0301 	orr.w	r3, r3, #1
 8000458:	6153      	str	r3, [r2, #20]
 800045a:	4b09      	ldr	r3, [pc, #36]	; (8000480 <MX_DMA_Init+0x38>)
 800045c:	695b      	ldr	r3, [r3, #20]
 800045e:	f003 0301 	and.w	r3, r3, #1
 8000462:	607b      	str	r3, [r7, #4]
 8000464:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000466:	2200      	movs	r2, #0
 8000468:	2100      	movs	r1, #0
 800046a:	200b      	movs	r0, #11
 800046c:	f000 fe79 	bl	8001162 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000470:	200b      	movs	r0, #11
 8000472:	f000 fe92 	bl	800119a <HAL_NVIC_EnableIRQ>

}
 8000476:	bf00      	nop
 8000478:	3708      	adds	r7, #8
 800047a:	46bd      	mov	sp, r7
 800047c:	bd80      	pop	{r7, pc}
 800047e:	bf00      	nop
 8000480:	40021000 	.word	0x40021000

08000484 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000484:	b480      	push	{r7}
 8000486:	b085      	sub	sp, #20
 8000488:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800048a:	4b14      	ldr	r3, [pc, #80]	; (80004dc <MX_GPIO_Init+0x58>)
 800048c:	699b      	ldr	r3, [r3, #24]
 800048e:	4a13      	ldr	r2, [pc, #76]	; (80004dc <MX_GPIO_Init+0x58>)
 8000490:	f043 0320 	orr.w	r3, r3, #32
 8000494:	6193      	str	r3, [r2, #24]
 8000496:	4b11      	ldr	r3, [pc, #68]	; (80004dc <MX_GPIO_Init+0x58>)
 8000498:	699b      	ldr	r3, [r3, #24]
 800049a:	f003 0320 	and.w	r3, r3, #32
 800049e:	60fb      	str	r3, [r7, #12]
 80004a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004a2:	4b0e      	ldr	r3, [pc, #56]	; (80004dc <MX_GPIO_Init+0x58>)
 80004a4:	699b      	ldr	r3, [r3, #24]
 80004a6:	4a0d      	ldr	r2, [pc, #52]	; (80004dc <MX_GPIO_Init+0x58>)
 80004a8:	f043 0304 	orr.w	r3, r3, #4
 80004ac:	6193      	str	r3, [r2, #24]
 80004ae:	4b0b      	ldr	r3, [pc, #44]	; (80004dc <MX_GPIO_Init+0x58>)
 80004b0:	699b      	ldr	r3, [r3, #24]
 80004b2:	f003 0304 	and.w	r3, r3, #4
 80004b6:	60bb      	str	r3, [r7, #8]
 80004b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004ba:	4b08      	ldr	r3, [pc, #32]	; (80004dc <MX_GPIO_Init+0x58>)
 80004bc:	699b      	ldr	r3, [r3, #24]
 80004be:	4a07      	ldr	r2, [pc, #28]	; (80004dc <MX_GPIO_Init+0x58>)
 80004c0:	f043 0308 	orr.w	r3, r3, #8
 80004c4:	6193      	str	r3, [r2, #24]
 80004c6:	4b05      	ldr	r3, [pc, #20]	; (80004dc <MX_GPIO_Init+0x58>)
 80004c8:	699b      	ldr	r3, [r3, #24]
 80004ca:	f003 0308 	and.w	r3, r3, #8
 80004ce:	607b      	str	r3, [r7, #4]
 80004d0:	687b      	ldr	r3, [r7, #4]

}
 80004d2:	bf00      	nop
 80004d4:	3714      	adds	r7, #20
 80004d6:	46bd      	mov	sp, r7
 80004d8:	bc80      	pop	{r7}
 80004da:	4770      	bx	lr
 80004dc:	40021000 	.word	0x40021000

080004e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004e0:	b480      	push	{r7}
 80004e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004e4:	b672      	cpsid	i
}
 80004e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004e8:	e7fe      	b.n	80004e8 <Error_Handler+0x8>
	...

080004ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004ec:	b480      	push	{r7}
 80004ee:	b085      	sub	sp, #20
 80004f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004f2:	4b15      	ldr	r3, [pc, #84]	; (8000548 <HAL_MspInit+0x5c>)
 80004f4:	699b      	ldr	r3, [r3, #24]
 80004f6:	4a14      	ldr	r2, [pc, #80]	; (8000548 <HAL_MspInit+0x5c>)
 80004f8:	f043 0301 	orr.w	r3, r3, #1
 80004fc:	6193      	str	r3, [r2, #24]
 80004fe:	4b12      	ldr	r3, [pc, #72]	; (8000548 <HAL_MspInit+0x5c>)
 8000500:	699b      	ldr	r3, [r3, #24]
 8000502:	f003 0301 	and.w	r3, r3, #1
 8000506:	60bb      	str	r3, [r7, #8]
 8000508:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800050a:	4b0f      	ldr	r3, [pc, #60]	; (8000548 <HAL_MspInit+0x5c>)
 800050c:	69db      	ldr	r3, [r3, #28]
 800050e:	4a0e      	ldr	r2, [pc, #56]	; (8000548 <HAL_MspInit+0x5c>)
 8000510:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000514:	61d3      	str	r3, [r2, #28]
 8000516:	4b0c      	ldr	r3, [pc, #48]	; (8000548 <HAL_MspInit+0x5c>)
 8000518:	69db      	ldr	r3, [r3, #28]
 800051a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800051e:	607b      	str	r3, [r7, #4]
 8000520:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000522:	4b0a      	ldr	r3, [pc, #40]	; (800054c <HAL_MspInit+0x60>)
 8000524:	685b      	ldr	r3, [r3, #4]
 8000526:	60fb      	str	r3, [r7, #12]
 8000528:	68fb      	ldr	r3, [r7, #12]
 800052a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800052e:	60fb      	str	r3, [r7, #12]
 8000530:	68fb      	ldr	r3, [r7, #12]
 8000532:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000536:	60fb      	str	r3, [r7, #12]
 8000538:	4a04      	ldr	r2, [pc, #16]	; (800054c <HAL_MspInit+0x60>)
 800053a:	68fb      	ldr	r3, [r7, #12]
 800053c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800053e:	bf00      	nop
 8000540:	3714      	adds	r7, #20
 8000542:	46bd      	mov	sp, r7
 8000544:	bc80      	pop	{r7}
 8000546:	4770      	bx	lr
 8000548:	40021000 	.word	0x40021000
 800054c:	40010000 	.word	0x40010000

08000550 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b08a      	sub	sp, #40	; 0x28
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000558:	f107 0318 	add.w	r3, r7, #24
 800055c:	2200      	movs	r2, #0
 800055e:	601a      	str	r2, [r3, #0]
 8000560:	605a      	str	r2, [r3, #4]
 8000562:	609a      	str	r2, [r3, #8]
 8000564:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	4a34      	ldr	r2, [pc, #208]	; (800063c <HAL_ADC_MspInit+0xec>)
 800056c:	4293      	cmp	r3, r2
 800056e:	d160      	bne.n	8000632 <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000570:	4b33      	ldr	r3, [pc, #204]	; (8000640 <HAL_ADC_MspInit+0xf0>)
 8000572:	699b      	ldr	r3, [r3, #24]
 8000574:	4a32      	ldr	r2, [pc, #200]	; (8000640 <HAL_ADC_MspInit+0xf0>)
 8000576:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800057a:	6193      	str	r3, [r2, #24]
 800057c:	4b30      	ldr	r3, [pc, #192]	; (8000640 <HAL_ADC_MspInit+0xf0>)
 800057e:	699b      	ldr	r3, [r3, #24]
 8000580:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000584:	617b      	str	r3, [r7, #20]
 8000586:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000588:	4b2d      	ldr	r3, [pc, #180]	; (8000640 <HAL_ADC_MspInit+0xf0>)
 800058a:	699b      	ldr	r3, [r3, #24]
 800058c:	4a2c      	ldr	r2, [pc, #176]	; (8000640 <HAL_ADC_MspInit+0xf0>)
 800058e:	f043 0304 	orr.w	r3, r3, #4
 8000592:	6193      	str	r3, [r2, #24]
 8000594:	4b2a      	ldr	r3, [pc, #168]	; (8000640 <HAL_ADC_MspInit+0xf0>)
 8000596:	699b      	ldr	r3, [r3, #24]
 8000598:	f003 0304 	and.w	r3, r3, #4
 800059c:	613b      	str	r3, [r7, #16]
 800059e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005a0:	4b27      	ldr	r3, [pc, #156]	; (8000640 <HAL_ADC_MspInit+0xf0>)
 80005a2:	699b      	ldr	r3, [r3, #24]
 80005a4:	4a26      	ldr	r2, [pc, #152]	; (8000640 <HAL_ADC_MspInit+0xf0>)
 80005a6:	f043 0308 	orr.w	r3, r3, #8
 80005aa:	6193      	str	r3, [r2, #24]
 80005ac:	4b24      	ldr	r3, [pc, #144]	; (8000640 <HAL_ADC_MspInit+0xf0>)
 80005ae:	699b      	ldr	r3, [r3, #24]
 80005b0:	f003 0308 	and.w	r3, r3, #8
 80005b4:	60fb      	str	r3, [r7, #12]
 80005b6:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80005b8:	2380      	movs	r3, #128	; 0x80
 80005ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005bc:	2303      	movs	r3, #3
 80005be:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005c0:	f107 0318 	add.w	r3, r7, #24
 80005c4:	4619      	mov	r1, r3
 80005c6:	481f      	ldr	r0, [pc, #124]	; (8000644 <HAL_ADC_MspInit+0xf4>)
 80005c8:	f000 fff0 	bl	80015ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80005cc:	2303      	movs	r3, #3
 80005ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005d0:	2303      	movs	r3, #3
 80005d2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005d4:	f107 0318 	add.w	r3, r7, #24
 80005d8:	4619      	mov	r1, r3
 80005da:	481b      	ldr	r0, [pc, #108]	; (8000648 <HAL_ADC_MspInit+0xf8>)
 80005dc:	f000 ffe6 	bl	80015ac <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80005e0:	4b1a      	ldr	r3, [pc, #104]	; (800064c <HAL_ADC_MspInit+0xfc>)
 80005e2:	4a1b      	ldr	r2, [pc, #108]	; (8000650 <HAL_ADC_MspInit+0x100>)
 80005e4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80005e6:	4b19      	ldr	r3, [pc, #100]	; (800064c <HAL_ADC_MspInit+0xfc>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80005ec:	4b17      	ldr	r3, [pc, #92]	; (800064c <HAL_ADC_MspInit+0xfc>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80005f2:	4b16      	ldr	r3, [pc, #88]	; (800064c <HAL_ADC_MspInit+0xfc>)
 80005f4:	2280      	movs	r2, #128	; 0x80
 80005f6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80005f8:	4b14      	ldr	r3, [pc, #80]	; (800064c <HAL_ADC_MspInit+0xfc>)
 80005fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80005fe:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000600:	4b12      	ldr	r3, [pc, #72]	; (800064c <HAL_ADC_MspInit+0xfc>)
 8000602:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000606:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000608:	4b10      	ldr	r3, [pc, #64]	; (800064c <HAL_ADC_MspInit+0xfc>)
 800060a:	2220      	movs	r2, #32
 800060c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 800060e:	4b0f      	ldr	r3, [pc, #60]	; (800064c <HAL_ADC_MspInit+0xfc>)
 8000610:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000614:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000616:	480d      	ldr	r0, [pc, #52]	; (800064c <HAL_ADC_MspInit+0xfc>)
 8000618:	f000 fdda 	bl	80011d0 <HAL_DMA_Init>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <HAL_ADC_MspInit+0xd6>
    {
      Error_Handler();
 8000622:	f7ff ff5d 	bl	80004e0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	4a08      	ldr	r2, [pc, #32]	; (800064c <HAL_ADC_MspInit+0xfc>)
 800062a:	621a      	str	r2, [r3, #32]
 800062c:	4a07      	ldr	r2, [pc, #28]	; (800064c <HAL_ADC_MspInit+0xfc>)
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000632:	bf00      	nop
 8000634:	3728      	adds	r7, #40	; 0x28
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	40012400 	.word	0x40012400
 8000640:	40021000 	.word	0x40021000
 8000644:	40010800 	.word	0x40010800
 8000648:	40010c00 	.word	0x40010c00
 800064c:	200001a8 	.word	0x200001a8
 8000650:	40020008 	.word	0x40020008

08000654 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000658:	e7fe      	b.n	8000658 <NMI_Handler+0x4>

0800065a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800065a:	b480      	push	{r7}
 800065c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800065e:	e7fe      	b.n	800065e <HardFault_Handler+0x4>

08000660 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000664:	e7fe      	b.n	8000664 <MemManage_Handler+0x4>

08000666 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000666:	b480      	push	{r7}
 8000668:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800066a:	e7fe      	b.n	800066a <BusFault_Handler+0x4>

0800066c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000670:	e7fe      	b.n	8000670 <UsageFault_Handler+0x4>

08000672 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000672:	b480      	push	{r7}
 8000674:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000676:	bf00      	nop
 8000678:	46bd      	mov	sp, r7
 800067a:	bc80      	pop	{r7}
 800067c:	4770      	bx	lr

0800067e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800067e:	b480      	push	{r7}
 8000680:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000682:	bf00      	nop
 8000684:	46bd      	mov	sp, r7
 8000686:	bc80      	pop	{r7}
 8000688:	4770      	bx	lr

0800068a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800068a:	b480      	push	{r7}
 800068c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800068e:	bf00      	nop
 8000690:	46bd      	mov	sp, r7
 8000692:	bc80      	pop	{r7}
 8000694:	4770      	bx	lr

08000696 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000696:	b580      	push	{r7, lr}
 8000698:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800069a:	f000 f889 	bl	80007b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800069e:	bf00      	nop
 80006a0:	bd80      	pop	{r7, pc}
	...

080006a4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80006a8:	4802      	ldr	r0, [pc, #8]	; (80006b4 <DMA1_Channel1_IRQHandler+0x10>)
 80006aa:	f000 fe4b 	bl	8001344 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80006ae:	bf00      	nop
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	200001a8 	.word	0x200001a8

080006b8 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80006bc:	4802      	ldr	r0, [pc, #8]	; (80006c8 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80006be:	f001 fa2a 	bl	8001b16 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80006c2:	bf00      	nop
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	200006cc 	.word	0x200006cc

080006cc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006cc:	b480      	push	{r7}
 80006ce:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006d0:	bf00      	nop
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bc80      	pop	{r7}
 80006d6:	4770      	bx	lr

080006d8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006d8:	480c      	ldr	r0, [pc, #48]	; (800070c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80006da:	490d      	ldr	r1, [pc, #52]	; (8000710 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80006dc:	4a0d      	ldr	r2, [pc, #52]	; (8000714 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80006de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006e0:	e002      	b.n	80006e8 <LoopCopyDataInit>

080006e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006e6:	3304      	adds	r3, #4

080006e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006ec:	d3f9      	bcc.n	80006e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006ee:	4a0a      	ldr	r2, [pc, #40]	; (8000718 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80006f0:	4c0a      	ldr	r4, [pc, #40]	; (800071c <LoopFillZerobss+0x22>)
  movs r3, #0
 80006f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006f4:	e001      	b.n	80006fa <LoopFillZerobss>

080006f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006f8:	3204      	adds	r2, #4

080006fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006fc:	d3fb      	bcc.n	80006f6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80006fe:	f7ff ffe5 	bl	80006cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000702:	f007 fa9f 	bl	8007c44 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000706:	f7ff fd41 	bl	800018c <main>
  bx lr
 800070a:	4770      	bx	lr
  ldr r0, =_sdata
 800070c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000710:	2000013c 	.word	0x2000013c
  ldr r2, =_sidata
 8000714:	08007d24 	.word	0x08007d24
  ldr r2, =_sbss
 8000718:	2000013c 	.word	0x2000013c
  ldr r4, =_ebss
 800071c:	200009b8 	.word	0x200009b8

08000720 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000720:	e7fe      	b.n	8000720 <ADC1_2_IRQHandler>
	...

08000724 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000728:	4b08      	ldr	r3, [pc, #32]	; (800074c <HAL_Init+0x28>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	4a07      	ldr	r2, [pc, #28]	; (800074c <HAL_Init+0x28>)
 800072e:	f043 0310 	orr.w	r3, r3, #16
 8000732:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000734:	2003      	movs	r0, #3
 8000736:	f000 fd09 	bl	800114c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800073a:	2000      	movs	r0, #0
 800073c:	f000 f808 	bl	8000750 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000740:	f7ff fed4 	bl	80004ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000744:	2300      	movs	r3, #0
}
 8000746:	4618      	mov	r0, r3
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	40022000 	.word	0x40022000

08000750 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000758:	4b12      	ldr	r3, [pc, #72]	; (80007a4 <HAL_InitTick+0x54>)
 800075a:	681a      	ldr	r2, [r3, #0]
 800075c:	4b12      	ldr	r3, [pc, #72]	; (80007a8 <HAL_InitTick+0x58>)
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	4619      	mov	r1, r3
 8000762:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000766:	fbb3 f3f1 	udiv	r3, r3, r1
 800076a:	fbb2 f3f3 	udiv	r3, r2, r3
 800076e:	4618      	mov	r0, r3
 8000770:	f000 fd21 	bl	80011b6 <HAL_SYSTICK_Config>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800077a:	2301      	movs	r3, #1
 800077c:	e00e      	b.n	800079c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	2b0f      	cmp	r3, #15
 8000782:	d80a      	bhi.n	800079a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000784:	2200      	movs	r2, #0
 8000786:	6879      	ldr	r1, [r7, #4]
 8000788:	f04f 30ff 	mov.w	r0, #4294967295
 800078c:	f000 fce9 	bl	8001162 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000790:	4a06      	ldr	r2, [pc, #24]	; (80007ac <HAL_InitTick+0x5c>)
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000796:	2300      	movs	r3, #0
 8000798:	e000      	b.n	800079c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800079a:	2301      	movs	r3, #1
}
 800079c:	4618      	mov	r0, r3
 800079e:	3708      	adds	r7, #8
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	20000000 	.word	0x20000000
 80007a8:	20000008 	.word	0x20000008
 80007ac:	20000004 	.word	0x20000004

080007b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007b4:	4b05      	ldr	r3, [pc, #20]	; (80007cc <HAL_IncTick+0x1c>)
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	461a      	mov	r2, r3
 80007ba:	4b05      	ldr	r3, [pc, #20]	; (80007d0 <HAL_IncTick+0x20>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	4413      	add	r3, r2
 80007c0:	4a03      	ldr	r2, [pc, #12]	; (80007d0 <HAL_IncTick+0x20>)
 80007c2:	6013      	str	r3, [r2, #0]
}
 80007c4:	bf00      	nop
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bc80      	pop	{r7}
 80007ca:	4770      	bx	lr
 80007cc:	20000008 	.word	0x20000008
 80007d0:	20000204 	.word	0x20000204

080007d4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
  return uwTick;
 80007d8:	4b02      	ldr	r3, [pc, #8]	; (80007e4 <HAL_GetTick+0x10>)
 80007da:	681b      	ldr	r3, [r3, #0]
}
 80007dc:	4618      	mov	r0, r3
 80007de:	46bd      	mov	sp, r7
 80007e0:	bc80      	pop	{r7}
 80007e2:	4770      	bx	lr
 80007e4:	20000204 	.word	0x20000204

080007e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b084      	sub	sp, #16
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80007f0:	f7ff fff0 	bl	80007d4 <HAL_GetTick>
 80007f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007fa:	68fb      	ldr	r3, [r7, #12]
 80007fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000800:	d005      	beq.n	800080e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000802:	4b0a      	ldr	r3, [pc, #40]	; (800082c <HAL_Delay+0x44>)
 8000804:	781b      	ldrb	r3, [r3, #0]
 8000806:	461a      	mov	r2, r3
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	4413      	add	r3, r2
 800080c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800080e:	bf00      	nop
 8000810:	f7ff ffe0 	bl	80007d4 <HAL_GetTick>
 8000814:	4602      	mov	r2, r0
 8000816:	68bb      	ldr	r3, [r7, #8]
 8000818:	1ad3      	subs	r3, r2, r3
 800081a:	68fa      	ldr	r2, [r7, #12]
 800081c:	429a      	cmp	r2, r3
 800081e:	d8f7      	bhi.n	8000810 <HAL_Delay+0x28>
  {
  }
}
 8000820:	bf00      	nop
 8000822:	bf00      	nop
 8000824:	3710      	adds	r7, #16
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	20000008 	.word	0x20000008

08000830 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b086      	sub	sp, #24
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000838:	2300      	movs	r3, #0
 800083a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800083c:	2300      	movs	r3, #0
 800083e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000840:	2300      	movs	r3, #0
 8000842:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000844:	2300      	movs	r3, #0
 8000846:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	2b00      	cmp	r3, #0
 800084c:	d101      	bne.n	8000852 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800084e:	2301      	movs	r3, #1
 8000850:	e0be      	b.n	80009d0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	689b      	ldr	r3, [r3, #8]
 8000856:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800085c:	2b00      	cmp	r3, #0
 800085e:	d109      	bne.n	8000874 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	2200      	movs	r2, #0
 8000864:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	2200      	movs	r2, #0
 800086a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800086e:	6878      	ldr	r0, [r7, #4]
 8000870:	f7ff fe6e 	bl	8000550 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000874:	6878      	ldr	r0, [r7, #4]
 8000876:	f000 faf5 	bl	8000e64 <ADC_ConversionStop_Disable>
 800087a:	4603      	mov	r3, r0
 800087c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000882:	f003 0310 	and.w	r3, r3, #16
 8000886:	2b00      	cmp	r3, #0
 8000888:	f040 8099 	bne.w	80009be <HAL_ADC_Init+0x18e>
 800088c:	7dfb      	ldrb	r3, [r7, #23]
 800088e:	2b00      	cmp	r3, #0
 8000890:	f040 8095 	bne.w	80009be <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000898:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800089c:	f023 0302 	bic.w	r3, r3, #2
 80008a0:	f043 0202 	orr.w	r2, r3, #2
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80008b0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	7b1b      	ldrb	r3, [r3, #12]
 80008b6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80008b8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80008ba:	68ba      	ldr	r2, [r7, #8]
 80008bc:	4313      	orrs	r3, r2
 80008be:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	689b      	ldr	r3, [r3, #8]
 80008c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80008c8:	d003      	beq.n	80008d2 <HAL_ADC_Init+0xa2>
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	689b      	ldr	r3, [r3, #8]
 80008ce:	2b01      	cmp	r3, #1
 80008d0:	d102      	bne.n	80008d8 <HAL_ADC_Init+0xa8>
 80008d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008d6:	e000      	b.n	80008da <HAL_ADC_Init+0xaa>
 80008d8:	2300      	movs	r3, #0
 80008da:	693a      	ldr	r2, [r7, #16]
 80008dc:	4313      	orrs	r3, r2
 80008de:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	7d1b      	ldrb	r3, [r3, #20]
 80008e4:	2b01      	cmp	r3, #1
 80008e6:	d119      	bne.n	800091c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	7b1b      	ldrb	r3, [r3, #12]
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d109      	bne.n	8000904 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	699b      	ldr	r3, [r3, #24]
 80008f4:	3b01      	subs	r3, #1
 80008f6:	035a      	lsls	r2, r3, #13
 80008f8:	693b      	ldr	r3, [r7, #16]
 80008fa:	4313      	orrs	r3, r2
 80008fc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000900:	613b      	str	r3, [r7, #16]
 8000902:	e00b      	b.n	800091c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000908:	f043 0220 	orr.w	r2, r3, #32
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000914:	f043 0201 	orr.w	r2, r3, #1
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	685b      	ldr	r3, [r3, #4]
 8000922:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	693a      	ldr	r2, [r7, #16]
 800092c:	430a      	orrs	r2, r1
 800092e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	689a      	ldr	r2, [r3, #8]
 8000936:	4b28      	ldr	r3, [pc, #160]	; (80009d8 <HAL_ADC_Init+0x1a8>)
 8000938:	4013      	ands	r3, r2
 800093a:	687a      	ldr	r2, [r7, #4]
 800093c:	6812      	ldr	r2, [r2, #0]
 800093e:	68b9      	ldr	r1, [r7, #8]
 8000940:	430b      	orrs	r3, r1
 8000942:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	689b      	ldr	r3, [r3, #8]
 8000948:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800094c:	d003      	beq.n	8000956 <HAL_ADC_Init+0x126>
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	689b      	ldr	r3, [r3, #8]
 8000952:	2b01      	cmp	r3, #1
 8000954:	d104      	bne.n	8000960 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	691b      	ldr	r3, [r3, #16]
 800095a:	3b01      	subs	r3, #1
 800095c:	051b      	lsls	r3, r3, #20
 800095e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000966:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	68fa      	ldr	r2, [r7, #12]
 8000970:	430a      	orrs	r2, r1
 8000972:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	689a      	ldr	r2, [r3, #8]
 800097a:	4b18      	ldr	r3, [pc, #96]	; (80009dc <HAL_ADC_Init+0x1ac>)
 800097c:	4013      	ands	r3, r2
 800097e:	68ba      	ldr	r2, [r7, #8]
 8000980:	429a      	cmp	r2, r3
 8000982:	d10b      	bne.n	800099c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	2200      	movs	r2, #0
 8000988:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800098e:	f023 0303 	bic.w	r3, r3, #3
 8000992:	f043 0201 	orr.w	r2, r3, #1
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800099a:	e018      	b.n	80009ce <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009a0:	f023 0312 	bic.w	r3, r3, #18
 80009a4:	f043 0210 	orr.w	r2, r3, #16
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009b0:	f043 0201 	orr.w	r2, r3, #1
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80009b8:	2301      	movs	r3, #1
 80009ba:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80009bc:	e007      	b.n	80009ce <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009c2:	f043 0210 	orr.w	r2, r3, #16
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80009ca:	2301      	movs	r3, #1
 80009cc:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80009ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80009d0:	4618      	mov	r0, r3
 80009d2:	3718      	adds	r7, #24
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	ffe1f7fd 	.word	0xffe1f7fd
 80009dc:	ff1f0efe 	.word	0xff1f0efe

080009e0 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b086      	sub	sp, #24
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	60f8      	str	r0, [r7, #12]
 80009e8:	60b9      	str	r1, [r7, #8]
 80009ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80009ec:	2300      	movs	r3, #0
 80009ee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4a64      	ldr	r2, [pc, #400]	; (8000b88 <HAL_ADC_Start_DMA+0x1a8>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d004      	beq.n	8000a04 <HAL_ADC_Start_DMA+0x24>
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	4a63      	ldr	r2, [pc, #396]	; (8000b8c <HAL_ADC_Start_DMA+0x1ac>)
 8000a00:	4293      	cmp	r3, r2
 8000a02:	d106      	bne.n	8000a12 <HAL_ADC_Start_DMA+0x32>
 8000a04:	4b60      	ldr	r3, [pc, #384]	; (8000b88 <HAL_ADC_Start_DMA+0x1a8>)
 8000a06:	685b      	ldr	r3, [r3, #4]
 8000a08:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	f040 80b3 	bne.w	8000b78 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000a18:	2b01      	cmp	r3, #1
 8000a1a:	d101      	bne.n	8000a20 <HAL_ADC_Start_DMA+0x40>
 8000a1c:	2302      	movs	r3, #2
 8000a1e:	e0ae      	b.n	8000b7e <HAL_ADC_Start_DMA+0x19e>
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	2201      	movs	r2, #1
 8000a24:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000a28:	68f8      	ldr	r0, [r7, #12]
 8000a2a:	f000 f9c1 	bl	8000db0 <ADC_Enable>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000a32:	7dfb      	ldrb	r3, [r7, #23]
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	f040 809a 	bne.w	8000b6e <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a3e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000a42:	f023 0301 	bic.w	r3, r3, #1
 8000a46:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	4a4e      	ldr	r2, [pc, #312]	; (8000b8c <HAL_ADC_Start_DMA+0x1ac>)
 8000a54:	4293      	cmp	r3, r2
 8000a56:	d105      	bne.n	8000a64 <HAL_ADC_Start_DMA+0x84>
 8000a58:	4b4b      	ldr	r3, [pc, #300]	; (8000b88 <HAL_ADC_Start_DMA+0x1a8>)
 8000a5a:	685b      	ldr	r3, [r3, #4]
 8000a5c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d115      	bne.n	8000a90 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a68:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	685b      	ldr	r3, [r3, #4]
 8000a76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d026      	beq.n	8000acc <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a82:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000a86:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000a8e:	e01d      	b.n	8000acc <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a94:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	4a39      	ldr	r2, [pc, #228]	; (8000b88 <HAL_ADC_Start_DMA+0x1a8>)
 8000aa2:	4293      	cmp	r3, r2
 8000aa4:	d004      	beq.n	8000ab0 <HAL_ADC_Start_DMA+0xd0>
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	4a38      	ldr	r2, [pc, #224]	; (8000b8c <HAL_ADC_Start_DMA+0x1ac>)
 8000aac:	4293      	cmp	r3, r2
 8000aae:	d10d      	bne.n	8000acc <HAL_ADC_Start_DMA+0xec>
 8000ab0:	4b35      	ldr	r3, [pc, #212]	; (8000b88 <HAL_ADC_Start_DMA+0x1a8>)
 8000ab2:	685b      	ldr	r3, [r3, #4]
 8000ab4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d007      	beq.n	8000acc <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ac0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000ac4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ad0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d006      	beq.n	8000ae6 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000adc:	f023 0206 	bic.w	r2, r3, #6
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	62da      	str	r2, [r3, #44]	; 0x2c
 8000ae4:	e002      	b.n	8000aec <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	2200      	movs	r2, #0
 8000aea:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	2200      	movs	r2, #0
 8000af0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	6a1b      	ldr	r3, [r3, #32]
 8000af8:	4a25      	ldr	r2, [pc, #148]	; (8000b90 <HAL_ADC_Start_DMA+0x1b0>)
 8000afa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	6a1b      	ldr	r3, [r3, #32]
 8000b00:	4a24      	ldr	r2, [pc, #144]	; (8000b94 <HAL_ADC_Start_DMA+0x1b4>)
 8000b02:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	6a1b      	ldr	r3, [r3, #32]
 8000b08:	4a23      	ldr	r2, [pc, #140]	; (8000b98 <HAL_ADC_Start_DMA+0x1b8>)
 8000b0a:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	f06f 0202 	mvn.w	r2, #2
 8000b14:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	689a      	ldr	r2, [r3, #8]
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000b24:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	6a18      	ldr	r0, [r3, #32]
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	334c      	adds	r3, #76	; 0x4c
 8000b30:	4619      	mov	r1, r3
 8000b32:	68ba      	ldr	r2, [r7, #8]
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	f000 fba5 	bl	8001284 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	689b      	ldr	r3, [r3, #8]
 8000b40:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000b44:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000b48:	d108      	bne.n	8000b5c <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	689a      	ldr	r2, [r3, #8]
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000b58:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8000b5a:	e00f      	b.n	8000b7c <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	689a      	ldr	r2, [r3, #8]
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000b6a:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8000b6c:	e006      	b.n	8000b7c <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	2200      	movs	r2, #0
 8000b72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8000b76:	e001      	b.n	8000b7c <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000b7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	3718      	adds	r7, #24
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	40012400 	.word	0x40012400
 8000b8c:	40012800 	.word	0x40012800
 8000b90:	08000ee7 	.word	0x08000ee7
 8000b94:	08000f63 	.word	0x08000f63
 8000b98:	08000f7f 	.word	0x08000f7f

08000b9c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b083      	sub	sp, #12
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8000ba4:	bf00      	nop
 8000ba6:	370c      	adds	r7, #12
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bc80      	pop	{r7}
 8000bac:	4770      	bx	lr

08000bae <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000bae:	b480      	push	{r7}
 8000bb0:	b083      	sub	sp, #12
 8000bb2:	af00      	add	r7, sp, #0
 8000bb4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000bb6:	bf00      	nop
 8000bb8:	370c      	adds	r7, #12
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bc80      	pop	{r7}
 8000bbe:	4770      	bx	lr

08000bc0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000bc0:	b480      	push	{r7}
 8000bc2:	b085      	sub	sp, #20
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
 8000bc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000bd8:	2b01      	cmp	r3, #1
 8000bda:	d101      	bne.n	8000be0 <HAL_ADC_ConfigChannel+0x20>
 8000bdc:	2302      	movs	r3, #2
 8000bde:	e0dc      	b.n	8000d9a <HAL_ADC_ConfigChannel+0x1da>
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	2201      	movs	r2, #1
 8000be4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	685b      	ldr	r3, [r3, #4]
 8000bec:	2b06      	cmp	r3, #6
 8000bee:	d81c      	bhi.n	8000c2a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	685a      	ldr	r2, [r3, #4]
 8000bfa:	4613      	mov	r3, r2
 8000bfc:	009b      	lsls	r3, r3, #2
 8000bfe:	4413      	add	r3, r2
 8000c00:	3b05      	subs	r3, #5
 8000c02:	221f      	movs	r2, #31
 8000c04:	fa02 f303 	lsl.w	r3, r2, r3
 8000c08:	43db      	mvns	r3, r3
 8000c0a:	4019      	ands	r1, r3
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	6818      	ldr	r0, [r3, #0]
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	685a      	ldr	r2, [r3, #4]
 8000c14:	4613      	mov	r3, r2
 8000c16:	009b      	lsls	r3, r3, #2
 8000c18:	4413      	add	r3, r2
 8000c1a:	3b05      	subs	r3, #5
 8000c1c:	fa00 f203 	lsl.w	r2, r0, r3
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	430a      	orrs	r2, r1
 8000c26:	635a      	str	r2, [r3, #52]	; 0x34
 8000c28:	e03c      	b.n	8000ca4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	685b      	ldr	r3, [r3, #4]
 8000c2e:	2b0c      	cmp	r3, #12
 8000c30:	d81c      	bhi.n	8000c6c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	685a      	ldr	r2, [r3, #4]
 8000c3c:	4613      	mov	r3, r2
 8000c3e:	009b      	lsls	r3, r3, #2
 8000c40:	4413      	add	r3, r2
 8000c42:	3b23      	subs	r3, #35	; 0x23
 8000c44:	221f      	movs	r2, #31
 8000c46:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4a:	43db      	mvns	r3, r3
 8000c4c:	4019      	ands	r1, r3
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	6818      	ldr	r0, [r3, #0]
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	685a      	ldr	r2, [r3, #4]
 8000c56:	4613      	mov	r3, r2
 8000c58:	009b      	lsls	r3, r3, #2
 8000c5a:	4413      	add	r3, r2
 8000c5c:	3b23      	subs	r3, #35	; 0x23
 8000c5e:	fa00 f203 	lsl.w	r2, r0, r3
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	430a      	orrs	r2, r1
 8000c68:	631a      	str	r2, [r3, #48]	; 0x30
 8000c6a:	e01b      	b.n	8000ca4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	685a      	ldr	r2, [r3, #4]
 8000c76:	4613      	mov	r3, r2
 8000c78:	009b      	lsls	r3, r3, #2
 8000c7a:	4413      	add	r3, r2
 8000c7c:	3b41      	subs	r3, #65	; 0x41
 8000c7e:	221f      	movs	r2, #31
 8000c80:	fa02 f303 	lsl.w	r3, r2, r3
 8000c84:	43db      	mvns	r3, r3
 8000c86:	4019      	ands	r1, r3
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	6818      	ldr	r0, [r3, #0]
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	685a      	ldr	r2, [r3, #4]
 8000c90:	4613      	mov	r3, r2
 8000c92:	009b      	lsls	r3, r3, #2
 8000c94:	4413      	add	r3, r2
 8000c96:	3b41      	subs	r3, #65	; 0x41
 8000c98:	fa00 f203 	lsl.w	r2, r0, r3
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	430a      	orrs	r2, r1
 8000ca2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	2b09      	cmp	r3, #9
 8000caa:	d91c      	bls.n	8000ce6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	68d9      	ldr	r1, [r3, #12]
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	681a      	ldr	r2, [r3, #0]
 8000cb6:	4613      	mov	r3, r2
 8000cb8:	005b      	lsls	r3, r3, #1
 8000cba:	4413      	add	r3, r2
 8000cbc:	3b1e      	subs	r3, #30
 8000cbe:	2207      	movs	r2, #7
 8000cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc4:	43db      	mvns	r3, r3
 8000cc6:	4019      	ands	r1, r3
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	6898      	ldr	r0, [r3, #8]
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	681a      	ldr	r2, [r3, #0]
 8000cd0:	4613      	mov	r3, r2
 8000cd2:	005b      	lsls	r3, r3, #1
 8000cd4:	4413      	add	r3, r2
 8000cd6:	3b1e      	subs	r3, #30
 8000cd8:	fa00 f203 	lsl.w	r2, r0, r3
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	430a      	orrs	r2, r1
 8000ce2:	60da      	str	r2, [r3, #12]
 8000ce4:	e019      	b.n	8000d1a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	6919      	ldr	r1, [r3, #16]
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	681a      	ldr	r2, [r3, #0]
 8000cf0:	4613      	mov	r3, r2
 8000cf2:	005b      	lsls	r3, r3, #1
 8000cf4:	4413      	add	r3, r2
 8000cf6:	2207      	movs	r2, #7
 8000cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfc:	43db      	mvns	r3, r3
 8000cfe:	4019      	ands	r1, r3
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	6898      	ldr	r0, [r3, #8]
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	681a      	ldr	r2, [r3, #0]
 8000d08:	4613      	mov	r3, r2
 8000d0a:	005b      	lsls	r3, r3, #1
 8000d0c:	4413      	add	r3, r2
 8000d0e:	fa00 f203 	lsl.w	r2, r0, r3
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	430a      	orrs	r2, r1
 8000d18:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	2b10      	cmp	r3, #16
 8000d20:	d003      	beq.n	8000d2a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000d26:	2b11      	cmp	r3, #17
 8000d28:	d132      	bne.n	8000d90 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	4a1d      	ldr	r2, [pc, #116]	; (8000da4 <HAL_ADC_ConfigChannel+0x1e4>)
 8000d30:	4293      	cmp	r3, r2
 8000d32:	d125      	bne.n	8000d80 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	689b      	ldr	r3, [r3, #8]
 8000d3a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d126      	bne.n	8000d90 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	689a      	ldr	r2, [r3, #8]
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000d50:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	2b10      	cmp	r3, #16
 8000d58:	d11a      	bne.n	8000d90 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000d5a:	4b13      	ldr	r3, [pc, #76]	; (8000da8 <HAL_ADC_ConfigChannel+0x1e8>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	4a13      	ldr	r2, [pc, #76]	; (8000dac <HAL_ADC_ConfigChannel+0x1ec>)
 8000d60:	fba2 2303 	umull	r2, r3, r2, r3
 8000d64:	0c9a      	lsrs	r2, r3, #18
 8000d66:	4613      	mov	r3, r2
 8000d68:	009b      	lsls	r3, r3, #2
 8000d6a:	4413      	add	r3, r2
 8000d6c:	005b      	lsls	r3, r3, #1
 8000d6e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000d70:	e002      	b.n	8000d78 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000d72:	68bb      	ldr	r3, [r7, #8]
 8000d74:	3b01      	subs	r3, #1
 8000d76:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000d78:	68bb      	ldr	r3, [r7, #8]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d1f9      	bne.n	8000d72 <HAL_ADC_ConfigChannel+0x1b2>
 8000d7e:	e007      	b.n	8000d90 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d84:	f043 0220 	orr.w	r2, r3, #32
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	2200      	movs	r2, #0
 8000d94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000d98:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	3714      	adds	r7, #20
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bc80      	pop	{r7}
 8000da2:	4770      	bx	lr
 8000da4:	40012400 	.word	0x40012400
 8000da8:	20000000 	.word	0x20000000
 8000dac:	431bde83 	.word	0x431bde83

08000db0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b084      	sub	sp, #16
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000db8:	2300      	movs	r3, #0
 8000dba:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	689b      	ldr	r3, [r3, #8]
 8000dc6:	f003 0301 	and.w	r3, r3, #1
 8000dca:	2b01      	cmp	r3, #1
 8000dcc:	d040      	beq.n	8000e50 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	689a      	ldr	r2, [r3, #8]
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	f042 0201 	orr.w	r2, r2, #1
 8000ddc:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000dde:	4b1f      	ldr	r3, [pc, #124]	; (8000e5c <ADC_Enable+0xac>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4a1f      	ldr	r2, [pc, #124]	; (8000e60 <ADC_Enable+0xb0>)
 8000de4:	fba2 2303 	umull	r2, r3, r2, r3
 8000de8:	0c9b      	lsrs	r3, r3, #18
 8000dea:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000dec:	e002      	b.n	8000df4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8000dee:	68bb      	ldr	r3, [r7, #8]
 8000df0:	3b01      	subs	r3, #1
 8000df2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000df4:	68bb      	ldr	r3, [r7, #8]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d1f9      	bne.n	8000dee <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000dfa:	f7ff fceb 	bl	80007d4 <HAL_GetTick>
 8000dfe:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000e00:	e01f      	b.n	8000e42 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000e02:	f7ff fce7 	bl	80007d4 <HAL_GetTick>
 8000e06:	4602      	mov	r2, r0
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	1ad3      	subs	r3, r2, r3
 8000e0c:	2b02      	cmp	r3, #2
 8000e0e:	d918      	bls.n	8000e42 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	689b      	ldr	r3, [r3, #8]
 8000e16:	f003 0301 	and.w	r3, r3, #1
 8000e1a:	2b01      	cmp	r3, #1
 8000e1c:	d011      	beq.n	8000e42 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e22:	f043 0210 	orr.w	r2, r3, #16
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e2e:	f043 0201 	orr.w	r2, r3, #1
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	2200      	movs	r2, #0
 8000e3a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	e007      	b.n	8000e52 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	689b      	ldr	r3, [r3, #8]
 8000e48:	f003 0301 	and.w	r3, r3, #1
 8000e4c:	2b01      	cmp	r3, #1
 8000e4e:	d1d8      	bne.n	8000e02 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8000e50:	2300      	movs	r3, #0
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	3710      	adds	r7, #16
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	20000000 	.word	0x20000000
 8000e60:	431bde83 	.word	0x431bde83

08000e64 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b084      	sub	sp, #16
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	689b      	ldr	r3, [r3, #8]
 8000e76:	f003 0301 	and.w	r3, r3, #1
 8000e7a:	2b01      	cmp	r3, #1
 8000e7c:	d12e      	bne.n	8000edc <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	689a      	ldr	r2, [r3, #8]
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	f022 0201 	bic.w	r2, r2, #1
 8000e8c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000e8e:	f7ff fca1 	bl	80007d4 <HAL_GetTick>
 8000e92:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000e94:	e01b      	b.n	8000ece <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000e96:	f7ff fc9d 	bl	80007d4 <HAL_GetTick>
 8000e9a:	4602      	mov	r2, r0
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	1ad3      	subs	r3, r2, r3
 8000ea0:	2b02      	cmp	r3, #2
 8000ea2:	d914      	bls.n	8000ece <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	689b      	ldr	r3, [r3, #8]
 8000eaa:	f003 0301 	and.w	r3, r3, #1
 8000eae:	2b01      	cmp	r3, #1
 8000eb0:	d10d      	bne.n	8000ece <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000eb6:	f043 0210 	orr.w	r2, r3, #16
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ec2:	f043 0201 	orr.w	r2, r3, #1
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	e007      	b.n	8000ede <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	689b      	ldr	r3, [r3, #8]
 8000ed4:	f003 0301 	and.w	r3, r3, #1
 8000ed8:	2b01      	cmp	r3, #1
 8000eda:	d0dc      	beq.n	8000e96 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000edc:	2300      	movs	r3, #0
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	3710      	adds	r7, #16
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}

08000ee6 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8000ee6:	b580      	push	{r7, lr}
 8000ee8:	b084      	sub	sp, #16
 8000eea:	af00      	add	r7, sp, #0
 8000eec:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ef2:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ef8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d127      	bne.n	8000f50 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f04:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	689b      	ldr	r3, [r3, #8]
 8000f12:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000f16:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000f1a:	d115      	bne.n	8000f48 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d111      	bne.n	8000f48 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f28:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d105      	bne.n	8000f48 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f40:	f043 0201 	orr.w	r2, r3, #1
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8000f48:	68f8      	ldr	r0, [r7, #12]
 8000f4a:	f7ff f8ff 	bl	800014c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8000f4e:	e004      	b.n	8000f5a <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	6a1b      	ldr	r3, [r3, #32]
 8000f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f56:	6878      	ldr	r0, [r7, #4]
 8000f58:	4798      	blx	r3
}
 8000f5a:	bf00      	nop
 8000f5c:	3710      	adds	r7, #16
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}

08000f62 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8000f62:	b580      	push	{r7, lr}
 8000f64:	b084      	sub	sp, #16
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f6e:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8000f70:	68f8      	ldr	r0, [r7, #12]
 8000f72:	f7ff fe13 	bl	8000b9c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8000f76:	bf00      	nop
 8000f78:	3710      	adds	r7, #16
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}

08000f7e <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8000f7e:	b580      	push	{r7, lr}
 8000f80:	b084      	sub	sp, #16
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f8a:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f90:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f9c:	f043 0204 	orr.w	r2, r3, #4
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8000fa4:	68f8      	ldr	r0, [r7, #12]
 8000fa6:	f7ff fe02 	bl	8000bae <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8000faa:	bf00      	nop
 8000fac:	3710      	adds	r7, #16
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
	...

08000fb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b085      	sub	sp, #20
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	f003 0307 	and.w	r3, r3, #7
 8000fc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fc4:	4b0c      	ldr	r3, [pc, #48]	; (8000ff8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fc6:	68db      	ldr	r3, [r3, #12]
 8000fc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fca:	68ba      	ldr	r2, [r7, #8]
 8000fcc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fdc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fe0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fe4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fe6:	4a04      	ldr	r2, [pc, #16]	; (8000ff8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	60d3      	str	r3, [r2, #12]
}
 8000fec:	bf00      	nop
 8000fee:	3714      	adds	r7, #20
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bc80      	pop	{r7}
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	e000ed00 	.word	0xe000ed00

08000ffc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001000:	4b04      	ldr	r3, [pc, #16]	; (8001014 <__NVIC_GetPriorityGrouping+0x18>)
 8001002:	68db      	ldr	r3, [r3, #12]
 8001004:	0a1b      	lsrs	r3, r3, #8
 8001006:	f003 0307 	and.w	r3, r3, #7
}
 800100a:	4618      	mov	r0, r3
 800100c:	46bd      	mov	sp, r7
 800100e:	bc80      	pop	{r7}
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop
 8001014:	e000ed00 	.word	0xe000ed00

08001018 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	4603      	mov	r3, r0
 8001020:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001026:	2b00      	cmp	r3, #0
 8001028:	db0b      	blt.n	8001042 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800102a:	79fb      	ldrb	r3, [r7, #7]
 800102c:	f003 021f 	and.w	r2, r3, #31
 8001030:	4906      	ldr	r1, [pc, #24]	; (800104c <__NVIC_EnableIRQ+0x34>)
 8001032:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001036:	095b      	lsrs	r3, r3, #5
 8001038:	2001      	movs	r0, #1
 800103a:	fa00 f202 	lsl.w	r2, r0, r2
 800103e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001042:	bf00      	nop
 8001044:	370c      	adds	r7, #12
 8001046:	46bd      	mov	sp, r7
 8001048:	bc80      	pop	{r7}
 800104a:	4770      	bx	lr
 800104c:	e000e100 	.word	0xe000e100

08001050 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	4603      	mov	r3, r0
 8001058:	6039      	str	r1, [r7, #0]
 800105a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800105c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001060:	2b00      	cmp	r3, #0
 8001062:	db0a      	blt.n	800107a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	b2da      	uxtb	r2, r3
 8001068:	490c      	ldr	r1, [pc, #48]	; (800109c <__NVIC_SetPriority+0x4c>)
 800106a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800106e:	0112      	lsls	r2, r2, #4
 8001070:	b2d2      	uxtb	r2, r2
 8001072:	440b      	add	r3, r1
 8001074:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001078:	e00a      	b.n	8001090 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	b2da      	uxtb	r2, r3
 800107e:	4908      	ldr	r1, [pc, #32]	; (80010a0 <__NVIC_SetPriority+0x50>)
 8001080:	79fb      	ldrb	r3, [r7, #7]
 8001082:	f003 030f 	and.w	r3, r3, #15
 8001086:	3b04      	subs	r3, #4
 8001088:	0112      	lsls	r2, r2, #4
 800108a:	b2d2      	uxtb	r2, r2
 800108c:	440b      	add	r3, r1
 800108e:	761a      	strb	r2, [r3, #24]
}
 8001090:	bf00      	nop
 8001092:	370c      	adds	r7, #12
 8001094:	46bd      	mov	sp, r7
 8001096:	bc80      	pop	{r7}
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop
 800109c:	e000e100 	.word	0xe000e100
 80010a0:	e000ed00 	.word	0xe000ed00

080010a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b089      	sub	sp, #36	; 0x24
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	60f8      	str	r0, [r7, #12]
 80010ac:	60b9      	str	r1, [r7, #8]
 80010ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	f003 0307 	and.w	r3, r3, #7
 80010b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010b8:	69fb      	ldr	r3, [r7, #28]
 80010ba:	f1c3 0307 	rsb	r3, r3, #7
 80010be:	2b04      	cmp	r3, #4
 80010c0:	bf28      	it	cs
 80010c2:	2304      	movcs	r3, #4
 80010c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	3304      	adds	r3, #4
 80010ca:	2b06      	cmp	r3, #6
 80010cc:	d902      	bls.n	80010d4 <NVIC_EncodePriority+0x30>
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	3b03      	subs	r3, #3
 80010d2:	e000      	b.n	80010d6 <NVIC_EncodePriority+0x32>
 80010d4:	2300      	movs	r3, #0
 80010d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010d8:	f04f 32ff 	mov.w	r2, #4294967295
 80010dc:	69bb      	ldr	r3, [r7, #24]
 80010de:	fa02 f303 	lsl.w	r3, r2, r3
 80010e2:	43da      	mvns	r2, r3
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	401a      	ands	r2, r3
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010ec:	f04f 31ff 	mov.w	r1, #4294967295
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	fa01 f303 	lsl.w	r3, r1, r3
 80010f6:	43d9      	mvns	r1, r3
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010fc:	4313      	orrs	r3, r2
         );
}
 80010fe:	4618      	mov	r0, r3
 8001100:	3724      	adds	r7, #36	; 0x24
 8001102:	46bd      	mov	sp, r7
 8001104:	bc80      	pop	{r7}
 8001106:	4770      	bx	lr

08001108 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	3b01      	subs	r3, #1
 8001114:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001118:	d301      	bcc.n	800111e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800111a:	2301      	movs	r3, #1
 800111c:	e00f      	b.n	800113e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800111e:	4a0a      	ldr	r2, [pc, #40]	; (8001148 <SysTick_Config+0x40>)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	3b01      	subs	r3, #1
 8001124:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001126:	210f      	movs	r1, #15
 8001128:	f04f 30ff 	mov.w	r0, #4294967295
 800112c:	f7ff ff90 	bl	8001050 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001130:	4b05      	ldr	r3, [pc, #20]	; (8001148 <SysTick_Config+0x40>)
 8001132:	2200      	movs	r2, #0
 8001134:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001136:	4b04      	ldr	r3, [pc, #16]	; (8001148 <SysTick_Config+0x40>)
 8001138:	2207      	movs	r2, #7
 800113a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800113c:	2300      	movs	r3, #0
}
 800113e:	4618      	mov	r0, r3
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	e000e010 	.word	0xe000e010

0800114c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001154:	6878      	ldr	r0, [r7, #4]
 8001156:	f7ff ff2d 	bl	8000fb4 <__NVIC_SetPriorityGrouping>
}
 800115a:	bf00      	nop
 800115c:	3708      	adds	r7, #8
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}

08001162 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001162:	b580      	push	{r7, lr}
 8001164:	b086      	sub	sp, #24
 8001166:	af00      	add	r7, sp, #0
 8001168:	4603      	mov	r3, r0
 800116a:	60b9      	str	r1, [r7, #8]
 800116c:	607a      	str	r2, [r7, #4]
 800116e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001170:	2300      	movs	r3, #0
 8001172:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001174:	f7ff ff42 	bl	8000ffc <__NVIC_GetPriorityGrouping>
 8001178:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800117a:	687a      	ldr	r2, [r7, #4]
 800117c:	68b9      	ldr	r1, [r7, #8]
 800117e:	6978      	ldr	r0, [r7, #20]
 8001180:	f7ff ff90 	bl	80010a4 <NVIC_EncodePriority>
 8001184:	4602      	mov	r2, r0
 8001186:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800118a:	4611      	mov	r1, r2
 800118c:	4618      	mov	r0, r3
 800118e:	f7ff ff5f 	bl	8001050 <__NVIC_SetPriority>
}
 8001192:	bf00      	nop
 8001194:	3718      	adds	r7, #24
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}

0800119a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800119a:	b580      	push	{r7, lr}
 800119c:	b082      	sub	sp, #8
 800119e:	af00      	add	r7, sp, #0
 80011a0:	4603      	mov	r3, r0
 80011a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a8:	4618      	mov	r0, r3
 80011aa:	f7ff ff35 	bl	8001018 <__NVIC_EnableIRQ>
}
 80011ae:	bf00      	nop
 80011b0:	3708      	adds	r7, #8
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}

080011b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011b6:	b580      	push	{r7, lr}
 80011b8:	b082      	sub	sp, #8
 80011ba:	af00      	add	r7, sp, #0
 80011bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011be:	6878      	ldr	r0, [r7, #4]
 80011c0:	f7ff ffa2 	bl	8001108 <SysTick_Config>
 80011c4:	4603      	mov	r3, r0
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	3708      	adds	r7, #8
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
	...

080011d0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b085      	sub	sp, #20
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80011d8:	2300      	movs	r3, #0
 80011da:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d101      	bne.n	80011e6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80011e2:	2301      	movs	r3, #1
 80011e4:	e043      	b.n	800126e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	461a      	mov	r2, r3
 80011ec:	4b22      	ldr	r3, [pc, #136]	; (8001278 <HAL_DMA_Init+0xa8>)
 80011ee:	4413      	add	r3, r2
 80011f0:	4a22      	ldr	r2, [pc, #136]	; (800127c <HAL_DMA_Init+0xac>)
 80011f2:	fba2 2303 	umull	r2, r3, r2, r3
 80011f6:	091b      	lsrs	r3, r3, #4
 80011f8:	009a      	lsls	r2, r3, #2
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	4a1f      	ldr	r2, [pc, #124]	; (8001280 <HAL_DMA_Init+0xb0>)
 8001202:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2202      	movs	r2, #2
 8001208:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800121a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800121e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001228:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	68db      	ldr	r3, [r3, #12]
 800122e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001234:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	695b      	ldr	r3, [r3, #20]
 800123a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001240:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	69db      	ldr	r3, [r3, #28]
 8001246:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001248:	68fa      	ldr	r2, [r7, #12]
 800124a:	4313      	orrs	r3, r2
 800124c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	68fa      	ldr	r2, [r7, #12]
 8001254:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2200      	movs	r2, #0
 800125a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2201      	movs	r2, #1
 8001260:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2200      	movs	r2, #0
 8001268:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800126c:	2300      	movs	r3, #0
}
 800126e:	4618      	mov	r0, r3
 8001270:	3714      	adds	r7, #20
 8001272:	46bd      	mov	sp, r7
 8001274:	bc80      	pop	{r7}
 8001276:	4770      	bx	lr
 8001278:	bffdfff8 	.word	0xbffdfff8
 800127c:	cccccccd 	.word	0xcccccccd
 8001280:	40020000 	.word	0x40020000

08001284 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b086      	sub	sp, #24
 8001288:	af00      	add	r7, sp, #0
 800128a:	60f8      	str	r0, [r7, #12]
 800128c:	60b9      	str	r1, [r7, #8]
 800128e:	607a      	str	r2, [r7, #4]
 8001290:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001292:	2300      	movs	r3, #0
 8001294:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	f893 3020 	ldrb.w	r3, [r3, #32]
 800129c:	2b01      	cmp	r3, #1
 800129e:	d101      	bne.n	80012a4 <HAL_DMA_Start_IT+0x20>
 80012a0:	2302      	movs	r3, #2
 80012a2:	e04a      	b.n	800133a <HAL_DMA_Start_IT+0xb6>
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	2201      	movs	r2, #1
 80012a8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80012b2:	2b01      	cmp	r3, #1
 80012b4:	d13a      	bne.n	800132c <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	2202      	movs	r2, #2
 80012ba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	2200      	movs	r2, #0
 80012c2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	681a      	ldr	r2, [r3, #0]
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f022 0201 	bic.w	r2, r2, #1
 80012d2:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	687a      	ldr	r2, [r7, #4]
 80012d8:	68b9      	ldr	r1, [r7, #8]
 80012da:	68f8      	ldr	r0, [r7, #12]
 80012dc:	f000 f938 	bl	8001550 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d008      	beq.n	80012fa <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	681a      	ldr	r2, [r3, #0]
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f042 020e 	orr.w	r2, r2, #14
 80012f6:	601a      	str	r2, [r3, #0]
 80012f8:	e00f      	b.n	800131a <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	681a      	ldr	r2, [r3, #0]
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f022 0204 	bic.w	r2, r2, #4
 8001308:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	681a      	ldr	r2, [r3, #0]
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f042 020a 	orr.w	r2, r2, #10
 8001318:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	681a      	ldr	r2, [r3, #0]
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f042 0201 	orr.w	r2, r2, #1
 8001328:	601a      	str	r2, [r3, #0]
 800132a:	e005      	b.n	8001338 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	2200      	movs	r2, #0
 8001330:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001334:	2302      	movs	r3, #2
 8001336:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001338:	7dfb      	ldrb	r3, [r7, #23]
}
 800133a:	4618      	mov	r0, r3
 800133c:	3718      	adds	r7, #24
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
	...

08001344 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b084      	sub	sp, #16
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001360:	2204      	movs	r2, #4
 8001362:	409a      	lsls	r2, r3
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	4013      	ands	r3, r2
 8001368:	2b00      	cmp	r3, #0
 800136a:	d04f      	beq.n	800140c <HAL_DMA_IRQHandler+0xc8>
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	f003 0304 	and.w	r3, r3, #4
 8001372:	2b00      	cmp	r3, #0
 8001374:	d04a      	beq.n	800140c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f003 0320 	and.w	r3, r3, #32
 8001380:	2b00      	cmp	r3, #0
 8001382:	d107      	bne.n	8001394 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	681a      	ldr	r2, [r3, #0]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f022 0204 	bic.w	r2, r2, #4
 8001392:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a66      	ldr	r2, [pc, #408]	; (8001534 <HAL_DMA_IRQHandler+0x1f0>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d029      	beq.n	80013f2 <HAL_DMA_IRQHandler+0xae>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4a65      	ldr	r2, [pc, #404]	; (8001538 <HAL_DMA_IRQHandler+0x1f4>)
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d022      	beq.n	80013ee <HAL_DMA_IRQHandler+0xaa>
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a63      	ldr	r2, [pc, #396]	; (800153c <HAL_DMA_IRQHandler+0x1f8>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d01a      	beq.n	80013e8 <HAL_DMA_IRQHandler+0xa4>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4a62      	ldr	r2, [pc, #392]	; (8001540 <HAL_DMA_IRQHandler+0x1fc>)
 80013b8:	4293      	cmp	r3, r2
 80013ba:	d012      	beq.n	80013e2 <HAL_DMA_IRQHandler+0x9e>
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a60      	ldr	r2, [pc, #384]	; (8001544 <HAL_DMA_IRQHandler+0x200>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d00a      	beq.n	80013dc <HAL_DMA_IRQHandler+0x98>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4a5f      	ldr	r2, [pc, #380]	; (8001548 <HAL_DMA_IRQHandler+0x204>)
 80013cc:	4293      	cmp	r3, r2
 80013ce:	d102      	bne.n	80013d6 <HAL_DMA_IRQHandler+0x92>
 80013d0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80013d4:	e00e      	b.n	80013f4 <HAL_DMA_IRQHandler+0xb0>
 80013d6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80013da:	e00b      	b.n	80013f4 <HAL_DMA_IRQHandler+0xb0>
 80013dc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80013e0:	e008      	b.n	80013f4 <HAL_DMA_IRQHandler+0xb0>
 80013e2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80013e6:	e005      	b.n	80013f4 <HAL_DMA_IRQHandler+0xb0>
 80013e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013ec:	e002      	b.n	80013f4 <HAL_DMA_IRQHandler+0xb0>
 80013ee:	2340      	movs	r3, #64	; 0x40
 80013f0:	e000      	b.n	80013f4 <HAL_DMA_IRQHandler+0xb0>
 80013f2:	2304      	movs	r3, #4
 80013f4:	4a55      	ldr	r2, [pc, #340]	; (800154c <HAL_DMA_IRQHandler+0x208>)
 80013f6:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	f000 8094 	beq.w	800152a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001406:	6878      	ldr	r0, [r7, #4]
 8001408:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800140a:	e08e      	b.n	800152a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001410:	2202      	movs	r2, #2
 8001412:	409a      	lsls	r2, r3
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	4013      	ands	r3, r2
 8001418:	2b00      	cmp	r3, #0
 800141a:	d056      	beq.n	80014ca <HAL_DMA_IRQHandler+0x186>
 800141c:	68bb      	ldr	r3, [r7, #8]
 800141e:	f003 0302 	and.w	r3, r3, #2
 8001422:	2b00      	cmp	r3, #0
 8001424:	d051      	beq.n	80014ca <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f003 0320 	and.w	r3, r3, #32
 8001430:	2b00      	cmp	r3, #0
 8001432:	d10b      	bne.n	800144c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f022 020a 	bic.w	r2, r2, #10
 8001442:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2201      	movs	r2, #1
 8001448:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a38      	ldr	r2, [pc, #224]	; (8001534 <HAL_DMA_IRQHandler+0x1f0>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d029      	beq.n	80014aa <HAL_DMA_IRQHandler+0x166>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4a37      	ldr	r2, [pc, #220]	; (8001538 <HAL_DMA_IRQHandler+0x1f4>)
 800145c:	4293      	cmp	r3, r2
 800145e:	d022      	beq.n	80014a6 <HAL_DMA_IRQHandler+0x162>
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a35      	ldr	r2, [pc, #212]	; (800153c <HAL_DMA_IRQHandler+0x1f8>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d01a      	beq.n	80014a0 <HAL_DMA_IRQHandler+0x15c>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4a34      	ldr	r2, [pc, #208]	; (8001540 <HAL_DMA_IRQHandler+0x1fc>)
 8001470:	4293      	cmp	r3, r2
 8001472:	d012      	beq.n	800149a <HAL_DMA_IRQHandler+0x156>
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a32      	ldr	r2, [pc, #200]	; (8001544 <HAL_DMA_IRQHandler+0x200>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d00a      	beq.n	8001494 <HAL_DMA_IRQHandler+0x150>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4a31      	ldr	r2, [pc, #196]	; (8001548 <HAL_DMA_IRQHandler+0x204>)
 8001484:	4293      	cmp	r3, r2
 8001486:	d102      	bne.n	800148e <HAL_DMA_IRQHandler+0x14a>
 8001488:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800148c:	e00e      	b.n	80014ac <HAL_DMA_IRQHandler+0x168>
 800148e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001492:	e00b      	b.n	80014ac <HAL_DMA_IRQHandler+0x168>
 8001494:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001498:	e008      	b.n	80014ac <HAL_DMA_IRQHandler+0x168>
 800149a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800149e:	e005      	b.n	80014ac <HAL_DMA_IRQHandler+0x168>
 80014a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014a4:	e002      	b.n	80014ac <HAL_DMA_IRQHandler+0x168>
 80014a6:	2320      	movs	r3, #32
 80014a8:	e000      	b.n	80014ac <HAL_DMA_IRQHandler+0x168>
 80014aa:	2302      	movs	r3, #2
 80014ac:	4a27      	ldr	r2, [pc, #156]	; (800154c <HAL_DMA_IRQHandler+0x208>)
 80014ae:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2200      	movs	r2, #0
 80014b4:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d034      	beq.n	800152a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014c4:	6878      	ldr	r0, [r7, #4]
 80014c6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80014c8:	e02f      	b.n	800152a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ce:	2208      	movs	r2, #8
 80014d0:	409a      	lsls	r2, r3
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	4013      	ands	r3, r2
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d028      	beq.n	800152c <HAL_DMA_IRQHandler+0x1e8>
 80014da:	68bb      	ldr	r3, [r7, #8]
 80014dc:	f003 0308 	and.w	r3, r3, #8
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d023      	beq.n	800152c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f022 020e 	bic.w	r2, r2, #14
 80014f2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014fc:	2101      	movs	r1, #1
 80014fe:	fa01 f202 	lsl.w	r2, r1, r2
 8001502:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2201      	movs	r2, #1
 8001508:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2201      	movs	r2, #1
 800150e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2200      	movs	r2, #0
 8001516:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151e:	2b00      	cmp	r3, #0
 8001520:	d004      	beq.n	800152c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001526:	6878      	ldr	r0, [r7, #4]
 8001528:	4798      	blx	r3
    }
  }
  return;
 800152a:	bf00      	nop
 800152c:	bf00      	nop
}
 800152e:	3710      	adds	r7, #16
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	40020008 	.word	0x40020008
 8001538:	4002001c 	.word	0x4002001c
 800153c:	40020030 	.word	0x40020030
 8001540:	40020044 	.word	0x40020044
 8001544:	40020058 	.word	0x40020058
 8001548:	4002006c 	.word	0x4002006c
 800154c:	40020000 	.word	0x40020000

08001550 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001550:	b480      	push	{r7}
 8001552:	b085      	sub	sp, #20
 8001554:	af00      	add	r7, sp, #0
 8001556:	60f8      	str	r0, [r7, #12]
 8001558:	60b9      	str	r1, [r7, #8]
 800155a:	607a      	str	r2, [r7, #4]
 800155c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001566:	2101      	movs	r1, #1
 8001568:	fa01 f202 	lsl.w	r2, r1, r2
 800156c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	683a      	ldr	r2, [r7, #0]
 8001574:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	2b10      	cmp	r3, #16
 800157c:	d108      	bne.n	8001590 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	687a      	ldr	r2, [r7, #4]
 8001584:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	68ba      	ldr	r2, [r7, #8]
 800158c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800158e:	e007      	b.n	80015a0 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	68ba      	ldr	r2, [r7, #8]
 8001596:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	687a      	ldr	r2, [r7, #4]
 800159e:	60da      	str	r2, [r3, #12]
}
 80015a0:	bf00      	nop
 80015a2:	3714      	adds	r7, #20
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bc80      	pop	{r7}
 80015a8:	4770      	bx	lr
	...

080015ac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b08b      	sub	sp, #44	; 0x2c
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
 80015b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015b6:	2300      	movs	r3, #0
 80015b8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80015ba:	2300      	movs	r3, #0
 80015bc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015be:	e169      	b.n	8001894 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80015c0:	2201      	movs	r2, #1
 80015c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c4:	fa02 f303 	lsl.w	r3, r2, r3
 80015c8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	69fa      	ldr	r2, [r7, #28]
 80015d0:	4013      	ands	r3, r2
 80015d2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80015d4:	69ba      	ldr	r2, [r7, #24]
 80015d6:	69fb      	ldr	r3, [r7, #28]
 80015d8:	429a      	cmp	r2, r3
 80015da:	f040 8158 	bne.w	800188e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	4a9a      	ldr	r2, [pc, #616]	; (800184c <HAL_GPIO_Init+0x2a0>)
 80015e4:	4293      	cmp	r3, r2
 80015e6:	d05e      	beq.n	80016a6 <HAL_GPIO_Init+0xfa>
 80015e8:	4a98      	ldr	r2, [pc, #608]	; (800184c <HAL_GPIO_Init+0x2a0>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d875      	bhi.n	80016da <HAL_GPIO_Init+0x12e>
 80015ee:	4a98      	ldr	r2, [pc, #608]	; (8001850 <HAL_GPIO_Init+0x2a4>)
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d058      	beq.n	80016a6 <HAL_GPIO_Init+0xfa>
 80015f4:	4a96      	ldr	r2, [pc, #600]	; (8001850 <HAL_GPIO_Init+0x2a4>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d86f      	bhi.n	80016da <HAL_GPIO_Init+0x12e>
 80015fa:	4a96      	ldr	r2, [pc, #600]	; (8001854 <HAL_GPIO_Init+0x2a8>)
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d052      	beq.n	80016a6 <HAL_GPIO_Init+0xfa>
 8001600:	4a94      	ldr	r2, [pc, #592]	; (8001854 <HAL_GPIO_Init+0x2a8>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d869      	bhi.n	80016da <HAL_GPIO_Init+0x12e>
 8001606:	4a94      	ldr	r2, [pc, #592]	; (8001858 <HAL_GPIO_Init+0x2ac>)
 8001608:	4293      	cmp	r3, r2
 800160a:	d04c      	beq.n	80016a6 <HAL_GPIO_Init+0xfa>
 800160c:	4a92      	ldr	r2, [pc, #584]	; (8001858 <HAL_GPIO_Init+0x2ac>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d863      	bhi.n	80016da <HAL_GPIO_Init+0x12e>
 8001612:	4a92      	ldr	r2, [pc, #584]	; (800185c <HAL_GPIO_Init+0x2b0>)
 8001614:	4293      	cmp	r3, r2
 8001616:	d046      	beq.n	80016a6 <HAL_GPIO_Init+0xfa>
 8001618:	4a90      	ldr	r2, [pc, #576]	; (800185c <HAL_GPIO_Init+0x2b0>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d85d      	bhi.n	80016da <HAL_GPIO_Init+0x12e>
 800161e:	2b12      	cmp	r3, #18
 8001620:	d82a      	bhi.n	8001678 <HAL_GPIO_Init+0xcc>
 8001622:	2b12      	cmp	r3, #18
 8001624:	d859      	bhi.n	80016da <HAL_GPIO_Init+0x12e>
 8001626:	a201      	add	r2, pc, #4	; (adr r2, 800162c <HAL_GPIO_Init+0x80>)
 8001628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800162c:	080016a7 	.word	0x080016a7
 8001630:	08001681 	.word	0x08001681
 8001634:	08001693 	.word	0x08001693
 8001638:	080016d5 	.word	0x080016d5
 800163c:	080016db 	.word	0x080016db
 8001640:	080016db 	.word	0x080016db
 8001644:	080016db 	.word	0x080016db
 8001648:	080016db 	.word	0x080016db
 800164c:	080016db 	.word	0x080016db
 8001650:	080016db 	.word	0x080016db
 8001654:	080016db 	.word	0x080016db
 8001658:	080016db 	.word	0x080016db
 800165c:	080016db 	.word	0x080016db
 8001660:	080016db 	.word	0x080016db
 8001664:	080016db 	.word	0x080016db
 8001668:	080016db 	.word	0x080016db
 800166c:	080016db 	.word	0x080016db
 8001670:	08001689 	.word	0x08001689
 8001674:	0800169d 	.word	0x0800169d
 8001678:	4a79      	ldr	r2, [pc, #484]	; (8001860 <HAL_GPIO_Init+0x2b4>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d013      	beq.n	80016a6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800167e:	e02c      	b.n	80016da <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	68db      	ldr	r3, [r3, #12]
 8001684:	623b      	str	r3, [r7, #32]
          break;
 8001686:	e029      	b.n	80016dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	3304      	adds	r3, #4
 800168e:	623b      	str	r3, [r7, #32]
          break;
 8001690:	e024      	b.n	80016dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	68db      	ldr	r3, [r3, #12]
 8001696:	3308      	adds	r3, #8
 8001698:	623b      	str	r3, [r7, #32]
          break;
 800169a:	e01f      	b.n	80016dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	68db      	ldr	r3, [r3, #12]
 80016a0:	330c      	adds	r3, #12
 80016a2:	623b      	str	r3, [r7, #32]
          break;
 80016a4:	e01a      	b.n	80016dc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d102      	bne.n	80016b4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80016ae:	2304      	movs	r3, #4
 80016b0:	623b      	str	r3, [r7, #32]
          break;
 80016b2:	e013      	b.n	80016dc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	2b01      	cmp	r3, #1
 80016ba:	d105      	bne.n	80016c8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016bc:	2308      	movs	r3, #8
 80016be:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	69fa      	ldr	r2, [r7, #28]
 80016c4:	611a      	str	r2, [r3, #16]
          break;
 80016c6:	e009      	b.n	80016dc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016c8:	2308      	movs	r3, #8
 80016ca:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	69fa      	ldr	r2, [r7, #28]
 80016d0:	615a      	str	r2, [r3, #20]
          break;
 80016d2:	e003      	b.n	80016dc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80016d4:	2300      	movs	r3, #0
 80016d6:	623b      	str	r3, [r7, #32]
          break;
 80016d8:	e000      	b.n	80016dc <HAL_GPIO_Init+0x130>
          break;
 80016da:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80016dc:	69bb      	ldr	r3, [r7, #24]
 80016de:	2bff      	cmp	r3, #255	; 0xff
 80016e0:	d801      	bhi.n	80016e6 <HAL_GPIO_Init+0x13a>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	e001      	b.n	80016ea <HAL_GPIO_Init+0x13e>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	3304      	adds	r3, #4
 80016ea:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80016ec:	69bb      	ldr	r3, [r7, #24]
 80016ee:	2bff      	cmp	r3, #255	; 0xff
 80016f0:	d802      	bhi.n	80016f8 <HAL_GPIO_Init+0x14c>
 80016f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f4:	009b      	lsls	r3, r3, #2
 80016f6:	e002      	b.n	80016fe <HAL_GPIO_Init+0x152>
 80016f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016fa:	3b08      	subs	r3, #8
 80016fc:	009b      	lsls	r3, r3, #2
 80016fe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	210f      	movs	r1, #15
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	fa01 f303 	lsl.w	r3, r1, r3
 800170c:	43db      	mvns	r3, r3
 800170e:	401a      	ands	r2, r3
 8001710:	6a39      	ldr	r1, [r7, #32]
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	fa01 f303 	lsl.w	r3, r1, r3
 8001718:	431a      	orrs	r2, r3
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001726:	2b00      	cmp	r3, #0
 8001728:	f000 80b1 	beq.w	800188e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800172c:	4b4d      	ldr	r3, [pc, #308]	; (8001864 <HAL_GPIO_Init+0x2b8>)
 800172e:	699b      	ldr	r3, [r3, #24]
 8001730:	4a4c      	ldr	r2, [pc, #304]	; (8001864 <HAL_GPIO_Init+0x2b8>)
 8001732:	f043 0301 	orr.w	r3, r3, #1
 8001736:	6193      	str	r3, [r2, #24]
 8001738:	4b4a      	ldr	r3, [pc, #296]	; (8001864 <HAL_GPIO_Init+0x2b8>)
 800173a:	699b      	ldr	r3, [r3, #24]
 800173c:	f003 0301 	and.w	r3, r3, #1
 8001740:	60bb      	str	r3, [r7, #8]
 8001742:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001744:	4a48      	ldr	r2, [pc, #288]	; (8001868 <HAL_GPIO_Init+0x2bc>)
 8001746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001748:	089b      	lsrs	r3, r3, #2
 800174a:	3302      	adds	r3, #2
 800174c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001750:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001754:	f003 0303 	and.w	r3, r3, #3
 8001758:	009b      	lsls	r3, r3, #2
 800175a:	220f      	movs	r2, #15
 800175c:	fa02 f303 	lsl.w	r3, r2, r3
 8001760:	43db      	mvns	r3, r3
 8001762:	68fa      	ldr	r2, [r7, #12]
 8001764:	4013      	ands	r3, r2
 8001766:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	4a40      	ldr	r2, [pc, #256]	; (800186c <HAL_GPIO_Init+0x2c0>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d013      	beq.n	8001798 <HAL_GPIO_Init+0x1ec>
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	4a3f      	ldr	r2, [pc, #252]	; (8001870 <HAL_GPIO_Init+0x2c4>)
 8001774:	4293      	cmp	r3, r2
 8001776:	d00d      	beq.n	8001794 <HAL_GPIO_Init+0x1e8>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	4a3e      	ldr	r2, [pc, #248]	; (8001874 <HAL_GPIO_Init+0x2c8>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d007      	beq.n	8001790 <HAL_GPIO_Init+0x1e4>
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	4a3d      	ldr	r2, [pc, #244]	; (8001878 <HAL_GPIO_Init+0x2cc>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d101      	bne.n	800178c <HAL_GPIO_Init+0x1e0>
 8001788:	2303      	movs	r3, #3
 800178a:	e006      	b.n	800179a <HAL_GPIO_Init+0x1ee>
 800178c:	2304      	movs	r3, #4
 800178e:	e004      	b.n	800179a <HAL_GPIO_Init+0x1ee>
 8001790:	2302      	movs	r3, #2
 8001792:	e002      	b.n	800179a <HAL_GPIO_Init+0x1ee>
 8001794:	2301      	movs	r3, #1
 8001796:	e000      	b.n	800179a <HAL_GPIO_Init+0x1ee>
 8001798:	2300      	movs	r3, #0
 800179a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800179c:	f002 0203 	and.w	r2, r2, #3
 80017a0:	0092      	lsls	r2, r2, #2
 80017a2:	4093      	lsls	r3, r2
 80017a4:	68fa      	ldr	r2, [r7, #12]
 80017a6:	4313      	orrs	r3, r2
 80017a8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80017aa:	492f      	ldr	r1, [pc, #188]	; (8001868 <HAL_GPIO_Init+0x2bc>)
 80017ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ae:	089b      	lsrs	r3, r3, #2
 80017b0:	3302      	adds	r3, #2
 80017b2:	68fa      	ldr	r2, [r7, #12]
 80017b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d006      	beq.n	80017d2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80017c4:	4b2d      	ldr	r3, [pc, #180]	; (800187c <HAL_GPIO_Init+0x2d0>)
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	492c      	ldr	r1, [pc, #176]	; (800187c <HAL_GPIO_Init+0x2d0>)
 80017ca:	69bb      	ldr	r3, [r7, #24]
 80017cc:	4313      	orrs	r3, r2
 80017ce:	600b      	str	r3, [r1, #0]
 80017d0:	e006      	b.n	80017e0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80017d2:	4b2a      	ldr	r3, [pc, #168]	; (800187c <HAL_GPIO_Init+0x2d0>)
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	69bb      	ldr	r3, [r7, #24]
 80017d8:	43db      	mvns	r3, r3
 80017da:	4928      	ldr	r1, [pc, #160]	; (800187c <HAL_GPIO_Init+0x2d0>)
 80017dc:	4013      	ands	r3, r2
 80017de:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d006      	beq.n	80017fa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80017ec:	4b23      	ldr	r3, [pc, #140]	; (800187c <HAL_GPIO_Init+0x2d0>)
 80017ee:	685a      	ldr	r2, [r3, #4]
 80017f0:	4922      	ldr	r1, [pc, #136]	; (800187c <HAL_GPIO_Init+0x2d0>)
 80017f2:	69bb      	ldr	r3, [r7, #24]
 80017f4:	4313      	orrs	r3, r2
 80017f6:	604b      	str	r3, [r1, #4]
 80017f8:	e006      	b.n	8001808 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80017fa:	4b20      	ldr	r3, [pc, #128]	; (800187c <HAL_GPIO_Init+0x2d0>)
 80017fc:	685a      	ldr	r2, [r3, #4]
 80017fe:	69bb      	ldr	r3, [r7, #24]
 8001800:	43db      	mvns	r3, r3
 8001802:	491e      	ldr	r1, [pc, #120]	; (800187c <HAL_GPIO_Init+0x2d0>)
 8001804:	4013      	ands	r3, r2
 8001806:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001810:	2b00      	cmp	r3, #0
 8001812:	d006      	beq.n	8001822 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001814:	4b19      	ldr	r3, [pc, #100]	; (800187c <HAL_GPIO_Init+0x2d0>)
 8001816:	689a      	ldr	r2, [r3, #8]
 8001818:	4918      	ldr	r1, [pc, #96]	; (800187c <HAL_GPIO_Init+0x2d0>)
 800181a:	69bb      	ldr	r3, [r7, #24]
 800181c:	4313      	orrs	r3, r2
 800181e:	608b      	str	r3, [r1, #8]
 8001820:	e006      	b.n	8001830 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001822:	4b16      	ldr	r3, [pc, #88]	; (800187c <HAL_GPIO_Init+0x2d0>)
 8001824:	689a      	ldr	r2, [r3, #8]
 8001826:	69bb      	ldr	r3, [r7, #24]
 8001828:	43db      	mvns	r3, r3
 800182a:	4914      	ldr	r1, [pc, #80]	; (800187c <HAL_GPIO_Init+0x2d0>)
 800182c:	4013      	ands	r3, r2
 800182e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001838:	2b00      	cmp	r3, #0
 800183a:	d021      	beq.n	8001880 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800183c:	4b0f      	ldr	r3, [pc, #60]	; (800187c <HAL_GPIO_Init+0x2d0>)
 800183e:	68da      	ldr	r2, [r3, #12]
 8001840:	490e      	ldr	r1, [pc, #56]	; (800187c <HAL_GPIO_Init+0x2d0>)
 8001842:	69bb      	ldr	r3, [r7, #24]
 8001844:	4313      	orrs	r3, r2
 8001846:	60cb      	str	r3, [r1, #12]
 8001848:	e021      	b.n	800188e <HAL_GPIO_Init+0x2e2>
 800184a:	bf00      	nop
 800184c:	10320000 	.word	0x10320000
 8001850:	10310000 	.word	0x10310000
 8001854:	10220000 	.word	0x10220000
 8001858:	10210000 	.word	0x10210000
 800185c:	10120000 	.word	0x10120000
 8001860:	10110000 	.word	0x10110000
 8001864:	40021000 	.word	0x40021000
 8001868:	40010000 	.word	0x40010000
 800186c:	40010800 	.word	0x40010800
 8001870:	40010c00 	.word	0x40010c00
 8001874:	40011000 	.word	0x40011000
 8001878:	40011400 	.word	0x40011400
 800187c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001880:	4b0b      	ldr	r3, [pc, #44]	; (80018b0 <HAL_GPIO_Init+0x304>)
 8001882:	68da      	ldr	r2, [r3, #12]
 8001884:	69bb      	ldr	r3, [r7, #24]
 8001886:	43db      	mvns	r3, r3
 8001888:	4909      	ldr	r1, [pc, #36]	; (80018b0 <HAL_GPIO_Init+0x304>)
 800188a:	4013      	ands	r3, r2
 800188c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800188e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001890:	3301      	adds	r3, #1
 8001892:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	681a      	ldr	r2, [r3, #0]
 8001898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800189a:	fa22 f303 	lsr.w	r3, r2, r3
 800189e:	2b00      	cmp	r3, #0
 80018a0:	f47f ae8e 	bne.w	80015c0 <HAL_GPIO_Init+0x14>
  }
}
 80018a4:	bf00      	nop
 80018a6:	bf00      	nop
 80018a8:	372c      	adds	r7, #44	; 0x2c
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bc80      	pop	{r7}
 80018ae:	4770      	bx	lr
 80018b0:	40010400 	.word	0x40010400

080018b4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80018b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018b6:	b08b      	sub	sp, #44	; 0x2c
 80018b8:	af06      	add	r7, sp, #24
 80018ba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d101      	bne.n	80018c6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	e0fd      	b.n	8001ac2 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d106      	bne.n	80018e0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2200      	movs	r2, #0
 80018d6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f005 ff2c 	bl	8007738 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2203      	movs	r2, #3
 80018e4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4618      	mov	r0, r3
 80018ee:	f002 f953 	bl	8003b98 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	603b      	str	r3, [r7, #0]
 80018f8:	687e      	ldr	r6, [r7, #4]
 80018fa:	466d      	mov	r5, sp
 80018fc:	f106 0410 	add.w	r4, r6, #16
 8001900:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001902:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001904:	6823      	ldr	r3, [r4, #0]
 8001906:	602b      	str	r3, [r5, #0]
 8001908:	1d33      	adds	r3, r6, #4
 800190a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800190c:	6838      	ldr	r0, [r7, #0]
 800190e:	f002 f91d 	bl	8003b4c <USB_CoreInit>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d005      	beq.n	8001924 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2202      	movs	r2, #2
 800191c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001920:	2301      	movs	r3, #1
 8001922:	e0ce      	b.n	8001ac2 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	2100      	movs	r1, #0
 800192a:	4618      	mov	r0, r3
 800192c:	f002 f94e 	bl	8003bcc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001930:	2300      	movs	r3, #0
 8001932:	73fb      	strb	r3, [r7, #15]
 8001934:	e04c      	b.n	80019d0 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001936:	7bfb      	ldrb	r3, [r7, #15]
 8001938:	6879      	ldr	r1, [r7, #4]
 800193a:	1c5a      	adds	r2, r3, #1
 800193c:	4613      	mov	r3, r2
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	4413      	add	r3, r2
 8001942:	00db      	lsls	r3, r3, #3
 8001944:	440b      	add	r3, r1
 8001946:	3301      	adds	r3, #1
 8001948:	2201      	movs	r2, #1
 800194a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800194c:	7bfb      	ldrb	r3, [r7, #15]
 800194e:	6879      	ldr	r1, [r7, #4]
 8001950:	1c5a      	adds	r2, r3, #1
 8001952:	4613      	mov	r3, r2
 8001954:	009b      	lsls	r3, r3, #2
 8001956:	4413      	add	r3, r2
 8001958:	00db      	lsls	r3, r3, #3
 800195a:	440b      	add	r3, r1
 800195c:	7bfa      	ldrb	r2, [r7, #15]
 800195e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001960:	7bfa      	ldrb	r2, [r7, #15]
 8001962:	7bfb      	ldrb	r3, [r7, #15]
 8001964:	b298      	uxth	r0, r3
 8001966:	6879      	ldr	r1, [r7, #4]
 8001968:	4613      	mov	r3, r2
 800196a:	009b      	lsls	r3, r3, #2
 800196c:	4413      	add	r3, r2
 800196e:	00db      	lsls	r3, r3, #3
 8001970:	440b      	add	r3, r1
 8001972:	3336      	adds	r3, #54	; 0x36
 8001974:	4602      	mov	r2, r0
 8001976:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001978:	7bfb      	ldrb	r3, [r7, #15]
 800197a:	6879      	ldr	r1, [r7, #4]
 800197c:	1c5a      	adds	r2, r3, #1
 800197e:	4613      	mov	r3, r2
 8001980:	009b      	lsls	r3, r3, #2
 8001982:	4413      	add	r3, r2
 8001984:	00db      	lsls	r3, r3, #3
 8001986:	440b      	add	r3, r1
 8001988:	3303      	adds	r3, #3
 800198a:	2200      	movs	r2, #0
 800198c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800198e:	7bfa      	ldrb	r2, [r7, #15]
 8001990:	6879      	ldr	r1, [r7, #4]
 8001992:	4613      	mov	r3, r2
 8001994:	009b      	lsls	r3, r3, #2
 8001996:	4413      	add	r3, r2
 8001998:	00db      	lsls	r3, r3, #3
 800199a:	440b      	add	r3, r1
 800199c:	3338      	adds	r3, #56	; 0x38
 800199e:	2200      	movs	r2, #0
 80019a0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80019a2:	7bfa      	ldrb	r2, [r7, #15]
 80019a4:	6879      	ldr	r1, [r7, #4]
 80019a6:	4613      	mov	r3, r2
 80019a8:	009b      	lsls	r3, r3, #2
 80019aa:	4413      	add	r3, r2
 80019ac:	00db      	lsls	r3, r3, #3
 80019ae:	440b      	add	r3, r1
 80019b0:	333c      	adds	r3, #60	; 0x3c
 80019b2:	2200      	movs	r2, #0
 80019b4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80019b6:	7bfa      	ldrb	r2, [r7, #15]
 80019b8:	6879      	ldr	r1, [r7, #4]
 80019ba:	4613      	mov	r3, r2
 80019bc:	009b      	lsls	r3, r3, #2
 80019be:	4413      	add	r3, r2
 80019c0:	00db      	lsls	r3, r3, #3
 80019c2:	440b      	add	r3, r1
 80019c4:	3340      	adds	r3, #64	; 0x40
 80019c6:	2200      	movs	r2, #0
 80019c8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019ca:	7bfb      	ldrb	r3, [r7, #15]
 80019cc:	3301      	adds	r3, #1
 80019ce:	73fb      	strb	r3, [r7, #15]
 80019d0:	7bfa      	ldrb	r2, [r7, #15]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	429a      	cmp	r2, r3
 80019d8:	d3ad      	bcc.n	8001936 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019da:	2300      	movs	r3, #0
 80019dc:	73fb      	strb	r3, [r7, #15]
 80019de:	e044      	b.n	8001a6a <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80019e0:	7bfa      	ldrb	r2, [r7, #15]
 80019e2:	6879      	ldr	r1, [r7, #4]
 80019e4:	4613      	mov	r3, r2
 80019e6:	009b      	lsls	r3, r3, #2
 80019e8:	4413      	add	r3, r2
 80019ea:	00db      	lsls	r3, r3, #3
 80019ec:	440b      	add	r3, r1
 80019ee:	f203 1369 	addw	r3, r3, #361	; 0x169
 80019f2:	2200      	movs	r2, #0
 80019f4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80019f6:	7bfa      	ldrb	r2, [r7, #15]
 80019f8:	6879      	ldr	r1, [r7, #4]
 80019fa:	4613      	mov	r3, r2
 80019fc:	009b      	lsls	r3, r3, #2
 80019fe:	4413      	add	r3, r2
 8001a00:	00db      	lsls	r3, r3, #3
 8001a02:	440b      	add	r3, r1
 8001a04:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001a08:	7bfa      	ldrb	r2, [r7, #15]
 8001a0a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001a0c:	7bfa      	ldrb	r2, [r7, #15]
 8001a0e:	6879      	ldr	r1, [r7, #4]
 8001a10:	4613      	mov	r3, r2
 8001a12:	009b      	lsls	r3, r3, #2
 8001a14:	4413      	add	r3, r2
 8001a16:	00db      	lsls	r3, r3, #3
 8001a18:	440b      	add	r3, r1
 8001a1a:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001a1e:	2200      	movs	r2, #0
 8001a20:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001a22:	7bfa      	ldrb	r2, [r7, #15]
 8001a24:	6879      	ldr	r1, [r7, #4]
 8001a26:	4613      	mov	r3, r2
 8001a28:	009b      	lsls	r3, r3, #2
 8001a2a:	4413      	add	r3, r2
 8001a2c:	00db      	lsls	r3, r3, #3
 8001a2e:	440b      	add	r3, r1
 8001a30:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001a34:	2200      	movs	r2, #0
 8001a36:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001a38:	7bfa      	ldrb	r2, [r7, #15]
 8001a3a:	6879      	ldr	r1, [r7, #4]
 8001a3c:	4613      	mov	r3, r2
 8001a3e:	009b      	lsls	r3, r3, #2
 8001a40:	4413      	add	r3, r2
 8001a42:	00db      	lsls	r3, r3, #3
 8001a44:	440b      	add	r3, r1
 8001a46:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001a4e:	7bfa      	ldrb	r2, [r7, #15]
 8001a50:	6879      	ldr	r1, [r7, #4]
 8001a52:	4613      	mov	r3, r2
 8001a54:	009b      	lsls	r3, r3, #2
 8001a56:	4413      	add	r3, r2
 8001a58:	00db      	lsls	r3, r3, #3
 8001a5a:	440b      	add	r3, r1
 8001a5c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001a60:	2200      	movs	r2, #0
 8001a62:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a64:	7bfb      	ldrb	r3, [r7, #15]
 8001a66:	3301      	adds	r3, #1
 8001a68:	73fb      	strb	r3, [r7, #15]
 8001a6a:	7bfa      	ldrb	r2, [r7, #15]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d3b5      	bcc.n	80019e0 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	603b      	str	r3, [r7, #0]
 8001a7a:	687e      	ldr	r6, [r7, #4]
 8001a7c:	466d      	mov	r5, sp
 8001a7e:	f106 0410 	add.w	r4, r6, #16
 8001a82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a84:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a86:	6823      	ldr	r3, [r4, #0]
 8001a88:	602b      	str	r3, [r5, #0]
 8001a8a:	1d33      	adds	r3, r6, #4
 8001a8c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a8e:	6838      	ldr	r0, [r7, #0]
 8001a90:	f002 f8a8 	bl	8003be4 <USB_DevInit>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d005      	beq.n	8001aa6 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2202      	movs	r2, #2
 8001a9e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e00d      	b.n	8001ac2 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4618      	mov	r0, r3
 8001abc:	f004 fa19 	bl	8005ef2 <USB_DevDisconnect>

  return HAL_OK;
 8001ac0:	2300      	movs	r3, #0
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3714      	adds	r7, #20
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001aca <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001aca:	b580      	push	{r7, lr}
 8001acc:	b082      	sub	sp, #8
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001ad8:	2b01      	cmp	r3, #1
 8001ada:	d101      	bne.n	8001ae0 <HAL_PCD_Start+0x16>
 8001adc:	2302      	movs	r3, #2
 8001ade:	e016      	b.n	8001b0e <HAL_PCD_Start+0x44>
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4618      	mov	r0, r3
 8001aee:	f002 f83d 	bl	8003b6c <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001af2:	2101      	movs	r1, #1
 8001af4:	6878      	ldr	r0, [r7, #4]
 8001af6:	f006 f86e 	bl	8007bd6 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4618      	mov	r0, r3
 8001b00:	f004 f9ed 	bl	8005ede <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2200      	movs	r2, #0
 8001b08:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001b0c:	2300      	movs	r3, #0
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3708      	adds	r7, #8
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}

08001b16 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001b16:	b580      	push	{r7, lr}
 8001b18:	b088      	sub	sp, #32
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4618      	mov	r0, r3
 8001b24:	f004 f9ef 	bl	8005f06 <USB_ReadInterrupts>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b32:	d102      	bne.n	8001b3a <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001b34:	6878      	ldr	r0, [r7, #4]
 8001b36:	f000 fb4a 	bl	80021ce <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f004 f9e1 	bl	8005f06 <USB_ReadInterrupts>
 8001b44:	4603      	mov	r3, r0
 8001b46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b4e:	d112      	bne.n	8001b76 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001b58:	b29a      	uxth	r2, r3
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b62:	b292      	uxth	r2, r2
 8001b64:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001b68:	6878      	ldr	r0, [r7, #4]
 8001b6a:	f005 fe60 	bl	800782e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001b6e:	2100      	movs	r1, #0
 8001b70:	6878      	ldr	r0, [r7, #4]
 8001b72:	f000 f925 	bl	8001dc0 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f004 f9c3 	bl	8005f06 <USB_ReadInterrupts>
 8001b80:	4603      	mov	r3, r0
 8001b82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b86:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001b8a:	d10b      	bne.n	8001ba4 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001b94:	b29a      	uxth	r2, r3
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001b9e:	b292      	uxth	r2, r2
 8001ba0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f004 f9ac 	bl	8005f06 <USB_ReadInterrupts>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001bb4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001bb8:	d10b      	bne.n	8001bd2 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001bc2:	b29a      	uxth	r2, r3
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001bcc:	b292      	uxth	r2, r2
 8001bce:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f004 f995 	bl	8005f06 <USB_ReadInterrupts>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001be2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001be6:	d126      	bne.n	8001c36 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001bf0:	b29a      	uxth	r2, r3
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f022 0204 	bic.w	r2, r2, #4
 8001bfa:	b292      	uxth	r2, r2
 8001bfc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001c08:	b29a      	uxth	r2, r3
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f022 0208 	bic.w	r2, r2, #8
 8001c12:	b292      	uxth	r2, r2
 8001c14:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001c18:	6878      	ldr	r0, [r7, #4]
 8001c1a:	f005 fe41 	bl	80078a0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c26:	b29a      	uxth	r2, r3
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001c30:	b292      	uxth	r2, r2
 8001c32:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f004 f963 	bl	8005f06 <USB_ReadInterrupts>
 8001c40:	4603      	mov	r3, r0
 8001c42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001c4a:	f040 8084 	bne.w	8001d56 <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8001c4e:	2300      	movs	r3, #0
 8001c50:	77fb      	strb	r3, [r7, #31]
 8001c52:	e011      	b.n	8001c78 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	461a      	mov	r2, r3
 8001c5a:	7ffb      	ldrb	r3, [r7, #31]
 8001c5c:	009b      	lsls	r3, r3, #2
 8001c5e:	441a      	add	r2, r3
 8001c60:	7ffb      	ldrb	r3, [r7, #31]
 8001c62:	8812      	ldrh	r2, [r2, #0]
 8001c64:	b292      	uxth	r2, r2
 8001c66:	005b      	lsls	r3, r3, #1
 8001c68:	f107 0120 	add.w	r1, r7, #32
 8001c6c:	440b      	add	r3, r1
 8001c6e:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8001c72:	7ffb      	ldrb	r3, [r7, #31]
 8001c74:	3301      	adds	r3, #1
 8001c76:	77fb      	strb	r3, [r7, #31]
 8001c78:	7ffb      	ldrb	r3, [r7, #31]
 8001c7a:	2b07      	cmp	r3, #7
 8001c7c:	d9ea      	bls.n	8001c54 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001c86:	b29a      	uxth	r2, r3
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f042 0201 	orr.w	r2, r2, #1
 8001c90:	b292      	uxth	r2, r2
 8001c92:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001c9e:	b29a      	uxth	r2, r3
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f022 0201 	bic.w	r2, r2, #1
 8001ca8:	b292      	uxth	r2, r2
 8001caa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001cae:	bf00      	nop
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001cb8:	b29b      	uxth	r3, r3
 8001cba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d0f6      	beq.n	8001cb0 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001cca:	b29a      	uxth	r2, r3
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001cd4:	b292      	uxth	r2, r2
 8001cd6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001cda:	2300      	movs	r3, #0
 8001cdc:	77fb      	strb	r3, [r7, #31]
 8001cde:	e010      	b.n	8001d02 <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001ce0:	7ffb      	ldrb	r3, [r7, #31]
 8001ce2:	687a      	ldr	r2, [r7, #4]
 8001ce4:	6812      	ldr	r2, [r2, #0]
 8001ce6:	4611      	mov	r1, r2
 8001ce8:	7ffa      	ldrb	r2, [r7, #31]
 8001cea:	0092      	lsls	r2, r2, #2
 8001cec:	440a      	add	r2, r1
 8001cee:	005b      	lsls	r3, r3, #1
 8001cf0:	f107 0120 	add.w	r1, r7, #32
 8001cf4:	440b      	add	r3, r1
 8001cf6:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8001cfa:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001cfc:	7ffb      	ldrb	r3, [r7, #31]
 8001cfe:	3301      	adds	r3, #1
 8001d00:	77fb      	strb	r3, [r7, #31]
 8001d02:	7ffb      	ldrb	r3, [r7, #31]
 8001d04:	2b07      	cmp	r3, #7
 8001d06:	d9eb      	bls.n	8001ce0 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001d10:	b29a      	uxth	r2, r3
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f042 0208 	orr.w	r2, r2, #8
 8001d1a:	b292      	uxth	r2, r2
 8001d1c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d28:	b29a      	uxth	r2, r3
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d32:	b292      	uxth	r2, r2
 8001d34:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001d40:	b29a      	uxth	r2, r3
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f042 0204 	orr.w	r2, r2, #4
 8001d4a:	b292      	uxth	r2, r2
 8001d4c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001d50:	6878      	ldr	r0, [r7, #4]
 8001d52:	f005 fd8b 	bl	800786c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f004 f8d3 	bl	8005f06 <USB_ReadInterrupts>
 8001d60:	4603      	mov	r3, r0
 8001d62:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d6a:	d10e      	bne.n	8001d8a <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d74:	b29a      	uxth	r2, r3
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001d7e:	b292      	uxth	r2, r2
 8001d80:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001d84:	6878      	ldr	r0, [r7, #4]
 8001d86:	f005 fd44 	bl	8007812 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f004 f8b9 	bl	8005f06 <USB_ReadInterrupts>
 8001d94:	4603      	mov	r3, r0
 8001d96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d9e:	d10b      	bne.n	8001db8 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001da8:	b29a      	uxth	r2, r3
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001db2:	b292      	uxth	r2, r2
 8001db4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001db8:	bf00      	nop
 8001dba:	3720      	adds	r7, #32
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}

08001dc0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
 8001dc8:	460b      	mov	r3, r1
 8001dca:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	d101      	bne.n	8001dda <HAL_PCD_SetAddress+0x1a>
 8001dd6:	2302      	movs	r3, #2
 8001dd8:	e013      	b.n	8001e02 <HAL_PCD_SetAddress+0x42>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2201      	movs	r2, #1
 8001dde:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	78fa      	ldrb	r2, [r7, #3]
 8001de6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	78fa      	ldrb	r2, [r7, #3]
 8001df0:	4611      	mov	r1, r2
 8001df2:	4618      	mov	r0, r3
 8001df4:	f004 f860 	bl	8005eb8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001e00:	2300      	movs	r3, #0
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3708      	adds	r7, #8
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}

08001e0a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001e0a:	b580      	push	{r7, lr}
 8001e0c:	b084      	sub	sp, #16
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	6078      	str	r0, [r7, #4]
 8001e12:	4608      	mov	r0, r1
 8001e14:	4611      	mov	r1, r2
 8001e16:	461a      	mov	r2, r3
 8001e18:	4603      	mov	r3, r0
 8001e1a:	70fb      	strb	r3, [r7, #3]
 8001e1c:	460b      	mov	r3, r1
 8001e1e:	803b      	strh	r3, [r7, #0]
 8001e20:	4613      	mov	r3, r2
 8001e22:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001e24:	2300      	movs	r3, #0
 8001e26:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001e28:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	da0e      	bge.n	8001e4e <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e30:	78fb      	ldrb	r3, [r7, #3]
 8001e32:	f003 0307 	and.w	r3, r3, #7
 8001e36:	1c5a      	adds	r2, r3, #1
 8001e38:	4613      	mov	r3, r2
 8001e3a:	009b      	lsls	r3, r3, #2
 8001e3c:	4413      	add	r3, r2
 8001e3e:	00db      	lsls	r3, r3, #3
 8001e40:	687a      	ldr	r2, [r7, #4]
 8001e42:	4413      	add	r3, r2
 8001e44:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	2201      	movs	r2, #1
 8001e4a:	705a      	strb	r2, [r3, #1]
 8001e4c:	e00e      	b.n	8001e6c <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e4e:	78fb      	ldrb	r3, [r7, #3]
 8001e50:	f003 0207 	and.w	r2, r3, #7
 8001e54:	4613      	mov	r3, r2
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	4413      	add	r3, r2
 8001e5a:	00db      	lsls	r3, r3, #3
 8001e5c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001e60:	687a      	ldr	r2, [r7, #4]
 8001e62:	4413      	add	r3, r2
 8001e64:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001e6c:	78fb      	ldrb	r3, [r7, #3]
 8001e6e:	f003 0307 	and.w	r3, r3, #7
 8001e72:	b2da      	uxtb	r2, r3
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001e78:	883a      	ldrh	r2, [r7, #0]
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	78ba      	ldrb	r2, [r7, #2]
 8001e82:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	785b      	ldrb	r3, [r3, #1]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d004      	beq.n	8001e96 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	b29a      	uxth	r2, r3
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001e96:	78bb      	ldrb	r3, [r7, #2]
 8001e98:	2b02      	cmp	r3, #2
 8001e9a:	d102      	bne.n	8001ea2 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d101      	bne.n	8001eb0 <HAL_PCD_EP_Open+0xa6>
 8001eac:	2302      	movs	r3, #2
 8001eae:	e00e      	b.n	8001ece <HAL_PCD_EP_Open+0xc4>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	68f9      	ldr	r1, [r7, #12]
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f001 feb0 	bl	8003c24 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001ecc:	7afb      	ldrb	r3, [r7, #11]
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	3710      	adds	r7, #16
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}

08001ed6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ed6:	b580      	push	{r7, lr}
 8001ed8:	b084      	sub	sp, #16
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	6078      	str	r0, [r7, #4]
 8001ede:	460b      	mov	r3, r1
 8001ee0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001ee2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	da0e      	bge.n	8001f08 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001eea:	78fb      	ldrb	r3, [r7, #3]
 8001eec:	f003 0307 	and.w	r3, r3, #7
 8001ef0:	1c5a      	adds	r2, r3, #1
 8001ef2:	4613      	mov	r3, r2
 8001ef4:	009b      	lsls	r3, r3, #2
 8001ef6:	4413      	add	r3, r2
 8001ef8:	00db      	lsls	r3, r3, #3
 8001efa:	687a      	ldr	r2, [r7, #4]
 8001efc:	4413      	add	r3, r2
 8001efe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	2201      	movs	r2, #1
 8001f04:	705a      	strb	r2, [r3, #1]
 8001f06:	e00e      	b.n	8001f26 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f08:	78fb      	ldrb	r3, [r7, #3]
 8001f0a:	f003 0207 	and.w	r2, r3, #7
 8001f0e:	4613      	mov	r3, r2
 8001f10:	009b      	lsls	r3, r3, #2
 8001f12:	4413      	add	r3, r2
 8001f14:	00db      	lsls	r3, r3, #3
 8001f16:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001f1a:	687a      	ldr	r2, [r7, #4]
 8001f1c:	4413      	add	r3, r2
 8001f1e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	2200      	movs	r2, #0
 8001f24:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001f26:	78fb      	ldrb	r3, [r7, #3]
 8001f28:	f003 0307 	and.w	r3, r3, #7
 8001f2c:	b2da      	uxtb	r2, r3
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d101      	bne.n	8001f40 <HAL_PCD_EP_Close+0x6a>
 8001f3c:	2302      	movs	r3, #2
 8001f3e:	e00e      	b.n	8001f5e <HAL_PCD_EP_Close+0x88>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2201      	movs	r2, #1
 8001f44:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	68f9      	ldr	r1, [r7, #12]
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f002 f9d2 	bl	80042f8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2200      	movs	r2, #0
 8001f58:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001f5c:	2300      	movs	r3, #0
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3710      	adds	r7, #16
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}

08001f66 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001f66:	b580      	push	{r7, lr}
 8001f68:	b086      	sub	sp, #24
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	60f8      	str	r0, [r7, #12]
 8001f6e:	607a      	str	r2, [r7, #4]
 8001f70:	603b      	str	r3, [r7, #0]
 8001f72:	460b      	mov	r3, r1
 8001f74:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f76:	7afb      	ldrb	r3, [r7, #11]
 8001f78:	f003 0207 	and.w	r2, r3, #7
 8001f7c:	4613      	mov	r3, r2
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	4413      	add	r3, r2
 8001f82:	00db      	lsls	r3, r3, #3
 8001f84:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001f88:	68fa      	ldr	r2, [r7, #12]
 8001f8a:	4413      	add	r3, r2
 8001f8c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	687a      	ldr	r2, [r7, #4]
 8001f92:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	683a      	ldr	r2, [r7, #0]
 8001f98:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001fa6:	7afb      	ldrb	r3, [r7, #11]
 8001fa8:	f003 0307 	and.w	r3, r3, #7
 8001fac:	b2da      	uxtb	r2, r3
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001fb2:	7afb      	ldrb	r3, [r7, #11]
 8001fb4:	f003 0307 	and.w	r3, r3, #7
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d106      	bne.n	8001fca <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	6979      	ldr	r1, [r7, #20]
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f002 fb84 	bl	80046d0 <USB_EPStartXfer>
 8001fc8:	e005      	b.n	8001fd6 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	6979      	ldr	r1, [r7, #20]
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f002 fb7d 	bl	80046d0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001fd6:	2300      	movs	r3, #0
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3718      	adds	r7, #24
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}

08001fe0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b086      	sub	sp, #24
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	60f8      	str	r0, [r7, #12]
 8001fe8:	607a      	str	r2, [r7, #4]
 8001fea:	603b      	str	r3, [r7, #0]
 8001fec:	460b      	mov	r3, r1
 8001fee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ff0:	7afb      	ldrb	r3, [r7, #11]
 8001ff2:	f003 0307 	and.w	r3, r3, #7
 8001ff6:	1c5a      	adds	r2, r3, #1
 8001ff8:	4613      	mov	r3, r2
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	4413      	add	r3, r2
 8001ffe:	00db      	lsls	r3, r3, #3
 8002000:	68fa      	ldr	r2, [r7, #12]
 8002002:	4413      	add	r3, r2
 8002004:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	687a      	ldr	r2, [r7, #4]
 800200a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	683a      	ldr	r2, [r7, #0]
 8002010:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	2201      	movs	r2, #1
 8002016:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	683a      	ldr	r2, [r7, #0]
 800201e:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	2200      	movs	r2, #0
 8002024:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	2201      	movs	r2, #1
 800202a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800202c:	7afb      	ldrb	r3, [r7, #11]
 800202e:	f003 0307 	and.w	r3, r3, #7
 8002032:	b2da      	uxtb	r2, r3
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002038:	7afb      	ldrb	r3, [r7, #11]
 800203a:	f003 0307 	and.w	r3, r3, #7
 800203e:	2b00      	cmp	r3, #0
 8002040:	d106      	bne.n	8002050 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	6979      	ldr	r1, [r7, #20]
 8002048:	4618      	mov	r0, r3
 800204a:	f002 fb41 	bl	80046d0 <USB_EPStartXfer>
 800204e:	e005      	b.n	800205c <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	6979      	ldr	r1, [r7, #20]
 8002056:	4618      	mov	r0, r3
 8002058:	f002 fb3a 	bl	80046d0 <USB_EPStartXfer>
  }

  return HAL_OK;
 800205c:	2300      	movs	r3, #0
}
 800205e:	4618      	mov	r0, r3
 8002060:	3718      	adds	r7, #24
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}

08002066 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002066:	b580      	push	{r7, lr}
 8002068:	b084      	sub	sp, #16
 800206a:	af00      	add	r7, sp, #0
 800206c:	6078      	str	r0, [r7, #4]
 800206e:	460b      	mov	r3, r1
 8002070:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002072:	78fb      	ldrb	r3, [r7, #3]
 8002074:	f003 0207 	and.w	r2, r3, #7
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	429a      	cmp	r2, r3
 800207e:	d901      	bls.n	8002084 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002080:	2301      	movs	r3, #1
 8002082:	e04c      	b.n	800211e <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002084:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002088:	2b00      	cmp	r3, #0
 800208a:	da0e      	bge.n	80020aa <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800208c:	78fb      	ldrb	r3, [r7, #3]
 800208e:	f003 0307 	and.w	r3, r3, #7
 8002092:	1c5a      	adds	r2, r3, #1
 8002094:	4613      	mov	r3, r2
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	4413      	add	r3, r2
 800209a:	00db      	lsls	r3, r3, #3
 800209c:	687a      	ldr	r2, [r7, #4]
 800209e:	4413      	add	r3, r2
 80020a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	2201      	movs	r2, #1
 80020a6:	705a      	strb	r2, [r3, #1]
 80020a8:	e00c      	b.n	80020c4 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80020aa:	78fa      	ldrb	r2, [r7, #3]
 80020ac:	4613      	mov	r3, r2
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	4413      	add	r3, r2
 80020b2:	00db      	lsls	r3, r3, #3
 80020b4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80020b8:	687a      	ldr	r2, [r7, #4]
 80020ba:	4413      	add	r3, r2
 80020bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	2200      	movs	r2, #0
 80020c2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	2201      	movs	r2, #1
 80020c8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80020ca:	78fb      	ldrb	r3, [r7, #3]
 80020cc:	f003 0307 	and.w	r3, r3, #7
 80020d0:	b2da      	uxtb	r2, r3
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80020dc:	2b01      	cmp	r3, #1
 80020de:	d101      	bne.n	80020e4 <HAL_PCD_EP_SetStall+0x7e>
 80020e0:	2302      	movs	r3, #2
 80020e2:	e01c      	b.n	800211e <HAL_PCD_EP_SetStall+0xb8>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2201      	movs	r2, #1
 80020e8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	68f9      	ldr	r1, [r7, #12]
 80020f2:	4618      	mov	r0, r3
 80020f4:	f003 fde3 	bl	8005cbe <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80020f8:	78fb      	ldrb	r3, [r7, #3]
 80020fa:	f003 0307 	and.w	r3, r3, #7
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d108      	bne.n	8002114 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800210c:	4619      	mov	r1, r3
 800210e:	4610      	mov	r0, r2
 8002110:	f003 ff08 	bl	8005f24 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2200      	movs	r2, #0
 8002118:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800211c:	2300      	movs	r3, #0
}
 800211e:	4618      	mov	r0, r3
 8002120:	3710      	adds	r7, #16
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}

08002126 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002126:	b580      	push	{r7, lr}
 8002128:	b084      	sub	sp, #16
 800212a:	af00      	add	r7, sp, #0
 800212c:	6078      	str	r0, [r7, #4]
 800212e:	460b      	mov	r3, r1
 8002130:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002132:	78fb      	ldrb	r3, [r7, #3]
 8002134:	f003 020f 	and.w	r2, r3, #15
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	429a      	cmp	r2, r3
 800213e:	d901      	bls.n	8002144 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002140:	2301      	movs	r3, #1
 8002142:	e040      	b.n	80021c6 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002144:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002148:	2b00      	cmp	r3, #0
 800214a:	da0e      	bge.n	800216a <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800214c:	78fb      	ldrb	r3, [r7, #3]
 800214e:	f003 0307 	and.w	r3, r3, #7
 8002152:	1c5a      	adds	r2, r3, #1
 8002154:	4613      	mov	r3, r2
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	4413      	add	r3, r2
 800215a:	00db      	lsls	r3, r3, #3
 800215c:	687a      	ldr	r2, [r7, #4]
 800215e:	4413      	add	r3, r2
 8002160:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	2201      	movs	r2, #1
 8002166:	705a      	strb	r2, [r3, #1]
 8002168:	e00e      	b.n	8002188 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800216a:	78fb      	ldrb	r3, [r7, #3]
 800216c:	f003 0207 	and.w	r2, r3, #7
 8002170:	4613      	mov	r3, r2
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	4413      	add	r3, r2
 8002176:	00db      	lsls	r3, r3, #3
 8002178:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800217c:	687a      	ldr	r2, [r7, #4]
 800217e:	4413      	add	r3, r2
 8002180:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	2200      	movs	r2, #0
 8002186:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	2200      	movs	r2, #0
 800218c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800218e:	78fb      	ldrb	r3, [r7, #3]
 8002190:	f003 0307 	and.w	r3, r3, #7
 8002194:	b2da      	uxtb	r2, r3
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d101      	bne.n	80021a8 <HAL_PCD_EP_ClrStall+0x82>
 80021a4:	2302      	movs	r3, #2
 80021a6:	e00e      	b.n	80021c6 <HAL_PCD_EP_ClrStall+0xa0>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2201      	movs	r2, #1
 80021ac:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	68f9      	ldr	r1, [r7, #12]
 80021b6:	4618      	mov	r0, r3
 80021b8:	f003 fdd1 	bl	8005d5e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2200      	movs	r2, #0
 80021c0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80021c4:	2300      	movs	r3, #0
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3710      	adds	r7, #16
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}

080021ce <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80021ce:	b580      	push	{r7, lr}
 80021d0:	b08e      	sub	sp, #56	; 0x38
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80021d6:	e2ec      	b.n	80027b2 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80021e0:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80021e2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	f003 030f 	and.w	r3, r3, #15
 80021ea:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 80021ee:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	f040 8161 	bne.w	80024ba <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80021f8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80021fa:	f003 0310 	and.w	r3, r3, #16
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d152      	bne.n	80022a8 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	881b      	ldrh	r3, [r3, #0]
 8002208:	b29b      	uxth	r3, r3
 800220a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800220e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002212:	81fb      	strh	r3, [r7, #14]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	89fb      	ldrh	r3, [r7, #14]
 800221a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800221e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002222:	b29b      	uxth	r3, r3
 8002224:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	3328      	adds	r3, #40	; 0x28
 800222a:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002234:	b29b      	uxth	r3, r3
 8002236:	461a      	mov	r2, r3
 8002238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	00db      	lsls	r3, r3, #3
 800223e:	4413      	add	r3, r2
 8002240:	3302      	adds	r3, #2
 8002242:	005b      	lsls	r3, r3, #1
 8002244:	687a      	ldr	r2, [r7, #4]
 8002246:	6812      	ldr	r2, [r2, #0]
 8002248:	4413      	add	r3, r2
 800224a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800224e:	881b      	ldrh	r3, [r3, #0]
 8002250:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002256:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800225a:	695a      	ldr	r2, [r3, #20]
 800225c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800225e:	69db      	ldr	r3, [r3, #28]
 8002260:	441a      	add	r2, r3
 8002262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002264:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002266:	2100      	movs	r1, #0
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	f005 fab8 	bl	80077de <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002274:	b2db      	uxtb	r3, r3
 8002276:	2b00      	cmp	r3, #0
 8002278:	f000 829b 	beq.w	80027b2 <PCD_EP_ISR_Handler+0x5e4>
 800227c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800227e:	699b      	ldr	r3, [r3, #24]
 8002280:	2b00      	cmp	r3, #0
 8002282:	f040 8296 	bne.w	80027b2 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800228c:	b2db      	uxtb	r3, r3
 800228e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002292:	b2da      	uxtb	r2, r3
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	b292      	uxth	r2, r2
 800229a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2200      	movs	r2, #0
 80022a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80022a6:	e284      	b.n	80027b2 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80022ae:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	881b      	ldrh	r3, [r3, #0]
 80022b6:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80022b8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80022ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d034      	beq.n	800232c <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022ca:	b29b      	uxth	r3, r3
 80022cc:	461a      	mov	r2, r3
 80022ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d0:	781b      	ldrb	r3, [r3, #0]
 80022d2:	00db      	lsls	r3, r3, #3
 80022d4:	4413      	add	r3, r2
 80022d6:	3306      	adds	r3, #6
 80022d8:	005b      	lsls	r3, r3, #1
 80022da:	687a      	ldr	r2, [r7, #4]
 80022dc:	6812      	ldr	r2, [r2, #0]
 80022de:	4413      	add	r3, r2
 80022e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80022e4:	881b      	ldrh	r3, [r3, #0]
 80022e6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80022ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ec:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6818      	ldr	r0, [r3, #0]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80022f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fa:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80022fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fe:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002300:	b29b      	uxth	r3, r3
 8002302:	f003 fe5f 	bl	8005fc4 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	881b      	ldrh	r3, [r3, #0]
 800230c:	b29a      	uxth	r2, r3
 800230e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002312:	4013      	ands	r3, r2
 8002314:	823b      	strh	r3, [r7, #16]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	8a3a      	ldrh	r2, [r7, #16]
 800231c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002320:	b292      	uxth	r2, r2
 8002322:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002324:	6878      	ldr	r0, [r7, #4]
 8002326:	f005 fa2d 	bl	8007784 <HAL_PCD_SetupStageCallback>
 800232a:	e242      	b.n	80027b2 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800232c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002330:	2b00      	cmp	r3, #0
 8002332:	f280 823e 	bge.w	80027b2 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	881b      	ldrh	r3, [r3, #0]
 800233c:	b29a      	uxth	r2, r3
 800233e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002342:	4013      	ands	r3, r2
 8002344:	83bb      	strh	r3, [r7, #28]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	8bba      	ldrh	r2, [r7, #28]
 800234c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002350:	b292      	uxth	r2, r2
 8002352:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800235c:	b29b      	uxth	r3, r3
 800235e:	461a      	mov	r2, r3
 8002360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	00db      	lsls	r3, r3, #3
 8002366:	4413      	add	r3, r2
 8002368:	3306      	adds	r3, #6
 800236a:	005b      	lsls	r3, r3, #1
 800236c:	687a      	ldr	r2, [r7, #4]
 800236e:	6812      	ldr	r2, [r2, #0]
 8002370:	4413      	add	r3, r2
 8002372:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002376:	881b      	ldrh	r3, [r3, #0]
 8002378:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800237c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800237e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002382:	69db      	ldr	r3, [r3, #28]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d019      	beq.n	80023bc <PCD_EP_ISR_Handler+0x1ee>
 8002388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238a:	695b      	ldr	r3, [r3, #20]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d015      	beq.n	80023bc <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6818      	ldr	r0, [r3, #0]
 8002394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002396:	6959      	ldr	r1, [r3, #20]
 8002398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800239c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80023a0:	b29b      	uxth	r3, r3
 80023a2:	f003 fe0f 	bl	8005fc4 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80023a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a8:	695a      	ldr	r2, [r3, #20]
 80023aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ac:	69db      	ldr	r3, [r3, #28]
 80023ae:	441a      	add	r2, r3
 80023b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b2:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80023b4:	2100      	movs	r1, #0
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	f005 f9f6 	bl	80077a8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	881b      	ldrh	r3, [r3, #0]
 80023c2:	b29b      	uxth	r3, r3
 80023c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	f040 81f2 	bne.w	80027b2 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	61bb      	str	r3, [r7, #24]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023dc:	b29b      	uxth	r3, r3
 80023de:	461a      	mov	r2, r3
 80023e0:	69bb      	ldr	r3, [r7, #24]
 80023e2:	4413      	add	r3, r2
 80023e4:	61bb      	str	r3, [r7, #24]
 80023e6:	69bb      	ldr	r3, [r7, #24]
 80023e8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80023ec:	617b      	str	r3, [r7, #20]
 80023ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f0:	691b      	ldr	r3, [r3, #16]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d112      	bne.n	800241c <PCD_EP_ISR_Handler+0x24e>
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	881b      	ldrh	r3, [r3, #0]
 80023fa:	b29b      	uxth	r3, r3
 80023fc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002400:	b29a      	uxth	r2, r3
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	801a      	strh	r2, [r3, #0]
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	881b      	ldrh	r3, [r3, #0]
 800240a:	b29b      	uxth	r3, r3
 800240c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002410:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002414:	b29a      	uxth	r2, r3
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	801a      	strh	r2, [r3, #0]
 800241a:	e02f      	b.n	800247c <PCD_EP_ISR_Handler+0x2ae>
 800241c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241e:	691b      	ldr	r3, [r3, #16]
 8002420:	2b3e      	cmp	r3, #62	; 0x3e
 8002422:	d813      	bhi.n	800244c <PCD_EP_ISR_Handler+0x27e>
 8002424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002426:	691b      	ldr	r3, [r3, #16]
 8002428:	085b      	lsrs	r3, r3, #1
 800242a:	633b      	str	r3, [r7, #48]	; 0x30
 800242c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242e:	691b      	ldr	r3, [r3, #16]
 8002430:	f003 0301 	and.w	r3, r3, #1
 8002434:	2b00      	cmp	r3, #0
 8002436:	d002      	beq.n	800243e <PCD_EP_ISR_Handler+0x270>
 8002438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800243a:	3301      	adds	r3, #1
 800243c:	633b      	str	r3, [r7, #48]	; 0x30
 800243e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002440:	b29b      	uxth	r3, r3
 8002442:	029b      	lsls	r3, r3, #10
 8002444:	b29a      	uxth	r2, r3
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	801a      	strh	r2, [r3, #0]
 800244a:	e017      	b.n	800247c <PCD_EP_ISR_Handler+0x2ae>
 800244c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244e:	691b      	ldr	r3, [r3, #16]
 8002450:	095b      	lsrs	r3, r3, #5
 8002452:	633b      	str	r3, [r7, #48]	; 0x30
 8002454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002456:	691b      	ldr	r3, [r3, #16]
 8002458:	f003 031f 	and.w	r3, r3, #31
 800245c:	2b00      	cmp	r3, #0
 800245e:	d102      	bne.n	8002466 <PCD_EP_ISR_Handler+0x298>
 8002460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002462:	3b01      	subs	r3, #1
 8002464:	633b      	str	r3, [r7, #48]	; 0x30
 8002466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002468:	b29b      	uxth	r3, r3
 800246a:	029b      	lsls	r3, r3, #10
 800246c:	b29b      	uxth	r3, r3
 800246e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002472:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002476:	b29a      	uxth	r2, r3
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	881b      	ldrh	r3, [r3, #0]
 8002482:	b29b      	uxth	r3, r3
 8002484:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002488:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800248c:	827b      	strh	r3, [r7, #18]
 800248e:	8a7b      	ldrh	r3, [r7, #18]
 8002490:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002494:	827b      	strh	r3, [r7, #18]
 8002496:	8a7b      	ldrh	r3, [r7, #18]
 8002498:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800249c:	827b      	strh	r3, [r7, #18]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	8a7b      	ldrh	r3, [r7, #18]
 80024a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80024a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80024ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024b4:	b29b      	uxth	r3, r3
 80024b6:	8013      	strh	r3, [r2, #0]
 80024b8:	e17b      	b.n	80027b2 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	461a      	mov	r2, r3
 80024c0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80024c4:	009b      	lsls	r3, r3, #2
 80024c6:	4413      	add	r3, r2
 80024c8:	881b      	ldrh	r3, [r3, #0]
 80024ca:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80024cc:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	f280 80ea 	bge.w	80026aa <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	461a      	mov	r2, r3
 80024dc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	4413      	add	r3, r2
 80024e4:	881b      	ldrh	r3, [r3, #0]
 80024e6:	b29a      	uxth	r2, r3
 80024e8:	f640 738f 	movw	r3, #3983	; 0xf8f
 80024ec:	4013      	ands	r3, r2
 80024ee:	853b      	strh	r3, [r7, #40]	; 0x28
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	461a      	mov	r2, r3
 80024f6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80024fa:	009b      	lsls	r3, r3, #2
 80024fc:	4413      	add	r3, r2
 80024fe:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002500:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002504:	b292      	uxth	r2, r2
 8002506:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002508:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800250c:	4613      	mov	r3, r2
 800250e:	009b      	lsls	r3, r3, #2
 8002510:	4413      	add	r3, r2
 8002512:	00db      	lsls	r3, r3, #3
 8002514:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002518:	687a      	ldr	r2, [r7, #4]
 800251a:	4413      	add	r3, r2
 800251c:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800251e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002520:	7b1b      	ldrb	r3, [r3, #12]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d122      	bne.n	800256c <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800252e:	b29b      	uxth	r3, r3
 8002530:	461a      	mov	r2, r3
 8002532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002534:	781b      	ldrb	r3, [r3, #0]
 8002536:	00db      	lsls	r3, r3, #3
 8002538:	4413      	add	r3, r2
 800253a:	3306      	adds	r3, #6
 800253c:	005b      	lsls	r3, r3, #1
 800253e:	687a      	ldr	r2, [r7, #4]
 8002540:	6812      	ldr	r2, [r2, #0]
 8002542:	4413      	add	r3, r2
 8002544:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002548:	881b      	ldrh	r3, [r3, #0]
 800254a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800254e:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8002550:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002552:	2b00      	cmp	r3, #0
 8002554:	f000 8087 	beq.w	8002666 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6818      	ldr	r0, [r3, #0]
 800255c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255e:	6959      	ldr	r1, [r3, #20]
 8002560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002562:	88da      	ldrh	r2, [r3, #6]
 8002564:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002566:	f003 fd2d 	bl	8005fc4 <USB_ReadPMA>
 800256a:	e07c      	b.n	8002666 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800256c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800256e:	78db      	ldrb	r3, [r3, #3]
 8002570:	2b02      	cmp	r3, #2
 8002572:	d108      	bne.n	8002586 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002574:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002576:	461a      	mov	r2, r3
 8002578:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	f000 f927 	bl	80027ce <HAL_PCD_EP_DB_Receive>
 8002580:	4603      	mov	r3, r0
 8002582:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002584:	e06f      	b.n	8002666 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	461a      	mov	r2, r3
 800258c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	009b      	lsls	r3, r3, #2
 8002592:	4413      	add	r3, r2
 8002594:	881b      	ldrh	r3, [r3, #0]
 8002596:	b29b      	uxth	r3, r3
 8002598:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800259c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025a0:	847b      	strh	r3, [r7, #34]	; 0x22
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	461a      	mov	r2, r3
 80025a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	009b      	lsls	r3, r3, #2
 80025ae:	441a      	add	r2, r3
 80025b0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80025b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80025b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80025ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025be:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80025c2:	b29b      	uxth	r3, r3
 80025c4:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	461a      	mov	r2, r3
 80025cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ce:	781b      	ldrb	r3, [r3, #0]
 80025d0:	009b      	lsls	r3, r3, #2
 80025d2:	4413      	add	r3, r2
 80025d4:	881b      	ldrh	r3, [r3, #0]
 80025d6:	b29b      	uxth	r3, r3
 80025d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d021      	beq.n	8002624 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025e8:	b29b      	uxth	r3, r3
 80025ea:	461a      	mov	r2, r3
 80025ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ee:	781b      	ldrb	r3, [r3, #0]
 80025f0:	00db      	lsls	r3, r3, #3
 80025f2:	4413      	add	r3, r2
 80025f4:	3302      	adds	r3, #2
 80025f6:	005b      	lsls	r3, r3, #1
 80025f8:	687a      	ldr	r2, [r7, #4]
 80025fa:	6812      	ldr	r2, [r2, #0]
 80025fc:	4413      	add	r3, r2
 80025fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002602:	881b      	ldrh	r3, [r3, #0]
 8002604:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002608:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800260a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800260c:	2b00      	cmp	r3, #0
 800260e:	d02a      	beq.n	8002666 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6818      	ldr	r0, [r3, #0]
 8002614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002616:	6959      	ldr	r1, [r3, #20]
 8002618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261a:	891a      	ldrh	r2, [r3, #8]
 800261c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800261e:	f003 fcd1 	bl	8005fc4 <USB_ReadPMA>
 8002622:	e020      	b.n	8002666 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800262c:	b29b      	uxth	r3, r3
 800262e:	461a      	mov	r2, r3
 8002630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002632:	781b      	ldrb	r3, [r3, #0]
 8002634:	00db      	lsls	r3, r3, #3
 8002636:	4413      	add	r3, r2
 8002638:	3306      	adds	r3, #6
 800263a:	005b      	lsls	r3, r3, #1
 800263c:	687a      	ldr	r2, [r7, #4]
 800263e:	6812      	ldr	r2, [r2, #0]
 8002640:	4413      	add	r3, r2
 8002642:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002646:	881b      	ldrh	r3, [r3, #0]
 8002648:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800264c:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800264e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002650:	2b00      	cmp	r3, #0
 8002652:	d008      	beq.n	8002666 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6818      	ldr	r0, [r3, #0]
 8002658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265a:	6959      	ldr	r1, [r3, #20]
 800265c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265e:	895a      	ldrh	r2, [r3, #10]
 8002660:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002662:	f003 fcaf 	bl	8005fc4 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002668:	69da      	ldr	r2, [r3, #28]
 800266a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800266c:	441a      	add	r2, r3
 800266e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002670:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002674:	695a      	ldr	r2, [r3, #20]
 8002676:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002678:	441a      	add	r2, r3
 800267a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800267c:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800267e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002680:	699b      	ldr	r3, [r3, #24]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d004      	beq.n	8002690 <PCD_EP_ISR_Handler+0x4c2>
 8002686:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268a:	691b      	ldr	r3, [r3, #16]
 800268c:	429a      	cmp	r2, r3
 800268e:	d206      	bcs.n	800269e <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002692:	781b      	ldrb	r3, [r3, #0]
 8002694:	4619      	mov	r1, r3
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f005 f886 	bl	80077a8 <HAL_PCD_DataOutStageCallback>
 800269c:	e005      	b.n	80026aa <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026a4:	4618      	mov	r0, r3
 80026a6:	f002 f813 	bl	80046d0 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80026aa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80026ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d07e      	beq.n	80027b2 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 80026b4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80026b8:	1c5a      	adds	r2, r3, #1
 80026ba:	4613      	mov	r3, r2
 80026bc:	009b      	lsls	r3, r3, #2
 80026be:	4413      	add	r3, r2
 80026c0:	00db      	lsls	r3, r3, #3
 80026c2:	687a      	ldr	r2, [r7, #4]
 80026c4:	4413      	add	r3, r2
 80026c6:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	461a      	mov	r2, r3
 80026ce:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	4413      	add	r3, r2
 80026d6:	881b      	ldrh	r3, [r3, #0]
 80026d8:	b29b      	uxth	r3, r3
 80026da:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80026de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026e2:	843b      	strh	r3, [r7, #32]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	461a      	mov	r2, r3
 80026ea:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	441a      	add	r2, r3
 80026f2:	8c3b      	ldrh	r3, [r7, #32]
 80026f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80026f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026fc:	b29b      	uxth	r3, r3
 80026fe:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8002700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002702:	78db      	ldrb	r3, [r3, #3]
 8002704:	2b03      	cmp	r3, #3
 8002706:	d00c      	beq.n	8002722 <PCD_EP_ISR_Handler+0x554>
 8002708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800270a:	78db      	ldrb	r3, [r3, #3]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d008      	beq.n	8002722 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002712:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8002714:	2b02      	cmp	r3, #2
 8002716:	d146      	bne.n	80027a6 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002718:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800271a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800271e:	2b00      	cmp	r3, #0
 8002720:	d141      	bne.n	80027a6 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800272a:	b29b      	uxth	r3, r3
 800272c:	461a      	mov	r2, r3
 800272e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002730:	781b      	ldrb	r3, [r3, #0]
 8002732:	00db      	lsls	r3, r3, #3
 8002734:	4413      	add	r3, r2
 8002736:	3302      	adds	r3, #2
 8002738:	005b      	lsls	r3, r3, #1
 800273a:	687a      	ldr	r2, [r7, #4]
 800273c:	6812      	ldr	r2, [r2, #0]
 800273e:	4413      	add	r3, r2
 8002740:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002744:	881b      	ldrh	r3, [r3, #0]
 8002746:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800274a:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 800274c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274e:	699a      	ldr	r2, [r3, #24]
 8002750:	8bfb      	ldrh	r3, [r7, #30]
 8002752:	429a      	cmp	r2, r3
 8002754:	d906      	bls.n	8002764 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8002756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002758:	699a      	ldr	r2, [r3, #24]
 800275a:	8bfb      	ldrh	r3, [r7, #30]
 800275c:	1ad2      	subs	r2, r2, r3
 800275e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002760:	619a      	str	r2, [r3, #24]
 8002762:	e002      	b.n	800276a <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8002764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002766:	2200      	movs	r2, #0
 8002768:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 800276a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276c:	699b      	ldr	r3, [r3, #24]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d106      	bne.n	8002780 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002774:	781b      	ldrb	r3, [r3, #0]
 8002776:	4619      	mov	r1, r3
 8002778:	6878      	ldr	r0, [r7, #4]
 800277a:	f005 f830 	bl	80077de <HAL_PCD_DataInStageCallback>
 800277e:	e018      	b.n	80027b2 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8002780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002782:	695a      	ldr	r2, [r3, #20]
 8002784:	8bfb      	ldrh	r3, [r7, #30]
 8002786:	441a      	add	r2, r3
 8002788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278a:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 800278c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278e:	69da      	ldr	r2, [r3, #28]
 8002790:	8bfb      	ldrh	r3, [r7, #30]
 8002792:	441a      	add	r2, r3
 8002794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002796:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800279e:	4618      	mov	r0, r3
 80027a0:	f001 ff96 	bl	80046d0 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80027a4:	e005      	b.n	80027b2 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80027a6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80027a8:	461a      	mov	r2, r3
 80027aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027ac:	6878      	ldr	r0, [r7, #4]
 80027ae:	f000 f91b 	bl	80029e8 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80027ba:	b29b      	uxth	r3, r3
 80027bc:	b21b      	sxth	r3, r3
 80027be:	2b00      	cmp	r3, #0
 80027c0:	f6ff ad0a 	blt.w	80021d8 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80027c4:	2300      	movs	r3, #0
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3738      	adds	r7, #56	; 0x38
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}

080027ce <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80027ce:	b580      	push	{r7, lr}
 80027d0:	b088      	sub	sp, #32
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	60f8      	str	r0, [r7, #12]
 80027d6:	60b9      	str	r1, [r7, #8]
 80027d8:	4613      	mov	r3, r2
 80027da:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80027dc:	88fb      	ldrh	r3, [r7, #6]
 80027de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d07e      	beq.n	80028e4 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027ee:	b29b      	uxth	r3, r3
 80027f0:	461a      	mov	r2, r3
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	781b      	ldrb	r3, [r3, #0]
 80027f6:	00db      	lsls	r3, r3, #3
 80027f8:	4413      	add	r3, r2
 80027fa:	3302      	adds	r3, #2
 80027fc:	005b      	lsls	r3, r3, #1
 80027fe:	68fa      	ldr	r2, [r7, #12]
 8002800:	6812      	ldr	r2, [r2, #0]
 8002802:	4413      	add	r3, r2
 8002804:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002808:	881b      	ldrh	r3, [r3, #0]
 800280a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800280e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	699a      	ldr	r2, [r3, #24]
 8002814:	8b7b      	ldrh	r3, [r7, #26]
 8002816:	429a      	cmp	r2, r3
 8002818:	d306      	bcc.n	8002828 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	699a      	ldr	r2, [r3, #24]
 800281e:	8b7b      	ldrh	r3, [r7, #26]
 8002820:	1ad2      	subs	r2, r2, r3
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	619a      	str	r2, [r3, #24]
 8002826:	e002      	b.n	800282e <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	2200      	movs	r2, #0
 800282c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	699b      	ldr	r3, [r3, #24]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d123      	bne.n	800287e <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	461a      	mov	r2, r3
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	781b      	ldrb	r3, [r3, #0]
 8002840:	009b      	lsls	r3, r3, #2
 8002842:	4413      	add	r3, r2
 8002844:	881b      	ldrh	r3, [r3, #0]
 8002846:	b29b      	uxth	r3, r3
 8002848:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800284c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002850:	833b      	strh	r3, [r7, #24]
 8002852:	8b3b      	ldrh	r3, [r7, #24]
 8002854:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002858:	833b      	strh	r3, [r7, #24]
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	461a      	mov	r2, r3
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	009b      	lsls	r3, r3, #2
 8002866:	441a      	add	r2, r3
 8002868:	8b3b      	ldrh	r3, [r7, #24]
 800286a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800286e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002872:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002876:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800287a:	b29b      	uxth	r3, r3
 800287c:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800287e:	88fb      	ldrh	r3, [r7, #6]
 8002880:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002884:	2b00      	cmp	r3, #0
 8002886:	d01f      	beq.n	80028c8 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	461a      	mov	r2, r3
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	781b      	ldrb	r3, [r3, #0]
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	4413      	add	r3, r2
 8002896:	881b      	ldrh	r3, [r3, #0]
 8002898:	b29b      	uxth	r3, r3
 800289a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800289e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028a2:	82fb      	strh	r3, [r7, #22]
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	461a      	mov	r2, r3
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	781b      	ldrb	r3, [r3, #0]
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	441a      	add	r2, r3
 80028b2:	8afb      	ldrh	r3, [r7, #22]
 80028b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80028b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80028bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028c0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80028c4:	b29b      	uxth	r3, r3
 80028c6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80028c8:	8b7b      	ldrh	r3, [r7, #26]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	f000 8087 	beq.w	80029de <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	6818      	ldr	r0, [r3, #0]
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	6959      	ldr	r1, [r3, #20]
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	891a      	ldrh	r2, [r3, #8]
 80028dc:	8b7b      	ldrh	r3, [r7, #26]
 80028de:	f003 fb71 	bl	8005fc4 <USB_ReadPMA>
 80028e2:	e07c      	b.n	80029de <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028ec:	b29b      	uxth	r3, r3
 80028ee:	461a      	mov	r2, r3
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	781b      	ldrb	r3, [r3, #0]
 80028f4:	00db      	lsls	r3, r3, #3
 80028f6:	4413      	add	r3, r2
 80028f8:	3306      	adds	r3, #6
 80028fa:	005b      	lsls	r3, r3, #1
 80028fc:	68fa      	ldr	r2, [r7, #12]
 80028fe:	6812      	ldr	r2, [r2, #0]
 8002900:	4413      	add	r3, r2
 8002902:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002906:	881b      	ldrh	r3, [r3, #0]
 8002908:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800290c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	699a      	ldr	r2, [r3, #24]
 8002912:	8b7b      	ldrh	r3, [r7, #26]
 8002914:	429a      	cmp	r2, r3
 8002916:	d306      	bcc.n	8002926 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	699a      	ldr	r2, [r3, #24]
 800291c:	8b7b      	ldrh	r3, [r7, #26]
 800291e:	1ad2      	subs	r2, r2, r3
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	619a      	str	r2, [r3, #24]
 8002924:	e002      	b.n	800292c <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	2200      	movs	r2, #0
 800292a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	699b      	ldr	r3, [r3, #24]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d123      	bne.n	800297c <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	461a      	mov	r2, r3
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	781b      	ldrb	r3, [r3, #0]
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	4413      	add	r3, r2
 8002942:	881b      	ldrh	r3, [r3, #0]
 8002944:	b29b      	uxth	r3, r3
 8002946:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800294a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800294e:	83fb      	strh	r3, [r7, #30]
 8002950:	8bfb      	ldrh	r3, [r7, #30]
 8002952:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002956:	83fb      	strh	r3, [r7, #30]
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	461a      	mov	r2, r3
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	781b      	ldrb	r3, [r3, #0]
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	441a      	add	r2, r3
 8002966:	8bfb      	ldrh	r3, [r7, #30]
 8002968:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800296c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002970:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002974:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002978:	b29b      	uxth	r3, r3
 800297a:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800297c:	88fb      	ldrh	r3, [r7, #6]
 800297e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002982:	2b00      	cmp	r3, #0
 8002984:	d11f      	bne.n	80029c6 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	461a      	mov	r2, r3
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	781b      	ldrb	r3, [r3, #0]
 8002990:	009b      	lsls	r3, r3, #2
 8002992:	4413      	add	r3, r2
 8002994:	881b      	ldrh	r3, [r3, #0]
 8002996:	b29b      	uxth	r3, r3
 8002998:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800299c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029a0:	83bb      	strh	r3, [r7, #28]
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	461a      	mov	r2, r3
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	009b      	lsls	r3, r3, #2
 80029ae:	441a      	add	r2, r3
 80029b0:	8bbb      	ldrh	r3, [r7, #28]
 80029b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80029b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80029ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029be:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80029c2:	b29b      	uxth	r3, r3
 80029c4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80029c6:	8b7b      	ldrh	r3, [r7, #26]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d008      	beq.n	80029de <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	6818      	ldr	r0, [r3, #0]
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	6959      	ldr	r1, [r3, #20]
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	895a      	ldrh	r2, [r3, #10]
 80029d8:	8b7b      	ldrh	r3, [r7, #26]
 80029da:	f003 faf3 	bl	8005fc4 <USB_ReadPMA>
    }
  }

  return count;
 80029de:	8b7b      	ldrh	r3, [r7, #26]
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	3720      	adds	r7, #32
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}

080029e8 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b0a2      	sub	sp, #136	; 0x88
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	60f8      	str	r0, [r7, #12]
 80029f0:	60b9      	str	r1, [r7, #8]
 80029f2:	4613      	mov	r3, r2
 80029f4:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80029f6:	88fb      	ldrh	r3, [r7, #6]
 80029f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	f000 81c7 	beq.w	8002d90 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a0a:	b29b      	uxth	r3, r3
 8002a0c:	461a      	mov	r2, r3
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	781b      	ldrb	r3, [r3, #0]
 8002a12:	00db      	lsls	r3, r3, #3
 8002a14:	4413      	add	r3, r2
 8002a16:	3302      	adds	r3, #2
 8002a18:	005b      	lsls	r3, r3, #1
 8002a1a:	68fa      	ldr	r2, [r7, #12]
 8002a1c:	6812      	ldr	r2, [r2, #0]
 8002a1e:	4413      	add	r3, r2
 8002a20:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002a24:	881b      	ldrh	r3, [r3, #0]
 8002a26:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a2a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	699a      	ldr	r2, [r3, #24]
 8002a32:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002a36:	429a      	cmp	r2, r3
 8002a38:	d907      	bls.n	8002a4a <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	699a      	ldr	r2, [r3, #24]
 8002a3e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002a42:	1ad2      	subs	r2, r2, r3
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	619a      	str	r2, [r3, #24]
 8002a48:	e002      	b.n	8002a50 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	699b      	ldr	r3, [r3, #24]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	f040 80b9 	bne.w	8002bcc <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	785b      	ldrb	r3, [r3, #1]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d126      	bne.n	8002ab0 <HAL_PCD_EP_DB_Transmit+0xc8>
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a70:	b29b      	uxth	r3, r3
 8002a72:	461a      	mov	r2, r3
 8002a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a76:	4413      	add	r3, r2
 8002a78:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	781b      	ldrb	r3, [r3, #0]
 8002a7e:	011a      	lsls	r2, r3, #4
 8002a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a82:	4413      	add	r3, r2
 8002a84:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002a88:	627b      	str	r3, [r7, #36]	; 0x24
 8002a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a8c:	881b      	ldrh	r3, [r3, #0]
 8002a8e:	b29b      	uxth	r3, r3
 8002a90:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002a94:	b29a      	uxth	r2, r3
 8002a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a98:	801a      	strh	r2, [r3, #0]
 8002a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a9c:	881b      	ldrh	r3, [r3, #0]
 8002a9e:	b29b      	uxth	r3, r3
 8002aa0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002aa4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002aa8:	b29a      	uxth	r2, r3
 8002aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aac:	801a      	strh	r2, [r3, #0]
 8002aae:	e01a      	b.n	8002ae6 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	785b      	ldrb	r3, [r3, #1]
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d116      	bne.n	8002ae6 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	633b      	str	r3, [r7, #48]	; 0x30
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ac6:	b29b      	uxth	r3, r3
 8002ac8:	461a      	mov	r2, r3
 8002aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002acc:	4413      	add	r3, r2
 8002ace:	633b      	str	r3, [r7, #48]	; 0x30
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	781b      	ldrb	r3, [r3, #0]
 8002ad4:	011a      	lsls	r2, r3, #4
 8002ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ad8:	4413      	add	r3, r2
 8002ada:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002ade:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	623b      	str	r3, [r7, #32]
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	785b      	ldrb	r3, [r3, #1]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d126      	bne.n	8002b42 <HAL_PCD_EP_DB_Transmit+0x15a>
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	61bb      	str	r3, [r7, #24]
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b02:	b29b      	uxth	r3, r3
 8002b04:	461a      	mov	r2, r3
 8002b06:	69bb      	ldr	r3, [r7, #24]
 8002b08:	4413      	add	r3, r2
 8002b0a:	61bb      	str	r3, [r7, #24]
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	781b      	ldrb	r3, [r3, #0]
 8002b10:	011a      	lsls	r2, r3, #4
 8002b12:	69bb      	ldr	r3, [r7, #24]
 8002b14:	4413      	add	r3, r2
 8002b16:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002b1a:	617b      	str	r3, [r7, #20]
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	881b      	ldrh	r3, [r3, #0]
 8002b20:	b29b      	uxth	r3, r3
 8002b22:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002b26:	b29a      	uxth	r2, r3
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	801a      	strh	r2, [r3, #0]
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	881b      	ldrh	r3, [r3, #0]
 8002b30:	b29b      	uxth	r3, r3
 8002b32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b3a:	b29a      	uxth	r2, r3
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	801a      	strh	r2, [r3, #0]
 8002b40:	e017      	b.n	8002b72 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	785b      	ldrb	r3, [r3, #1]
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d113      	bne.n	8002b72 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b52:	b29b      	uxth	r3, r3
 8002b54:	461a      	mov	r2, r3
 8002b56:	6a3b      	ldr	r3, [r7, #32]
 8002b58:	4413      	add	r3, r2
 8002b5a:	623b      	str	r3, [r7, #32]
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	781b      	ldrb	r3, [r3, #0]
 8002b60:	011a      	lsls	r2, r3, #4
 8002b62:	6a3b      	ldr	r3, [r7, #32]
 8002b64:	4413      	add	r3, r2
 8002b66:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002b6a:	61fb      	str	r3, [r7, #28]
 8002b6c:	69fb      	ldr	r3, [r7, #28]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	781b      	ldrb	r3, [r3, #0]
 8002b76:	4619      	mov	r1, r3
 8002b78:	68f8      	ldr	r0, [r7, #12]
 8002b7a:	f004 fe30 	bl	80077de <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002b7e:	88fb      	ldrh	r3, [r7, #6]
 8002b80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	f000 82d4 	beq.w	8003132 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	461a      	mov	r2, r3
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	781b      	ldrb	r3, [r3, #0]
 8002b94:	009b      	lsls	r3, r3, #2
 8002b96:	4413      	add	r3, r2
 8002b98:	881b      	ldrh	r3, [r3, #0]
 8002b9a:	b29b      	uxth	r3, r3
 8002b9c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ba0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ba4:	827b      	strh	r3, [r7, #18]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	461a      	mov	r2, r3
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	781b      	ldrb	r3, [r3, #0]
 8002bb0:	009b      	lsls	r3, r3, #2
 8002bb2:	441a      	add	r2, r3
 8002bb4:	8a7b      	ldrh	r3, [r7, #18]
 8002bb6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002bba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002bbe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002bc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bc6:	b29b      	uxth	r3, r3
 8002bc8:	8013      	strh	r3, [r2, #0]
 8002bca:	e2b2      	b.n	8003132 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002bcc:	88fb      	ldrh	r3, [r7, #6]
 8002bce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d021      	beq.n	8002c1a <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	461a      	mov	r2, r3
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	781b      	ldrb	r3, [r3, #0]
 8002be0:	009b      	lsls	r3, r3, #2
 8002be2:	4413      	add	r3, r2
 8002be4:	881b      	ldrh	r3, [r3, #0]
 8002be6:	b29b      	uxth	r3, r3
 8002be8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002bec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bf0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	461a      	mov	r2, r3
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	781b      	ldrb	r3, [r3, #0]
 8002bfe:	009b      	lsls	r3, r3, #2
 8002c00:	441a      	add	r2, r3
 8002c02:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002c06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c0e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c16:	b29b      	uxth	r3, r3
 8002c18:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	f040 8286 	bne.w	8003132 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	695a      	ldr	r2, [r3, #20]
 8002c2a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002c2e:	441a      	add	r2, r3
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	69da      	ldr	r2, [r3, #28]
 8002c38:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002c3c:	441a      	add	r2, r3
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	6a1a      	ldr	r2, [r3, #32]
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	691b      	ldr	r3, [r3, #16]
 8002c4a:	429a      	cmp	r2, r3
 8002c4c:	d309      	bcc.n	8002c62 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	691b      	ldr	r3, [r3, #16]
 8002c52:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	6a1a      	ldr	r2, [r3, #32]
 8002c58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c5a:	1ad2      	subs	r2, r2, r3
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	621a      	str	r2, [r3, #32]
 8002c60:	e015      	b.n	8002c8e <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	6a1b      	ldr	r3, [r3, #32]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d107      	bne.n	8002c7a <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8002c6a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002c6e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	2200      	movs	r2, #0
 8002c74:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002c78:	e009      	b.n	8002c8e <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	6a1b      	ldr	r3, [r3, #32]
 8002c86:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	785b      	ldrb	r3, [r3, #1]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d155      	bne.n	8002d42 <HAL_PCD_EP_DB_Transmit+0x35a>
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	63bb      	str	r3, [r7, #56]	; 0x38
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ca4:	b29b      	uxth	r3, r3
 8002ca6:	461a      	mov	r2, r3
 8002ca8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002caa:	4413      	add	r3, r2
 8002cac:	63bb      	str	r3, [r7, #56]	; 0x38
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	781b      	ldrb	r3, [r3, #0]
 8002cb2:	011a      	lsls	r2, r3, #4
 8002cb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cb6:	4413      	add	r3, r2
 8002cb8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002cbc:	637b      	str	r3, [r7, #52]	; 0x34
 8002cbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d112      	bne.n	8002cea <HAL_PCD_EP_DB_Transmit+0x302>
 8002cc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cc6:	881b      	ldrh	r3, [r3, #0]
 8002cc8:	b29b      	uxth	r3, r3
 8002cca:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002cce:	b29a      	uxth	r2, r3
 8002cd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cd2:	801a      	strh	r2, [r3, #0]
 8002cd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cd6:	881b      	ldrh	r3, [r3, #0]
 8002cd8:	b29b      	uxth	r3, r3
 8002cda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002cde:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ce2:	b29a      	uxth	r2, r3
 8002ce4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ce6:	801a      	strh	r2, [r3, #0]
 8002ce8:	e047      	b.n	8002d7a <HAL_PCD_EP_DB_Transmit+0x392>
 8002cea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002cec:	2b3e      	cmp	r3, #62	; 0x3e
 8002cee:	d811      	bhi.n	8002d14 <HAL_PCD_EP_DB_Transmit+0x32c>
 8002cf0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002cf2:	085b      	lsrs	r3, r3, #1
 8002cf4:	64bb      	str	r3, [r7, #72]	; 0x48
 8002cf6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002cf8:	f003 0301 	and.w	r3, r3, #1
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d002      	beq.n	8002d06 <HAL_PCD_EP_DB_Transmit+0x31e>
 8002d00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d02:	3301      	adds	r3, #1
 8002d04:	64bb      	str	r3, [r7, #72]	; 0x48
 8002d06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d08:	b29b      	uxth	r3, r3
 8002d0a:	029b      	lsls	r3, r3, #10
 8002d0c:	b29a      	uxth	r2, r3
 8002d0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d10:	801a      	strh	r2, [r3, #0]
 8002d12:	e032      	b.n	8002d7a <HAL_PCD_EP_DB_Transmit+0x392>
 8002d14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d16:	095b      	lsrs	r3, r3, #5
 8002d18:	64bb      	str	r3, [r7, #72]	; 0x48
 8002d1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d1c:	f003 031f 	and.w	r3, r3, #31
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d102      	bne.n	8002d2a <HAL_PCD_EP_DB_Transmit+0x342>
 8002d24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d26:	3b01      	subs	r3, #1
 8002d28:	64bb      	str	r3, [r7, #72]	; 0x48
 8002d2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d2c:	b29b      	uxth	r3, r3
 8002d2e:	029b      	lsls	r3, r3, #10
 8002d30:	b29b      	uxth	r3, r3
 8002d32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d3a:	b29a      	uxth	r2, r3
 8002d3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d3e:	801a      	strh	r2, [r3, #0]
 8002d40:	e01b      	b.n	8002d7a <HAL_PCD_EP_DB_Transmit+0x392>
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	785b      	ldrb	r3, [r3, #1]
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d117      	bne.n	8002d7a <HAL_PCD_EP_DB_Transmit+0x392>
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	643b      	str	r3, [r7, #64]	; 0x40
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d58:	b29b      	uxth	r3, r3
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d5e:	4413      	add	r3, r2
 8002d60:	643b      	str	r3, [r7, #64]	; 0x40
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	781b      	ldrb	r3, [r3, #0]
 8002d66:	011a      	lsls	r2, r3, #4
 8002d68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d6a:	4413      	add	r3, r2
 8002d6c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002d70:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d74:	b29a      	uxth	r2, r3
 8002d76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d78:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	6818      	ldr	r0, [r3, #0]
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	6959      	ldr	r1, [r3, #20]
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	891a      	ldrh	r2, [r3, #8]
 8002d86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d88:	b29b      	uxth	r3, r3
 8002d8a:	f003 f8d6 	bl	8005f3a <USB_WritePMA>
 8002d8e:	e1d0      	b.n	8003132 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d98:	b29b      	uxth	r3, r3
 8002d9a:	461a      	mov	r2, r3
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	781b      	ldrb	r3, [r3, #0]
 8002da0:	00db      	lsls	r3, r3, #3
 8002da2:	4413      	add	r3, r2
 8002da4:	3306      	adds	r3, #6
 8002da6:	005b      	lsls	r3, r3, #1
 8002da8:	68fa      	ldr	r2, [r7, #12]
 8002daa:	6812      	ldr	r2, [r2, #0]
 8002dac:	4413      	add	r3, r2
 8002dae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002db2:	881b      	ldrh	r3, [r3, #0]
 8002db4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002db8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	699a      	ldr	r2, [r3, #24]
 8002dc0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d307      	bcc.n	8002dd8 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	699a      	ldr	r2, [r3, #24]
 8002dcc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002dd0:	1ad2      	subs	r2, r2, r3
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	619a      	str	r2, [r3, #24]
 8002dd6:	e002      	b.n	8002dde <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	699b      	ldr	r3, [r3, #24]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	f040 80c4 	bne.w	8002f70 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	785b      	ldrb	r3, [r3, #1]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d126      	bne.n	8002e3e <HAL_PCD_EP_DB_Transmit+0x456>
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002dfe:	b29b      	uxth	r3, r3
 8002e00:	461a      	mov	r2, r3
 8002e02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e04:	4413      	add	r3, r2
 8002e06:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	781b      	ldrb	r3, [r3, #0]
 8002e0c:	011a      	lsls	r2, r3, #4
 8002e0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e10:	4413      	add	r3, r2
 8002e12:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002e16:	66bb      	str	r3, [r7, #104]	; 0x68
 8002e18:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e1a:	881b      	ldrh	r3, [r3, #0]
 8002e1c:	b29b      	uxth	r3, r3
 8002e1e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002e22:	b29a      	uxth	r2, r3
 8002e24:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e26:	801a      	strh	r2, [r3, #0]
 8002e28:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e2a:	881b      	ldrh	r3, [r3, #0]
 8002e2c:	b29b      	uxth	r3, r3
 8002e2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e36:	b29a      	uxth	r2, r3
 8002e38:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e3a:	801a      	strh	r2, [r3, #0]
 8002e3c:	e01a      	b.n	8002e74 <HAL_PCD_EP_DB_Transmit+0x48c>
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	785b      	ldrb	r3, [r3, #1]
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d116      	bne.n	8002e74 <HAL_PCD_EP_DB_Transmit+0x48c>
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	677b      	str	r3, [r7, #116]	; 0x74
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e54:	b29b      	uxth	r3, r3
 8002e56:	461a      	mov	r2, r3
 8002e58:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e5a:	4413      	add	r3, r2
 8002e5c:	677b      	str	r3, [r7, #116]	; 0x74
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	781b      	ldrb	r3, [r3, #0]
 8002e62:	011a      	lsls	r2, r3, #4
 8002e64:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e66:	4413      	add	r3, r2
 8002e68:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002e6c:	673b      	str	r3, [r7, #112]	; 0x70
 8002e6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e70:	2200      	movs	r2, #0
 8002e72:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	67bb      	str	r3, [r7, #120]	; 0x78
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	785b      	ldrb	r3, [r3, #1]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d12f      	bne.n	8002ee2 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e92:	b29b      	uxth	r3, r3
 8002e94:	461a      	mov	r2, r3
 8002e96:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002e9a:	4413      	add	r3, r2
 8002e9c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	781b      	ldrb	r3, [r3, #0]
 8002ea4:	011a      	lsls	r2, r3, #4
 8002ea6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002eaa:	4413      	add	r3, r2
 8002eac:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002eb0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002eb4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002eb8:	881b      	ldrh	r3, [r3, #0]
 8002eba:	b29b      	uxth	r3, r3
 8002ebc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002ec0:	b29a      	uxth	r2, r3
 8002ec2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002ec6:	801a      	strh	r2, [r3, #0]
 8002ec8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002ecc:	881b      	ldrh	r3, [r3, #0]
 8002ece:	b29b      	uxth	r3, r3
 8002ed0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ed4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ed8:	b29a      	uxth	r2, r3
 8002eda:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002ede:	801a      	strh	r2, [r3, #0]
 8002ee0:	e017      	b.n	8002f12 <HAL_PCD_EP_DB_Transmit+0x52a>
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	785b      	ldrb	r3, [r3, #1]
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d113      	bne.n	8002f12 <HAL_PCD_EP_DB_Transmit+0x52a>
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ef2:	b29b      	uxth	r3, r3
 8002ef4:	461a      	mov	r2, r3
 8002ef6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ef8:	4413      	add	r3, r2
 8002efa:	67bb      	str	r3, [r7, #120]	; 0x78
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	781b      	ldrb	r3, [r3, #0]
 8002f00:	011a      	lsls	r2, r3, #4
 8002f02:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f04:	4413      	add	r3, r2
 8002f06:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002f0a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002f0c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002f0e:	2200      	movs	r2, #0
 8002f10:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	781b      	ldrb	r3, [r3, #0]
 8002f16:	4619      	mov	r1, r3
 8002f18:	68f8      	ldr	r0, [r7, #12]
 8002f1a:	f004 fc60 	bl	80077de <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002f1e:	88fb      	ldrh	r3, [r7, #6]
 8002f20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	f040 8104 	bne.w	8003132 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	461a      	mov	r2, r3
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	781b      	ldrb	r3, [r3, #0]
 8002f34:	009b      	lsls	r3, r3, #2
 8002f36:	4413      	add	r3, r2
 8002f38:	881b      	ldrh	r3, [r3, #0]
 8002f3a:	b29b      	uxth	r3, r3
 8002f3c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f44:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	461a      	mov	r2, r3
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	781b      	ldrb	r3, [r3, #0]
 8002f52:	009b      	lsls	r3, r3, #2
 8002f54:	441a      	add	r2, r3
 8002f56:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002f5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f62:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f6a:	b29b      	uxth	r3, r3
 8002f6c:	8013      	strh	r3, [r2, #0]
 8002f6e:	e0e0      	b.n	8003132 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002f70:	88fb      	ldrh	r3, [r7, #6]
 8002f72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d121      	bne.n	8002fbe <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	461a      	mov	r2, r3
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	781b      	ldrb	r3, [r3, #0]
 8002f84:	009b      	lsls	r3, r3, #2
 8002f86:	4413      	add	r3, r2
 8002f88:	881b      	ldrh	r3, [r3, #0]
 8002f8a:	b29b      	uxth	r3, r3
 8002f8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f94:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	461a      	mov	r2, r3
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	781b      	ldrb	r3, [r3, #0]
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	441a      	add	r2, r3
 8002fa6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002faa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002fae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002fb2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002fb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fba:	b29b      	uxth	r3, r3
 8002fbc:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	f040 80b4 	bne.w	8003132 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	695a      	ldr	r2, [r3, #20]
 8002fce:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002fd2:	441a      	add	r2, r3
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	69da      	ldr	r2, [r3, #28]
 8002fdc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002fe0:	441a      	add	r2, r3
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	6a1a      	ldr	r2, [r3, #32]
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	691b      	ldr	r3, [r3, #16]
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	d309      	bcc.n	8003006 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	691b      	ldr	r3, [r3, #16]
 8002ff6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	6a1a      	ldr	r2, [r3, #32]
 8002ffc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ffe:	1ad2      	subs	r2, r2, r3
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	621a      	str	r2, [r3, #32]
 8003004:	e015      	b.n	8003032 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	6a1b      	ldr	r3, [r3, #32]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d107      	bne.n	800301e <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 800300e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003012:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	2200      	movs	r2, #0
 8003018:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800301c:	e009      	b.n	8003032 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	6a1b      	ldr	r3, [r3, #32]
 8003022:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	2200      	movs	r2, #0
 8003028:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	2200      	movs	r2, #0
 800302e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	667b      	str	r3, [r7, #100]	; 0x64
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	785b      	ldrb	r3, [r3, #1]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d155      	bne.n	80030ec <HAL_PCD_EP_DB_Transmit+0x704>
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800304e:	b29b      	uxth	r3, r3
 8003050:	461a      	mov	r2, r3
 8003052:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003054:	4413      	add	r3, r2
 8003056:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	781b      	ldrb	r3, [r3, #0]
 800305c:	011a      	lsls	r2, r3, #4
 800305e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003060:	4413      	add	r3, r2
 8003062:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003066:	65bb      	str	r3, [r7, #88]	; 0x58
 8003068:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800306a:	2b00      	cmp	r3, #0
 800306c:	d112      	bne.n	8003094 <HAL_PCD_EP_DB_Transmit+0x6ac>
 800306e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003070:	881b      	ldrh	r3, [r3, #0]
 8003072:	b29b      	uxth	r3, r3
 8003074:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003078:	b29a      	uxth	r2, r3
 800307a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800307c:	801a      	strh	r2, [r3, #0]
 800307e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003080:	881b      	ldrh	r3, [r3, #0]
 8003082:	b29b      	uxth	r3, r3
 8003084:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003088:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800308c:	b29a      	uxth	r2, r3
 800308e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003090:	801a      	strh	r2, [r3, #0]
 8003092:	e044      	b.n	800311e <HAL_PCD_EP_DB_Transmit+0x736>
 8003094:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003096:	2b3e      	cmp	r3, #62	; 0x3e
 8003098:	d811      	bhi.n	80030be <HAL_PCD_EP_DB_Transmit+0x6d6>
 800309a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800309c:	085b      	lsrs	r3, r3, #1
 800309e:	657b      	str	r3, [r7, #84]	; 0x54
 80030a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030a2:	f003 0301 	and.w	r3, r3, #1
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d002      	beq.n	80030b0 <HAL_PCD_EP_DB_Transmit+0x6c8>
 80030aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030ac:	3301      	adds	r3, #1
 80030ae:	657b      	str	r3, [r7, #84]	; 0x54
 80030b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030b2:	b29b      	uxth	r3, r3
 80030b4:	029b      	lsls	r3, r3, #10
 80030b6:	b29a      	uxth	r2, r3
 80030b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80030ba:	801a      	strh	r2, [r3, #0]
 80030bc:	e02f      	b.n	800311e <HAL_PCD_EP_DB_Transmit+0x736>
 80030be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030c0:	095b      	lsrs	r3, r3, #5
 80030c2:	657b      	str	r3, [r7, #84]	; 0x54
 80030c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030c6:	f003 031f 	and.w	r3, r3, #31
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d102      	bne.n	80030d4 <HAL_PCD_EP_DB_Transmit+0x6ec>
 80030ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030d0:	3b01      	subs	r3, #1
 80030d2:	657b      	str	r3, [r7, #84]	; 0x54
 80030d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030d6:	b29b      	uxth	r3, r3
 80030d8:	029b      	lsls	r3, r3, #10
 80030da:	b29b      	uxth	r3, r3
 80030dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80030e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80030e4:	b29a      	uxth	r2, r3
 80030e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80030e8:	801a      	strh	r2, [r3, #0]
 80030ea:	e018      	b.n	800311e <HAL_PCD_EP_DB_Transmit+0x736>
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	785b      	ldrb	r3, [r3, #1]
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d114      	bne.n	800311e <HAL_PCD_EP_DB_Transmit+0x736>
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030fc:	b29b      	uxth	r3, r3
 80030fe:	461a      	mov	r2, r3
 8003100:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003102:	4413      	add	r3, r2
 8003104:	667b      	str	r3, [r7, #100]	; 0x64
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	781b      	ldrb	r3, [r3, #0]
 800310a:	011a      	lsls	r2, r3, #4
 800310c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800310e:	4413      	add	r3, r2
 8003110:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003114:	663b      	str	r3, [r7, #96]	; 0x60
 8003116:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003118:	b29a      	uxth	r2, r3
 800311a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800311c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	6818      	ldr	r0, [r3, #0]
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	6959      	ldr	r1, [r3, #20]
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	895a      	ldrh	r2, [r3, #10]
 800312a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800312c:	b29b      	uxth	r3, r3
 800312e:	f002 ff04 	bl	8005f3a <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	461a      	mov	r2, r3
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	781b      	ldrb	r3, [r3, #0]
 800313c:	009b      	lsls	r3, r3, #2
 800313e:	4413      	add	r3, r2
 8003140:	881b      	ldrh	r3, [r3, #0]
 8003142:	b29b      	uxth	r3, r3
 8003144:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003148:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800314c:	823b      	strh	r3, [r7, #16]
 800314e:	8a3b      	ldrh	r3, [r7, #16]
 8003150:	f083 0310 	eor.w	r3, r3, #16
 8003154:	823b      	strh	r3, [r7, #16]
 8003156:	8a3b      	ldrh	r3, [r7, #16]
 8003158:	f083 0320 	eor.w	r3, r3, #32
 800315c:	823b      	strh	r3, [r7, #16]
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	461a      	mov	r2, r3
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	781b      	ldrb	r3, [r3, #0]
 8003168:	009b      	lsls	r3, r3, #2
 800316a:	441a      	add	r2, r3
 800316c:	8a3b      	ldrh	r3, [r7, #16]
 800316e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003172:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003176:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800317a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800317e:	b29b      	uxth	r3, r3
 8003180:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003182:	2300      	movs	r3, #0
}
 8003184:	4618      	mov	r0, r3
 8003186:	3788      	adds	r7, #136	; 0x88
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}

0800318c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800318c:	b480      	push	{r7}
 800318e:	b087      	sub	sp, #28
 8003190:	af00      	add	r7, sp, #0
 8003192:	60f8      	str	r0, [r7, #12]
 8003194:	607b      	str	r3, [r7, #4]
 8003196:	460b      	mov	r3, r1
 8003198:	817b      	strh	r3, [r7, #10]
 800319a:	4613      	mov	r3, r2
 800319c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800319e:	897b      	ldrh	r3, [r7, #10]
 80031a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031a4:	b29b      	uxth	r3, r3
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d00b      	beq.n	80031c2 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031aa:	897b      	ldrh	r3, [r7, #10]
 80031ac:	f003 0307 	and.w	r3, r3, #7
 80031b0:	1c5a      	adds	r2, r3, #1
 80031b2:	4613      	mov	r3, r2
 80031b4:	009b      	lsls	r3, r3, #2
 80031b6:	4413      	add	r3, r2
 80031b8:	00db      	lsls	r3, r3, #3
 80031ba:	68fa      	ldr	r2, [r7, #12]
 80031bc:	4413      	add	r3, r2
 80031be:	617b      	str	r3, [r7, #20]
 80031c0:	e009      	b.n	80031d6 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80031c2:	897a      	ldrh	r2, [r7, #10]
 80031c4:	4613      	mov	r3, r2
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	4413      	add	r3, r2
 80031ca:	00db      	lsls	r3, r3, #3
 80031cc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80031d0:	68fa      	ldr	r2, [r7, #12]
 80031d2:	4413      	add	r3, r2
 80031d4:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80031d6:	893b      	ldrh	r3, [r7, #8]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d107      	bne.n	80031ec <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	2200      	movs	r2, #0
 80031e0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	b29a      	uxth	r2, r3
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	80da      	strh	r2, [r3, #6]
 80031ea:	e00b      	b.n	8003204 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	2201      	movs	r2, #1
 80031f0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	b29a      	uxth	r2, r3
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	0c1b      	lsrs	r3, r3, #16
 80031fe:	b29a      	uxth	r2, r3
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8003204:	2300      	movs	r3, #0
}
 8003206:	4618      	mov	r0, r3
 8003208:	371c      	adds	r7, #28
 800320a:	46bd      	mov	sp, r7
 800320c:	bc80      	pop	{r7}
 800320e:	4770      	bx	lr

08003210 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b086      	sub	sp, #24
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d101      	bne.n	8003222 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	e26c      	b.n	80036fc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 0301 	and.w	r3, r3, #1
 800322a:	2b00      	cmp	r3, #0
 800322c:	f000 8087 	beq.w	800333e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003230:	4b92      	ldr	r3, [pc, #584]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	f003 030c 	and.w	r3, r3, #12
 8003238:	2b04      	cmp	r3, #4
 800323a:	d00c      	beq.n	8003256 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800323c:	4b8f      	ldr	r3, [pc, #572]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	f003 030c 	and.w	r3, r3, #12
 8003244:	2b08      	cmp	r3, #8
 8003246:	d112      	bne.n	800326e <HAL_RCC_OscConfig+0x5e>
 8003248:	4b8c      	ldr	r3, [pc, #560]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003250:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003254:	d10b      	bne.n	800326e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003256:	4b89      	ldr	r3, [pc, #548]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800325e:	2b00      	cmp	r3, #0
 8003260:	d06c      	beq.n	800333c <HAL_RCC_OscConfig+0x12c>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d168      	bne.n	800333c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e246      	b.n	80036fc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003276:	d106      	bne.n	8003286 <HAL_RCC_OscConfig+0x76>
 8003278:	4b80      	ldr	r3, [pc, #512]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a7f      	ldr	r2, [pc, #508]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 800327e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003282:	6013      	str	r3, [r2, #0]
 8003284:	e02e      	b.n	80032e4 <HAL_RCC_OscConfig+0xd4>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d10c      	bne.n	80032a8 <HAL_RCC_OscConfig+0x98>
 800328e:	4b7b      	ldr	r3, [pc, #492]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a7a      	ldr	r2, [pc, #488]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 8003294:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003298:	6013      	str	r3, [r2, #0]
 800329a:	4b78      	ldr	r3, [pc, #480]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a77      	ldr	r2, [pc, #476]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 80032a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032a4:	6013      	str	r3, [r2, #0]
 80032a6:	e01d      	b.n	80032e4 <HAL_RCC_OscConfig+0xd4>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032b0:	d10c      	bne.n	80032cc <HAL_RCC_OscConfig+0xbc>
 80032b2:	4b72      	ldr	r3, [pc, #456]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a71      	ldr	r2, [pc, #452]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 80032b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032bc:	6013      	str	r3, [r2, #0]
 80032be:	4b6f      	ldr	r3, [pc, #444]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a6e      	ldr	r2, [pc, #440]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 80032c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032c8:	6013      	str	r3, [r2, #0]
 80032ca:	e00b      	b.n	80032e4 <HAL_RCC_OscConfig+0xd4>
 80032cc:	4b6b      	ldr	r3, [pc, #428]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a6a      	ldr	r2, [pc, #424]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 80032d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032d6:	6013      	str	r3, [r2, #0]
 80032d8:	4b68      	ldr	r3, [pc, #416]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a67      	ldr	r2, [pc, #412]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 80032de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032e2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d013      	beq.n	8003314 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032ec:	f7fd fa72 	bl	80007d4 <HAL_GetTick>
 80032f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032f2:	e008      	b.n	8003306 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032f4:	f7fd fa6e 	bl	80007d4 <HAL_GetTick>
 80032f8:	4602      	mov	r2, r0
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	1ad3      	subs	r3, r2, r3
 80032fe:	2b64      	cmp	r3, #100	; 0x64
 8003300:	d901      	bls.n	8003306 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003302:	2303      	movs	r3, #3
 8003304:	e1fa      	b.n	80036fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003306:	4b5d      	ldr	r3, [pc, #372]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800330e:	2b00      	cmp	r3, #0
 8003310:	d0f0      	beq.n	80032f4 <HAL_RCC_OscConfig+0xe4>
 8003312:	e014      	b.n	800333e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003314:	f7fd fa5e 	bl	80007d4 <HAL_GetTick>
 8003318:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800331a:	e008      	b.n	800332e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800331c:	f7fd fa5a 	bl	80007d4 <HAL_GetTick>
 8003320:	4602      	mov	r2, r0
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	1ad3      	subs	r3, r2, r3
 8003326:	2b64      	cmp	r3, #100	; 0x64
 8003328:	d901      	bls.n	800332e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800332a:	2303      	movs	r3, #3
 800332c:	e1e6      	b.n	80036fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800332e:	4b53      	ldr	r3, [pc, #332]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003336:	2b00      	cmp	r3, #0
 8003338:	d1f0      	bne.n	800331c <HAL_RCC_OscConfig+0x10c>
 800333a:	e000      	b.n	800333e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800333c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 0302 	and.w	r3, r3, #2
 8003346:	2b00      	cmp	r3, #0
 8003348:	d063      	beq.n	8003412 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800334a:	4b4c      	ldr	r3, [pc, #304]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	f003 030c 	and.w	r3, r3, #12
 8003352:	2b00      	cmp	r3, #0
 8003354:	d00b      	beq.n	800336e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003356:	4b49      	ldr	r3, [pc, #292]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	f003 030c 	and.w	r3, r3, #12
 800335e:	2b08      	cmp	r3, #8
 8003360:	d11c      	bne.n	800339c <HAL_RCC_OscConfig+0x18c>
 8003362:	4b46      	ldr	r3, [pc, #280]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800336a:	2b00      	cmp	r3, #0
 800336c:	d116      	bne.n	800339c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800336e:	4b43      	ldr	r3, [pc, #268]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 0302 	and.w	r3, r3, #2
 8003376:	2b00      	cmp	r3, #0
 8003378:	d005      	beq.n	8003386 <HAL_RCC_OscConfig+0x176>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	691b      	ldr	r3, [r3, #16]
 800337e:	2b01      	cmp	r3, #1
 8003380:	d001      	beq.n	8003386 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e1ba      	b.n	80036fc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003386:	4b3d      	ldr	r3, [pc, #244]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	695b      	ldr	r3, [r3, #20]
 8003392:	00db      	lsls	r3, r3, #3
 8003394:	4939      	ldr	r1, [pc, #228]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 8003396:	4313      	orrs	r3, r2
 8003398:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800339a:	e03a      	b.n	8003412 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	691b      	ldr	r3, [r3, #16]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d020      	beq.n	80033e6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033a4:	4b36      	ldr	r3, [pc, #216]	; (8003480 <HAL_RCC_OscConfig+0x270>)
 80033a6:	2201      	movs	r2, #1
 80033a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033aa:	f7fd fa13 	bl	80007d4 <HAL_GetTick>
 80033ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033b0:	e008      	b.n	80033c4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033b2:	f7fd fa0f 	bl	80007d4 <HAL_GetTick>
 80033b6:	4602      	mov	r2, r0
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	1ad3      	subs	r3, r2, r3
 80033bc:	2b02      	cmp	r3, #2
 80033be:	d901      	bls.n	80033c4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80033c0:	2303      	movs	r3, #3
 80033c2:	e19b      	b.n	80036fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033c4:	4b2d      	ldr	r3, [pc, #180]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f003 0302 	and.w	r3, r3, #2
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d0f0      	beq.n	80033b2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033d0:	4b2a      	ldr	r3, [pc, #168]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	695b      	ldr	r3, [r3, #20]
 80033dc:	00db      	lsls	r3, r3, #3
 80033de:	4927      	ldr	r1, [pc, #156]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 80033e0:	4313      	orrs	r3, r2
 80033e2:	600b      	str	r3, [r1, #0]
 80033e4:	e015      	b.n	8003412 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033e6:	4b26      	ldr	r3, [pc, #152]	; (8003480 <HAL_RCC_OscConfig+0x270>)
 80033e8:	2200      	movs	r2, #0
 80033ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033ec:	f7fd f9f2 	bl	80007d4 <HAL_GetTick>
 80033f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033f2:	e008      	b.n	8003406 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033f4:	f7fd f9ee 	bl	80007d4 <HAL_GetTick>
 80033f8:	4602      	mov	r2, r0
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	1ad3      	subs	r3, r2, r3
 80033fe:	2b02      	cmp	r3, #2
 8003400:	d901      	bls.n	8003406 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003402:	2303      	movs	r3, #3
 8003404:	e17a      	b.n	80036fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003406:	4b1d      	ldr	r3, [pc, #116]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 0302 	and.w	r3, r3, #2
 800340e:	2b00      	cmp	r3, #0
 8003410:	d1f0      	bne.n	80033f4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 0308 	and.w	r3, r3, #8
 800341a:	2b00      	cmp	r3, #0
 800341c:	d03a      	beq.n	8003494 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	699b      	ldr	r3, [r3, #24]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d019      	beq.n	800345a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003426:	4b17      	ldr	r3, [pc, #92]	; (8003484 <HAL_RCC_OscConfig+0x274>)
 8003428:	2201      	movs	r2, #1
 800342a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800342c:	f7fd f9d2 	bl	80007d4 <HAL_GetTick>
 8003430:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003432:	e008      	b.n	8003446 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003434:	f7fd f9ce 	bl	80007d4 <HAL_GetTick>
 8003438:	4602      	mov	r2, r0
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	2b02      	cmp	r3, #2
 8003440:	d901      	bls.n	8003446 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003442:	2303      	movs	r3, #3
 8003444:	e15a      	b.n	80036fc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003446:	4b0d      	ldr	r3, [pc, #52]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 8003448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800344a:	f003 0302 	and.w	r3, r3, #2
 800344e:	2b00      	cmp	r3, #0
 8003450:	d0f0      	beq.n	8003434 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003452:	2001      	movs	r0, #1
 8003454:	f000 faa6 	bl	80039a4 <RCC_Delay>
 8003458:	e01c      	b.n	8003494 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800345a:	4b0a      	ldr	r3, [pc, #40]	; (8003484 <HAL_RCC_OscConfig+0x274>)
 800345c:	2200      	movs	r2, #0
 800345e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003460:	f7fd f9b8 	bl	80007d4 <HAL_GetTick>
 8003464:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003466:	e00f      	b.n	8003488 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003468:	f7fd f9b4 	bl	80007d4 <HAL_GetTick>
 800346c:	4602      	mov	r2, r0
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	2b02      	cmp	r3, #2
 8003474:	d908      	bls.n	8003488 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003476:	2303      	movs	r3, #3
 8003478:	e140      	b.n	80036fc <HAL_RCC_OscConfig+0x4ec>
 800347a:	bf00      	nop
 800347c:	40021000 	.word	0x40021000
 8003480:	42420000 	.word	0x42420000
 8003484:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003488:	4b9e      	ldr	r3, [pc, #632]	; (8003704 <HAL_RCC_OscConfig+0x4f4>)
 800348a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800348c:	f003 0302 	and.w	r3, r3, #2
 8003490:	2b00      	cmp	r3, #0
 8003492:	d1e9      	bne.n	8003468 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f003 0304 	and.w	r3, r3, #4
 800349c:	2b00      	cmp	r3, #0
 800349e:	f000 80a6 	beq.w	80035ee <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034a2:	2300      	movs	r3, #0
 80034a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034a6:	4b97      	ldr	r3, [pc, #604]	; (8003704 <HAL_RCC_OscConfig+0x4f4>)
 80034a8:	69db      	ldr	r3, [r3, #28]
 80034aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d10d      	bne.n	80034ce <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034b2:	4b94      	ldr	r3, [pc, #592]	; (8003704 <HAL_RCC_OscConfig+0x4f4>)
 80034b4:	69db      	ldr	r3, [r3, #28]
 80034b6:	4a93      	ldr	r2, [pc, #588]	; (8003704 <HAL_RCC_OscConfig+0x4f4>)
 80034b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034bc:	61d3      	str	r3, [r2, #28]
 80034be:	4b91      	ldr	r3, [pc, #580]	; (8003704 <HAL_RCC_OscConfig+0x4f4>)
 80034c0:	69db      	ldr	r3, [r3, #28]
 80034c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034c6:	60bb      	str	r3, [r7, #8]
 80034c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034ca:	2301      	movs	r3, #1
 80034cc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034ce:	4b8e      	ldr	r3, [pc, #568]	; (8003708 <HAL_RCC_OscConfig+0x4f8>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d118      	bne.n	800350c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034da:	4b8b      	ldr	r3, [pc, #556]	; (8003708 <HAL_RCC_OscConfig+0x4f8>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a8a      	ldr	r2, [pc, #552]	; (8003708 <HAL_RCC_OscConfig+0x4f8>)
 80034e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034e6:	f7fd f975 	bl	80007d4 <HAL_GetTick>
 80034ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034ec:	e008      	b.n	8003500 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034ee:	f7fd f971 	bl	80007d4 <HAL_GetTick>
 80034f2:	4602      	mov	r2, r0
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	1ad3      	subs	r3, r2, r3
 80034f8:	2b64      	cmp	r3, #100	; 0x64
 80034fa:	d901      	bls.n	8003500 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80034fc:	2303      	movs	r3, #3
 80034fe:	e0fd      	b.n	80036fc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003500:	4b81      	ldr	r3, [pc, #516]	; (8003708 <HAL_RCC_OscConfig+0x4f8>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003508:	2b00      	cmp	r3, #0
 800350a:	d0f0      	beq.n	80034ee <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	68db      	ldr	r3, [r3, #12]
 8003510:	2b01      	cmp	r3, #1
 8003512:	d106      	bne.n	8003522 <HAL_RCC_OscConfig+0x312>
 8003514:	4b7b      	ldr	r3, [pc, #492]	; (8003704 <HAL_RCC_OscConfig+0x4f4>)
 8003516:	6a1b      	ldr	r3, [r3, #32]
 8003518:	4a7a      	ldr	r2, [pc, #488]	; (8003704 <HAL_RCC_OscConfig+0x4f4>)
 800351a:	f043 0301 	orr.w	r3, r3, #1
 800351e:	6213      	str	r3, [r2, #32]
 8003520:	e02d      	b.n	800357e <HAL_RCC_OscConfig+0x36e>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	68db      	ldr	r3, [r3, #12]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d10c      	bne.n	8003544 <HAL_RCC_OscConfig+0x334>
 800352a:	4b76      	ldr	r3, [pc, #472]	; (8003704 <HAL_RCC_OscConfig+0x4f4>)
 800352c:	6a1b      	ldr	r3, [r3, #32]
 800352e:	4a75      	ldr	r2, [pc, #468]	; (8003704 <HAL_RCC_OscConfig+0x4f4>)
 8003530:	f023 0301 	bic.w	r3, r3, #1
 8003534:	6213      	str	r3, [r2, #32]
 8003536:	4b73      	ldr	r3, [pc, #460]	; (8003704 <HAL_RCC_OscConfig+0x4f4>)
 8003538:	6a1b      	ldr	r3, [r3, #32]
 800353a:	4a72      	ldr	r2, [pc, #456]	; (8003704 <HAL_RCC_OscConfig+0x4f4>)
 800353c:	f023 0304 	bic.w	r3, r3, #4
 8003540:	6213      	str	r3, [r2, #32]
 8003542:	e01c      	b.n	800357e <HAL_RCC_OscConfig+0x36e>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	68db      	ldr	r3, [r3, #12]
 8003548:	2b05      	cmp	r3, #5
 800354a:	d10c      	bne.n	8003566 <HAL_RCC_OscConfig+0x356>
 800354c:	4b6d      	ldr	r3, [pc, #436]	; (8003704 <HAL_RCC_OscConfig+0x4f4>)
 800354e:	6a1b      	ldr	r3, [r3, #32]
 8003550:	4a6c      	ldr	r2, [pc, #432]	; (8003704 <HAL_RCC_OscConfig+0x4f4>)
 8003552:	f043 0304 	orr.w	r3, r3, #4
 8003556:	6213      	str	r3, [r2, #32]
 8003558:	4b6a      	ldr	r3, [pc, #424]	; (8003704 <HAL_RCC_OscConfig+0x4f4>)
 800355a:	6a1b      	ldr	r3, [r3, #32]
 800355c:	4a69      	ldr	r2, [pc, #420]	; (8003704 <HAL_RCC_OscConfig+0x4f4>)
 800355e:	f043 0301 	orr.w	r3, r3, #1
 8003562:	6213      	str	r3, [r2, #32]
 8003564:	e00b      	b.n	800357e <HAL_RCC_OscConfig+0x36e>
 8003566:	4b67      	ldr	r3, [pc, #412]	; (8003704 <HAL_RCC_OscConfig+0x4f4>)
 8003568:	6a1b      	ldr	r3, [r3, #32]
 800356a:	4a66      	ldr	r2, [pc, #408]	; (8003704 <HAL_RCC_OscConfig+0x4f4>)
 800356c:	f023 0301 	bic.w	r3, r3, #1
 8003570:	6213      	str	r3, [r2, #32]
 8003572:	4b64      	ldr	r3, [pc, #400]	; (8003704 <HAL_RCC_OscConfig+0x4f4>)
 8003574:	6a1b      	ldr	r3, [r3, #32]
 8003576:	4a63      	ldr	r2, [pc, #396]	; (8003704 <HAL_RCC_OscConfig+0x4f4>)
 8003578:	f023 0304 	bic.w	r3, r3, #4
 800357c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	68db      	ldr	r3, [r3, #12]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d015      	beq.n	80035b2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003586:	f7fd f925 	bl	80007d4 <HAL_GetTick>
 800358a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800358c:	e00a      	b.n	80035a4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800358e:	f7fd f921 	bl	80007d4 <HAL_GetTick>
 8003592:	4602      	mov	r2, r0
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	1ad3      	subs	r3, r2, r3
 8003598:	f241 3288 	movw	r2, #5000	; 0x1388
 800359c:	4293      	cmp	r3, r2
 800359e:	d901      	bls.n	80035a4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80035a0:	2303      	movs	r3, #3
 80035a2:	e0ab      	b.n	80036fc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035a4:	4b57      	ldr	r3, [pc, #348]	; (8003704 <HAL_RCC_OscConfig+0x4f4>)
 80035a6:	6a1b      	ldr	r3, [r3, #32]
 80035a8:	f003 0302 	and.w	r3, r3, #2
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d0ee      	beq.n	800358e <HAL_RCC_OscConfig+0x37e>
 80035b0:	e014      	b.n	80035dc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035b2:	f7fd f90f 	bl	80007d4 <HAL_GetTick>
 80035b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035b8:	e00a      	b.n	80035d0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035ba:	f7fd f90b 	bl	80007d4 <HAL_GetTick>
 80035be:	4602      	mov	r2, r0
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	1ad3      	subs	r3, r2, r3
 80035c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d901      	bls.n	80035d0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80035cc:	2303      	movs	r3, #3
 80035ce:	e095      	b.n	80036fc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035d0:	4b4c      	ldr	r3, [pc, #304]	; (8003704 <HAL_RCC_OscConfig+0x4f4>)
 80035d2:	6a1b      	ldr	r3, [r3, #32]
 80035d4:	f003 0302 	and.w	r3, r3, #2
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d1ee      	bne.n	80035ba <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80035dc:	7dfb      	ldrb	r3, [r7, #23]
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d105      	bne.n	80035ee <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035e2:	4b48      	ldr	r3, [pc, #288]	; (8003704 <HAL_RCC_OscConfig+0x4f4>)
 80035e4:	69db      	ldr	r3, [r3, #28]
 80035e6:	4a47      	ldr	r2, [pc, #284]	; (8003704 <HAL_RCC_OscConfig+0x4f4>)
 80035e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035ec:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	69db      	ldr	r3, [r3, #28]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	f000 8081 	beq.w	80036fa <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035f8:	4b42      	ldr	r3, [pc, #264]	; (8003704 <HAL_RCC_OscConfig+0x4f4>)
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	f003 030c 	and.w	r3, r3, #12
 8003600:	2b08      	cmp	r3, #8
 8003602:	d061      	beq.n	80036c8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	69db      	ldr	r3, [r3, #28]
 8003608:	2b02      	cmp	r3, #2
 800360a:	d146      	bne.n	800369a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800360c:	4b3f      	ldr	r3, [pc, #252]	; (800370c <HAL_RCC_OscConfig+0x4fc>)
 800360e:	2200      	movs	r2, #0
 8003610:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003612:	f7fd f8df 	bl	80007d4 <HAL_GetTick>
 8003616:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003618:	e008      	b.n	800362c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800361a:	f7fd f8db 	bl	80007d4 <HAL_GetTick>
 800361e:	4602      	mov	r2, r0
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	1ad3      	subs	r3, r2, r3
 8003624:	2b02      	cmp	r3, #2
 8003626:	d901      	bls.n	800362c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003628:	2303      	movs	r3, #3
 800362a:	e067      	b.n	80036fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800362c:	4b35      	ldr	r3, [pc, #212]	; (8003704 <HAL_RCC_OscConfig+0x4f4>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003634:	2b00      	cmp	r3, #0
 8003636:	d1f0      	bne.n	800361a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6a1b      	ldr	r3, [r3, #32]
 800363c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003640:	d108      	bne.n	8003654 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003642:	4b30      	ldr	r3, [pc, #192]	; (8003704 <HAL_RCC_OscConfig+0x4f4>)
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	492d      	ldr	r1, [pc, #180]	; (8003704 <HAL_RCC_OscConfig+0x4f4>)
 8003650:	4313      	orrs	r3, r2
 8003652:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003654:	4b2b      	ldr	r3, [pc, #172]	; (8003704 <HAL_RCC_OscConfig+0x4f4>)
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6a19      	ldr	r1, [r3, #32]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003664:	430b      	orrs	r3, r1
 8003666:	4927      	ldr	r1, [pc, #156]	; (8003704 <HAL_RCC_OscConfig+0x4f4>)
 8003668:	4313      	orrs	r3, r2
 800366a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800366c:	4b27      	ldr	r3, [pc, #156]	; (800370c <HAL_RCC_OscConfig+0x4fc>)
 800366e:	2201      	movs	r2, #1
 8003670:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003672:	f7fd f8af 	bl	80007d4 <HAL_GetTick>
 8003676:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003678:	e008      	b.n	800368c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800367a:	f7fd f8ab 	bl	80007d4 <HAL_GetTick>
 800367e:	4602      	mov	r2, r0
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	1ad3      	subs	r3, r2, r3
 8003684:	2b02      	cmp	r3, #2
 8003686:	d901      	bls.n	800368c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003688:	2303      	movs	r3, #3
 800368a:	e037      	b.n	80036fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800368c:	4b1d      	ldr	r3, [pc, #116]	; (8003704 <HAL_RCC_OscConfig+0x4f4>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003694:	2b00      	cmp	r3, #0
 8003696:	d0f0      	beq.n	800367a <HAL_RCC_OscConfig+0x46a>
 8003698:	e02f      	b.n	80036fa <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800369a:	4b1c      	ldr	r3, [pc, #112]	; (800370c <HAL_RCC_OscConfig+0x4fc>)
 800369c:	2200      	movs	r2, #0
 800369e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036a0:	f7fd f898 	bl	80007d4 <HAL_GetTick>
 80036a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036a6:	e008      	b.n	80036ba <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036a8:	f7fd f894 	bl	80007d4 <HAL_GetTick>
 80036ac:	4602      	mov	r2, r0
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	1ad3      	subs	r3, r2, r3
 80036b2:	2b02      	cmp	r3, #2
 80036b4:	d901      	bls.n	80036ba <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80036b6:	2303      	movs	r3, #3
 80036b8:	e020      	b.n	80036fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036ba:	4b12      	ldr	r3, [pc, #72]	; (8003704 <HAL_RCC_OscConfig+0x4f4>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d1f0      	bne.n	80036a8 <HAL_RCC_OscConfig+0x498>
 80036c6:	e018      	b.n	80036fa <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	69db      	ldr	r3, [r3, #28]
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d101      	bne.n	80036d4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	e013      	b.n	80036fc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80036d4:	4b0b      	ldr	r3, [pc, #44]	; (8003704 <HAL_RCC_OscConfig+0x4f4>)
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6a1b      	ldr	r3, [r3, #32]
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d106      	bne.n	80036f6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036f2:	429a      	cmp	r2, r3
 80036f4:	d001      	beq.n	80036fa <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e000      	b.n	80036fc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80036fa:	2300      	movs	r3, #0
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	3718      	adds	r7, #24
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}
 8003704:	40021000 	.word	0x40021000
 8003708:	40007000 	.word	0x40007000
 800370c:	42420060 	.word	0x42420060

08003710 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b084      	sub	sp, #16
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
 8003718:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d101      	bne.n	8003724 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	e0d0      	b.n	80038c6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003724:	4b6a      	ldr	r3, [pc, #424]	; (80038d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f003 0307 	and.w	r3, r3, #7
 800372c:	683a      	ldr	r2, [r7, #0]
 800372e:	429a      	cmp	r2, r3
 8003730:	d910      	bls.n	8003754 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003732:	4b67      	ldr	r3, [pc, #412]	; (80038d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f023 0207 	bic.w	r2, r3, #7
 800373a:	4965      	ldr	r1, [pc, #404]	; (80038d0 <HAL_RCC_ClockConfig+0x1c0>)
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	4313      	orrs	r3, r2
 8003740:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003742:	4b63      	ldr	r3, [pc, #396]	; (80038d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 0307 	and.w	r3, r3, #7
 800374a:	683a      	ldr	r2, [r7, #0]
 800374c:	429a      	cmp	r2, r3
 800374e:	d001      	beq.n	8003754 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003750:	2301      	movs	r3, #1
 8003752:	e0b8      	b.n	80038c6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 0302 	and.w	r3, r3, #2
 800375c:	2b00      	cmp	r3, #0
 800375e:	d020      	beq.n	80037a2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f003 0304 	and.w	r3, r3, #4
 8003768:	2b00      	cmp	r3, #0
 800376a:	d005      	beq.n	8003778 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800376c:	4b59      	ldr	r3, [pc, #356]	; (80038d4 <HAL_RCC_ClockConfig+0x1c4>)
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	4a58      	ldr	r2, [pc, #352]	; (80038d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003772:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003776:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 0308 	and.w	r3, r3, #8
 8003780:	2b00      	cmp	r3, #0
 8003782:	d005      	beq.n	8003790 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003784:	4b53      	ldr	r3, [pc, #332]	; (80038d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	4a52      	ldr	r2, [pc, #328]	; (80038d4 <HAL_RCC_ClockConfig+0x1c4>)
 800378a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800378e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003790:	4b50      	ldr	r3, [pc, #320]	; (80038d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	494d      	ldr	r1, [pc, #308]	; (80038d4 <HAL_RCC_ClockConfig+0x1c4>)
 800379e:	4313      	orrs	r3, r2
 80037a0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 0301 	and.w	r3, r3, #1
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d040      	beq.n	8003830 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d107      	bne.n	80037c6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037b6:	4b47      	ldr	r3, [pc, #284]	; (80038d4 <HAL_RCC_ClockConfig+0x1c4>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d115      	bne.n	80037ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	e07f      	b.n	80038c6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	2b02      	cmp	r3, #2
 80037cc:	d107      	bne.n	80037de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037ce:	4b41      	ldr	r3, [pc, #260]	; (80038d4 <HAL_RCC_ClockConfig+0x1c4>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d109      	bne.n	80037ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	e073      	b.n	80038c6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037de:	4b3d      	ldr	r3, [pc, #244]	; (80038d4 <HAL_RCC_ClockConfig+0x1c4>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f003 0302 	and.w	r3, r3, #2
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d101      	bne.n	80037ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	e06b      	b.n	80038c6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037ee:	4b39      	ldr	r3, [pc, #228]	; (80038d4 <HAL_RCC_ClockConfig+0x1c4>)
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	f023 0203 	bic.w	r2, r3, #3
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	4936      	ldr	r1, [pc, #216]	; (80038d4 <HAL_RCC_ClockConfig+0x1c4>)
 80037fc:	4313      	orrs	r3, r2
 80037fe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003800:	f7fc ffe8 	bl	80007d4 <HAL_GetTick>
 8003804:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003806:	e00a      	b.n	800381e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003808:	f7fc ffe4 	bl	80007d4 <HAL_GetTick>
 800380c:	4602      	mov	r2, r0
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	1ad3      	subs	r3, r2, r3
 8003812:	f241 3288 	movw	r2, #5000	; 0x1388
 8003816:	4293      	cmp	r3, r2
 8003818:	d901      	bls.n	800381e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800381a:	2303      	movs	r3, #3
 800381c:	e053      	b.n	80038c6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800381e:	4b2d      	ldr	r3, [pc, #180]	; (80038d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	f003 020c 	and.w	r2, r3, #12
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	009b      	lsls	r3, r3, #2
 800382c:	429a      	cmp	r2, r3
 800382e:	d1eb      	bne.n	8003808 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003830:	4b27      	ldr	r3, [pc, #156]	; (80038d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f003 0307 	and.w	r3, r3, #7
 8003838:	683a      	ldr	r2, [r7, #0]
 800383a:	429a      	cmp	r2, r3
 800383c:	d210      	bcs.n	8003860 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800383e:	4b24      	ldr	r3, [pc, #144]	; (80038d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f023 0207 	bic.w	r2, r3, #7
 8003846:	4922      	ldr	r1, [pc, #136]	; (80038d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	4313      	orrs	r3, r2
 800384c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800384e:	4b20      	ldr	r3, [pc, #128]	; (80038d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f003 0307 	and.w	r3, r3, #7
 8003856:	683a      	ldr	r2, [r7, #0]
 8003858:	429a      	cmp	r2, r3
 800385a:	d001      	beq.n	8003860 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800385c:	2301      	movs	r3, #1
 800385e:	e032      	b.n	80038c6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f003 0304 	and.w	r3, r3, #4
 8003868:	2b00      	cmp	r3, #0
 800386a:	d008      	beq.n	800387e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800386c:	4b19      	ldr	r3, [pc, #100]	; (80038d4 <HAL_RCC_ClockConfig+0x1c4>)
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	68db      	ldr	r3, [r3, #12]
 8003878:	4916      	ldr	r1, [pc, #88]	; (80038d4 <HAL_RCC_ClockConfig+0x1c4>)
 800387a:	4313      	orrs	r3, r2
 800387c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f003 0308 	and.w	r3, r3, #8
 8003886:	2b00      	cmp	r3, #0
 8003888:	d009      	beq.n	800389e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800388a:	4b12      	ldr	r3, [pc, #72]	; (80038d4 <HAL_RCC_ClockConfig+0x1c4>)
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	691b      	ldr	r3, [r3, #16]
 8003896:	00db      	lsls	r3, r3, #3
 8003898:	490e      	ldr	r1, [pc, #56]	; (80038d4 <HAL_RCC_ClockConfig+0x1c4>)
 800389a:	4313      	orrs	r3, r2
 800389c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800389e:	f000 f821 	bl	80038e4 <HAL_RCC_GetSysClockFreq>
 80038a2:	4602      	mov	r2, r0
 80038a4:	4b0b      	ldr	r3, [pc, #44]	; (80038d4 <HAL_RCC_ClockConfig+0x1c4>)
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	091b      	lsrs	r3, r3, #4
 80038aa:	f003 030f 	and.w	r3, r3, #15
 80038ae:	490a      	ldr	r1, [pc, #40]	; (80038d8 <HAL_RCC_ClockConfig+0x1c8>)
 80038b0:	5ccb      	ldrb	r3, [r1, r3]
 80038b2:	fa22 f303 	lsr.w	r3, r2, r3
 80038b6:	4a09      	ldr	r2, [pc, #36]	; (80038dc <HAL_RCC_ClockConfig+0x1cc>)
 80038b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80038ba:	4b09      	ldr	r3, [pc, #36]	; (80038e0 <HAL_RCC_ClockConfig+0x1d0>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4618      	mov	r0, r3
 80038c0:	f7fc ff46 	bl	8000750 <HAL_InitTick>

  return HAL_OK;
 80038c4:	2300      	movs	r3, #0
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	3710      	adds	r7, #16
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}
 80038ce:	bf00      	nop
 80038d0:	40022000 	.word	0x40022000
 80038d4:	40021000 	.word	0x40021000
 80038d8:	08007d0c 	.word	0x08007d0c
 80038dc:	20000000 	.word	0x20000000
 80038e0:	20000004 	.word	0x20000004

080038e4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038e4:	b490      	push	{r4, r7}
 80038e6:	b08a      	sub	sp, #40	; 0x28
 80038e8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80038ea:	4b2a      	ldr	r3, [pc, #168]	; (8003994 <HAL_RCC_GetSysClockFreq+0xb0>)
 80038ec:	1d3c      	adds	r4, r7, #4
 80038ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80038f0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80038f4:	f240 2301 	movw	r3, #513	; 0x201
 80038f8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80038fa:	2300      	movs	r3, #0
 80038fc:	61fb      	str	r3, [r7, #28]
 80038fe:	2300      	movs	r3, #0
 8003900:	61bb      	str	r3, [r7, #24]
 8003902:	2300      	movs	r3, #0
 8003904:	627b      	str	r3, [r7, #36]	; 0x24
 8003906:	2300      	movs	r3, #0
 8003908:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800390a:	2300      	movs	r3, #0
 800390c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800390e:	4b22      	ldr	r3, [pc, #136]	; (8003998 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003914:	69fb      	ldr	r3, [r7, #28]
 8003916:	f003 030c 	and.w	r3, r3, #12
 800391a:	2b04      	cmp	r3, #4
 800391c:	d002      	beq.n	8003924 <HAL_RCC_GetSysClockFreq+0x40>
 800391e:	2b08      	cmp	r3, #8
 8003920:	d003      	beq.n	800392a <HAL_RCC_GetSysClockFreq+0x46>
 8003922:	e02d      	b.n	8003980 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003924:	4b1d      	ldr	r3, [pc, #116]	; (800399c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003926:	623b      	str	r3, [r7, #32]
      break;
 8003928:	e02d      	b.n	8003986 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800392a:	69fb      	ldr	r3, [r7, #28]
 800392c:	0c9b      	lsrs	r3, r3, #18
 800392e:	f003 030f 	and.w	r3, r3, #15
 8003932:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003936:	4413      	add	r3, r2
 8003938:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800393c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800393e:	69fb      	ldr	r3, [r7, #28]
 8003940:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003944:	2b00      	cmp	r3, #0
 8003946:	d013      	beq.n	8003970 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003948:	4b13      	ldr	r3, [pc, #76]	; (8003998 <HAL_RCC_GetSysClockFreq+0xb4>)
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	0c5b      	lsrs	r3, r3, #17
 800394e:	f003 0301 	and.w	r3, r3, #1
 8003952:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003956:	4413      	add	r3, r2
 8003958:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800395c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	4a0e      	ldr	r2, [pc, #56]	; (800399c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003962:	fb02 f203 	mul.w	r2, r2, r3
 8003966:	69bb      	ldr	r3, [r7, #24]
 8003968:	fbb2 f3f3 	udiv	r3, r2, r3
 800396c:	627b      	str	r3, [r7, #36]	; 0x24
 800396e:	e004      	b.n	800397a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	4a0b      	ldr	r2, [pc, #44]	; (80039a0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003974:	fb02 f303 	mul.w	r3, r2, r3
 8003978:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800397a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800397c:	623b      	str	r3, [r7, #32]
      break;
 800397e:	e002      	b.n	8003986 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003980:	4b06      	ldr	r3, [pc, #24]	; (800399c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003982:	623b      	str	r3, [r7, #32]
      break;
 8003984:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003986:	6a3b      	ldr	r3, [r7, #32]
}
 8003988:	4618      	mov	r0, r3
 800398a:	3728      	adds	r7, #40	; 0x28
 800398c:	46bd      	mov	sp, r7
 800398e:	bc90      	pop	{r4, r7}
 8003990:	4770      	bx	lr
 8003992:	bf00      	nop
 8003994:	08007cb4 	.word	0x08007cb4
 8003998:	40021000 	.word	0x40021000
 800399c:	007a1200 	.word	0x007a1200
 80039a0:	003d0900 	.word	0x003d0900

080039a4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b085      	sub	sp, #20
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80039ac:	4b0a      	ldr	r3, [pc, #40]	; (80039d8 <RCC_Delay+0x34>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a0a      	ldr	r2, [pc, #40]	; (80039dc <RCC_Delay+0x38>)
 80039b2:	fba2 2303 	umull	r2, r3, r2, r3
 80039b6:	0a5b      	lsrs	r3, r3, #9
 80039b8:	687a      	ldr	r2, [r7, #4]
 80039ba:	fb02 f303 	mul.w	r3, r2, r3
 80039be:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80039c0:	bf00      	nop
  }
  while (Delay --);
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	1e5a      	subs	r2, r3, #1
 80039c6:	60fa      	str	r2, [r7, #12]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d1f9      	bne.n	80039c0 <RCC_Delay+0x1c>
}
 80039cc:	bf00      	nop
 80039ce:	bf00      	nop
 80039d0:	3714      	adds	r7, #20
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bc80      	pop	{r7}
 80039d6:	4770      	bx	lr
 80039d8:	20000000 	.word	0x20000000
 80039dc:	10624dd3 	.word	0x10624dd3

080039e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b086      	sub	sp, #24
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80039e8:	2300      	movs	r3, #0
 80039ea:	613b      	str	r3, [r7, #16]
 80039ec:	2300      	movs	r3, #0
 80039ee:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f003 0301 	and.w	r3, r3, #1
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d07d      	beq.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80039fc:	2300      	movs	r3, #0
 80039fe:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a00:	4b4f      	ldr	r3, [pc, #316]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a02:	69db      	ldr	r3, [r3, #28]
 8003a04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d10d      	bne.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a0c:	4b4c      	ldr	r3, [pc, #304]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a0e:	69db      	ldr	r3, [r3, #28]
 8003a10:	4a4b      	ldr	r2, [pc, #300]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a16:	61d3      	str	r3, [r2, #28]
 8003a18:	4b49      	ldr	r3, [pc, #292]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a1a:	69db      	ldr	r3, [r3, #28]
 8003a1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a20:	60bb      	str	r3, [r7, #8]
 8003a22:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a24:	2301      	movs	r3, #1
 8003a26:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a28:	4b46      	ldr	r3, [pc, #280]	; (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d118      	bne.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a34:	4b43      	ldr	r3, [pc, #268]	; (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a42      	ldr	r2, [pc, #264]	; (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a3e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a40:	f7fc fec8 	bl	80007d4 <HAL_GetTick>
 8003a44:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a46:	e008      	b.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a48:	f7fc fec4 	bl	80007d4 <HAL_GetTick>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	1ad3      	subs	r3, r2, r3
 8003a52:	2b64      	cmp	r3, #100	; 0x64
 8003a54:	d901      	bls.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003a56:	2303      	movs	r3, #3
 8003a58:	e06d      	b.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a5a:	4b3a      	ldr	r3, [pc, #232]	; (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d0f0      	beq.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003a66:	4b36      	ldr	r3, [pc, #216]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a68:	6a1b      	ldr	r3, [r3, #32]
 8003a6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a6e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d02e      	beq.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a7e:	68fa      	ldr	r2, [r7, #12]
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d027      	beq.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a84:	4b2e      	ldr	r3, [pc, #184]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a86:	6a1b      	ldr	r3, [r3, #32]
 8003a88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a8c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003a8e:	4b2e      	ldr	r3, [pc, #184]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003a90:	2201      	movs	r2, #1
 8003a92:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003a94:	4b2c      	ldr	r3, [pc, #176]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003a96:	2200      	movs	r2, #0
 8003a98:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003a9a:	4a29      	ldr	r2, [pc, #164]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	f003 0301 	and.w	r3, r3, #1
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d014      	beq.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aaa:	f7fc fe93 	bl	80007d4 <HAL_GetTick>
 8003aae:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ab0:	e00a      	b.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ab2:	f7fc fe8f 	bl	80007d4 <HAL_GetTick>
 8003ab6:	4602      	mov	r2, r0
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	1ad3      	subs	r3, r2, r3
 8003abc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d901      	bls.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003ac4:	2303      	movs	r3, #3
 8003ac6:	e036      	b.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ac8:	4b1d      	ldr	r3, [pc, #116]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003aca:	6a1b      	ldr	r3, [r3, #32]
 8003acc:	f003 0302 	and.w	r3, r3, #2
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d0ee      	beq.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ad4:	4b1a      	ldr	r3, [pc, #104]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ad6:	6a1b      	ldr	r3, [r3, #32]
 8003ad8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	4917      	ldr	r1, [pc, #92]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003ae6:	7dfb      	ldrb	r3, [r7, #23]
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	d105      	bne.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003aec:	4b14      	ldr	r3, [pc, #80]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003aee:	69db      	ldr	r3, [r3, #28]
 8003af0:	4a13      	ldr	r2, [pc, #76]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003af2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003af6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f003 0302 	and.w	r3, r3, #2
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d008      	beq.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003b04:	4b0e      	ldr	r3, [pc, #56]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	490b      	ldr	r1, [pc, #44]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b12:	4313      	orrs	r3, r2
 8003b14:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f003 0310 	and.w	r3, r3, #16
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d008      	beq.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003b22:	4b07      	ldr	r3, [pc, #28]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	68db      	ldr	r3, [r3, #12]
 8003b2e:	4904      	ldr	r1, [pc, #16]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b30:	4313      	orrs	r3, r2
 8003b32:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003b34:	2300      	movs	r3, #0
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	3718      	adds	r7, #24
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}
 8003b3e:	bf00      	nop
 8003b40:	40021000 	.word	0x40021000
 8003b44:	40007000 	.word	0x40007000
 8003b48:	42420440 	.word	0x42420440

08003b4c <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003b4c:	b084      	sub	sp, #16
 8003b4e:	b480      	push	{r7}
 8003b50:	b083      	sub	sp, #12
 8003b52:	af00      	add	r7, sp, #0
 8003b54:	6078      	str	r0, [r7, #4]
 8003b56:	f107 0014 	add.w	r0, r7, #20
 8003b5a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003b5e:	2300      	movs	r3, #0
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	370c      	adds	r7, #12
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bc80      	pop	{r7}
 8003b68:	b004      	add	sp, #16
 8003b6a:	4770      	bx	lr

08003b6c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b085      	sub	sp, #20
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2200      	movs	r2, #0
 8003b78:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003b7c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003b80:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	b29a      	uxth	r2, r3
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003b8c:	2300      	movs	r3, #0
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	3714      	adds	r7, #20
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bc80      	pop	{r7}
 8003b96:	4770      	bx	lr

08003b98 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b085      	sub	sp, #20
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003ba0:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003ba4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003bac:	b29a      	uxth	r2, r3
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	b29b      	uxth	r3, r3
 8003bb2:	43db      	mvns	r3, r3
 8003bb4:	b29b      	uxth	r3, r3
 8003bb6:	4013      	ands	r3, r2
 8003bb8:	b29a      	uxth	r2, r3
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003bc0:	2300      	movs	r3, #0
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	3714      	adds	r7, #20
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bc80      	pop	{r7}
 8003bca:	4770      	bx	lr

08003bcc <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b083      	sub	sp, #12
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
 8003bd4:	460b      	mov	r3, r1
 8003bd6:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8003bd8:	2300      	movs	r3, #0
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	370c      	adds	r7, #12
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bc80      	pop	{r7}
 8003be2:	4770      	bx	lr

08003be4 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003be4:	b084      	sub	sp, #16
 8003be6:	b480      	push	{r7}
 8003be8:	b083      	sub	sp, #12
 8003bea:	af00      	add	r7, sp, #0
 8003bec:	6078      	str	r0, [r7, #4]
 8003bee:	f107 0014 	add.w	r0, r7, #20
 8003bf2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2201      	movs	r2, #1
 8003bfa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2200      	movs	r2, #0
 8003c02:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2200      	movs	r2, #0
 8003c12:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003c16:	2300      	movs	r3, #0
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	370c      	adds	r7, #12
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bc80      	pop	{r7}
 8003c20:	b004      	add	sp, #16
 8003c22:	4770      	bx	lr

08003c24 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b09b      	sub	sp, #108	; 0x6c
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
 8003c2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003c34:	687a      	ldr	r2, [r7, #4]
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	781b      	ldrb	r3, [r3, #0]
 8003c3a:	009b      	lsls	r3, r3, #2
 8003c3c:	4413      	add	r3, r2
 8003c3e:	881b      	ldrh	r3, [r3, #0]
 8003c40:	b29b      	uxth	r3, r3
 8003c42:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8003c46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c4a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	78db      	ldrb	r3, [r3, #3]
 8003c52:	2b03      	cmp	r3, #3
 8003c54:	d81f      	bhi.n	8003c96 <USB_ActivateEndpoint+0x72>
 8003c56:	a201      	add	r2, pc, #4	; (adr r2, 8003c5c <USB_ActivateEndpoint+0x38>)
 8003c58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c5c:	08003c6d 	.word	0x08003c6d
 8003c60:	08003c89 	.word	0x08003c89
 8003c64:	08003c9f 	.word	0x08003c9f
 8003c68:	08003c7b 	.word	0x08003c7b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003c6c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003c70:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c74:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003c78:	e012      	b.n	8003ca0 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8003c7a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003c7e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8003c82:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003c86:	e00b      	b.n	8003ca0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003c88:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003c8c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003c90:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003c94:	e004      	b.n	8003ca0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8003c9c:	e000      	b.n	8003ca0 <USB_ActivateEndpoint+0x7c>
      break;
 8003c9e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8003ca0:	687a      	ldr	r2, [r7, #4]
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	781b      	ldrb	r3, [r3, #0]
 8003ca6:	009b      	lsls	r3, r3, #2
 8003ca8:	441a      	add	r2, r3
 8003caa:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003cae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003cb2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003cb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003cba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cbe:	b29b      	uxth	r3, r3
 8003cc0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003cc2:	687a      	ldr	r2, [r7, #4]
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	781b      	ldrb	r3, [r3, #0]
 8003cc8:	009b      	lsls	r3, r3, #2
 8003cca:	4413      	add	r3, r2
 8003ccc:	881b      	ldrh	r3, [r3, #0]
 8003cce:	b29b      	uxth	r3, r3
 8003cd0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cd8:	b29a      	uxth	r2, r3
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	781b      	ldrb	r3, [r3, #0]
 8003cde:	b29b      	uxth	r3, r3
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8003ce6:	687a      	ldr	r2, [r7, #4]
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	781b      	ldrb	r3, [r3, #0]
 8003cec:	009b      	lsls	r3, r3, #2
 8003cee:	441a      	add	r2, r3
 8003cf0:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8003cf4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003cf8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003cfc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d04:	b29b      	uxth	r3, r3
 8003d06:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	7b1b      	ldrb	r3, [r3, #12]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	f040 8149 	bne.w	8003fa4 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	785b      	ldrb	r3, [r3, #1]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	f000 8084 	beq.w	8003e24 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	617b      	str	r3, [r7, #20]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d26:	b29b      	uxth	r3, r3
 8003d28:	461a      	mov	r2, r3
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	4413      	add	r3, r2
 8003d2e:	617b      	str	r3, [r7, #20]
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	781b      	ldrb	r3, [r3, #0]
 8003d34:	011a      	lsls	r2, r3, #4
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	4413      	add	r3, r2
 8003d3a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003d3e:	613b      	str	r3, [r7, #16]
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	88db      	ldrh	r3, [r3, #6]
 8003d44:	085b      	lsrs	r3, r3, #1
 8003d46:	b29b      	uxth	r3, r3
 8003d48:	005b      	lsls	r3, r3, #1
 8003d4a:	b29a      	uxth	r2, r3
 8003d4c:	693b      	ldr	r3, [r7, #16]
 8003d4e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003d50:	687a      	ldr	r2, [r7, #4]
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	781b      	ldrb	r3, [r3, #0]
 8003d56:	009b      	lsls	r3, r3, #2
 8003d58:	4413      	add	r3, r2
 8003d5a:	881b      	ldrh	r3, [r3, #0]
 8003d5c:	81fb      	strh	r3, [r7, #14]
 8003d5e:	89fb      	ldrh	r3, [r7, #14]
 8003d60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d01b      	beq.n	8003da0 <USB_ActivateEndpoint+0x17c>
 8003d68:	687a      	ldr	r2, [r7, #4]
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	781b      	ldrb	r3, [r3, #0]
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	4413      	add	r3, r2
 8003d72:	881b      	ldrh	r3, [r3, #0]
 8003d74:	b29b      	uxth	r3, r3
 8003d76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d7e:	81bb      	strh	r3, [r7, #12]
 8003d80:	687a      	ldr	r2, [r7, #4]
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	781b      	ldrb	r3, [r3, #0]
 8003d86:	009b      	lsls	r3, r3, #2
 8003d88:	441a      	add	r2, r3
 8003d8a:	89bb      	ldrh	r3, [r7, #12]
 8003d8c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d90:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d98:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003d9c:	b29b      	uxth	r3, r3
 8003d9e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	78db      	ldrb	r3, [r3, #3]
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	d020      	beq.n	8003dea <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003da8:	687a      	ldr	r2, [r7, #4]
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	781b      	ldrb	r3, [r3, #0]
 8003dae:	009b      	lsls	r3, r3, #2
 8003db0:	4413      	add	r3, r2
 8003db2:	881b      	ldrh	r3, [r3, #0]
 8003db4:	b29b      	uxth	r3, r3
 8003db6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003dba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003dbe:	813b      	strh	r3, [r7, #8]
 8003dc0:	893b      	ldrh	r3, [r7, #8]
 8003dc2:	f083 0320 	eor.w	r3, r3, #32
 8003dc6:	813b      	strh	r3, [r7, #8]
 8003dc8:	687a      	ldr	r2, [r7, #4]
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	781b      	ldrb	r3, [r3, #0]
 8003dce:	009b      	lsls	r3, r3, #2
 8003dd0:	441a      	add	r2, r3
 8003dd2:	893b      	ldrh	r3, [r7, #8]
 8003dd4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003dd8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ddc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003de0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003de4:	b29b      	uxth	r3, r3
 8003de6:	8013      	strh	r3, [r2, #0]
 8003de8:	e27f      	b.n	80042ea <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003dea:	687a      	ldr	r2, [r7, #4]
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	781b      	ldrb	r3, [r3, #0]
 8003df0:	009b      	lsls	r3, r3, #2
 8003df2:	4413      	add	r3, r2
 8003df4:	881b      	ldrh	r3, [r3, #0]
 8003df6:	b29b      	uxth	r3, r3
 8003df8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003dfc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e00:	817b      	strh	r3, [r7, #10]
 8003e02:	687a      	ldr	r2, [r7, #4]
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	781b      	ldrb	r3, [r3, #0]
 8003e08:	009b      	lsls	r3, r3, #2
 8003e0a:	441a      	add	r2, r3
 8003e0c:	897b      	ldrh	r3, [r7, #10]
 8003e0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e1e:	b29b      	uxth	r3, r3
 8003e20:	8013      	strh	r3, [r2, #0]
 8003e22:	e262      	b.n	80042ea <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e2e:	b29b      	uxth	r3, r3
 8003e30:	461a      	mov	r2, r3
 8003e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e34:	4413      	add	r3, r2
 8003e36:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	781b      	ldrb	r3, [r3, #0]
 8003e3c:	011a      	lsls	r2, r3, #4
 8003e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e40:	4413      	add	r3, r2
 8003e42:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003e46:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	88db      	ldrh	r3, [r3, #6]
 8003e4c:	085b      	lsrs	r3, r3, #1
 8003e4e:	b29b      	uxth	r3, r3
 8003e50:	005b      	lsls	r3, r3, #1
 8003e52:	b29a      	uxth	r2, r3
 8003e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e56:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	627b      	str	r3, [r7, #36]	; 0x24
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e62:	b29b      	uxth	r3, r3
 8003e64:	461a      	mov	r2, r3
 8003e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e68:	4413      	add	r3, r2
 8003e6a:	627b      	str	r3, [r7, #36]	; 0x24
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	781b      	ldrb	r3, [r3, #0]
 8003e70:	011a      	lsls	r2, r3, #4
 8003e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e74:	4413      	add	r3, r2
 8003e76:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003e7a:	623b      	str	r3, [r7, #32]
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	691b      	ldr	r3, [r3, #16]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d112      	bne.n	8003eaa <USB_ActivateEndpoint+0x286>
 8003e84:	6a3b      	ldr	r3, [r7, #32]
 8003e86:	881b      	ldrh	r3, [r3, #0]
 8003e88:	b29b      	uxth	r3, r3
 8003e8a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003e8e:	b29a      	uxth	r2, r3
 8003e90:	6a3b      	ldr	r3, [r7, #32]
 8003e92:	801a      	strh	r2, [r3, #0]
 8003e94:	6a3b      	ldr	r3, [r7, #32]
 8003e96:	881b      	ldrh	r3, [r3, #0]
 8003e98:	b29b      	uxth	r3, r3
 8003e9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ea2:	b29a      	uxth	r2, r3
 8003ea4:	6a3b      	ldr	r3, [r7, #32]
 8003ea6:	801a      	strh	r2, [r3, #0]
 8003ea8:	e02f      	b.n	8003f0a <USB_ActivateEndpoint+0x2e6>
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	691b      	ldr	r3, [r3, #16]
 8003eae:	2b3e      	cmp	r3, #62	; 0x3e
 8003eb0:	d813      	bhi.n	8003eda <USB_ActivateEndpoint+0x2b6>
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	691b      	ldr	r3, [r3, #16]
 8003eb6:	085b      	lsrs	r3, r3, #1
 8003eb8:	663b      	str	r3, [r7, #96]	; 0x60
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	691b      	ldr	r3, [r3, #16]
 8003ebe:	f003 0301 	and.w	r3, r3, #1
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d002      	beq.n	8003ecc <USB_ActivateEndpoint+0x2a8>
 8003ec6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ec8:	3301      	adds	r3, #1
 8003eca:	663b      	str	r3, [r7, #96]	; 0x60
 8003ecc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ece:	b29b      	uxth	r3, r3
 8003ed0:	029b      	lsls	r3, r3, #10
 8003ed2:	b29a      	uxth	r2, r3
 8003ed4:	6a3b      	ldr	r3, [r7, #32]
 8003ed6:	801a      	strh	r2, [r3, #0]
 8003ed8:	e017      	b.n	8003f0a <USB_ActivateEndpoint+0x2e6>
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	691b      	ldr	r3, [r3, #16]
 8003ede:	095b      	lsrs	r3, r3, #5
 8003ee0:	663b      	str	r3, [r7, #96]	; 0x60
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	691b      	ldr	r3, [r3, #16]
 8003ee6:	f003 031f 	and.w	r3, r3, #31
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d102      	bne.n	8003ef4 <USB_ActivateEndpoint+0x2d0>
 8003eee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ef0:	3b01      	subs	r3, #1
 8003ef2:	663b      	str	r3, [r7, #96]	; 0x60
 8003ef4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ef6:	b29b      	uxth	r3, r3
 8003ef8:	029b      	lsls	r3, r3, #10
 8003efa:	b29b      	uxth	r3, r3
 8003efc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f04:	b29a      	uxth	r2, r3
 8003f06:	6a3b      	ldr	r3, [r7, #32]
 8003f08:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003f0a:	687a      	ldr	r2, [r7, #4]
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	781b      	ldrb	r3, [r3, #0]
 8003f10:	009b      	lsls	r3, r3, #2
 8003f12:	4413      	add	r3, r2
 8003f14:	881b      	ldrh	r3, [r3, #0]
 8003f16:	83fb      	strh	r3, [r7, #30]
 8003f18:	8bfb      	ldrh	r3, [r7, #30]
 8003f1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d01b      	beq.n	8003f5a <USB_ActivateEndpoint+0x336>
 8003f22:	687a      	ldr	r2, [r7, #4]
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	781b      	ldrb	r3, [r3, #0]
 8003f28:	009b      	lsls	r3, r3, #2
 8003f2a:	4413      	add	r3, r2
 8003f2c:	881b      	ldrh	r3, [r3, #0]
 8003f2e:	b29b      	uxth	r3, r3
 8003f30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f38:	83bb      	strh	r3, [r7, #28]
 8003f3a:	687a      	ldr	r2, [r7, #4]
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	781b      	ldrb	r3, [r3, #0]
 8003f40:	009b      	lsls	r3, r3, #2
 8003f42:	441a      	add	r2, r3
 8003f44:	8bbb      	ldrh	r3, [r7, #28]
 8003f46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f4e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003f52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f56:	b29b      	uxth	r3, r3
 8003f58:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003f5a:	687a      	ldr	r2, [r7, #4]
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	781b      	ldrb	r3, [r3, #0]
 8003f60:	009b      	lsls	r3, r3, #2
 8003f62:	4413      	add	r3, r2
 8003f64:	881b      	ldrh	r3, [r3, #0]
 8003f66:	b29b      	uxth	r3, r3
 8003f68:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f70:	837b      	strh	r3, [r7, #26]
 8003f72:	8b7b      	ldrh	r3, [r7, #26]
 8003f74:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003f78:	837b      	strh	r3, [r7, #26]
 8003f7a:	8b7b      	ldrh	r3, [r7, #26]
 8003f7c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003f80:	837b      	strh	r3, [r7, #26]
 8003f82:	687a      	ldr	r2, [r7, #4]
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	781b      	ldrb	r3, [r3, #0]
 8003f88:	009b      	lsls	r3, r3, #2
 8003f8a:	441a      	add	r2, r3
 8003f8c:	8b7b      	ldrh	r3, [r7, #26]
 8003f8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f9e:	b29b      	uxth	r3, r3
 8003fa0:	8013      	strh	r3, [r2, #0]
 8003fa2:	e1a2      	b.n	80042ea <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8003fa4:	687a      	ldr	r2, [r7, #4]
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	781b      	ldrb	r3, [r3, #0]
 8003faa:	009b      	lsls	r3, r3, #2
 8003fac:	4413      	add	r3, r2
 8003fae:	881b      	ldrh	r3, [r3, #0]
 8003fb0:	b29b      	uxth	r3, r3
 8003fb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fba:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8003fbe:	687a      	ldr	r2, [r7, #4]
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	781b      	ldrb	r3, [r3, #0]
 8003fc4:	009b      	lsls	r3, r3, #2
 8003fc6:	441a      	add	r2, r3
 8003fc8:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8003fcc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003fd0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003fd4:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8003fd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fdc:	b29b      	uxth	r3, r3
 8003fde:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	65bb      	str	r3, [r7, #88]	; 0x58
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003fea:	b29b      	uxth	r3, r3
 8003fec:	461a      	mov	r2, r3
 8003fee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003ff0:	4413      	add	r3, r2
 8003ff2:	65bb      	str	r3, [r7, #88]	; 0x58
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	781b      	ldrb	r3, [r3, #0]
 8003ff8:	011a      	lsls	r2, r3, #4
 8003ffa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003ffc:	4413      	add	r3, r2
 8003ffe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004002:	657b      	str	r3, [r7, #84]	; 0x54
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	891b      	ldrh	r3, [r3, #8]
 8004008:	085b      	lsrs	r3, r3, #1
 800400a:	b29b      	uxth	r3, r3
 800400c:	005b      	lsls	r3, r3, #1
 800400e:	b29a      	uxth	r2, r3
 8004010:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004012:	801a      	strh	r2, [r3, #0]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	653b      	str	r3, [r7, #80]	; 0x50
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800401e:	b29b      	uxth	r3, r3
 8004020:	461a      	mov	r2, r3
 8004022:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004024:	4413      	add	r3, r2
 8004026:	653b      	str	r3, [r7, #80]	; 0x50
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	781b      	ldrb	r3, [r3, #0]
 800402c:	011a      	lsls	r2, r3, #4
 800402e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004030:	4413      	add	r3, r2
 8004032:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004036:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	895b      	ldrh	r3, [r3, #10]
 800403c:	085b      	lsrs	r3, r3, #1
 800403e:	b29b      	uxth	r3, r3
 8004040:	005b      	lsls	r3, r3, #1
 8004042:	b29a      	uxth	r2, r3
 8004044:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004046:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	785b      	ldrb	r3, [r3, #1]
 800404c:	2b00      	cmp	r3, #0
 800404e:	f040 8091 	bne.w	8004174 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004052:	687a      	ldr	r2, [r7, #4]
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	781b      	ldrb	r3, [r3, #0]
 8004058:	009b      	lsls	r3, r3, #2
 800405a:	4413      	add	r3, r2
 800405c:	881b      	ldrh	r3, [r3, #0]
 800405e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8004060:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004062:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004066:	2b00      	cmp	r3, #0
 8004068:	d01b      	beq.n	80040a2 <USB_ActivateEndpoint+0x47e>
 800406a:	687a      	ldr	r2, [r7, #4]
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	781b      	ldrb	r3, [r3, #0]
 8004070:	009b      	lsls	r3, r3, #2
 8004072:	4413      	add	r3, r2
 8004074:	881b      	ldrh	r3, [r3, #0]
 8004076:	b29b      	uxth	r3, r3
 8004078:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800407c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004080:	877b      	strh	r3, [r7, #58]	; 0x3a
 8004082:	687a      	ldr	r2, [r7, #4]
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	781b      	ldrb	r3, [r3, #0]
 8004088:	009b      	lsls	r3, r3, #2
 800408a:	441a      	add	r2, r3
 800408c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800408e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004092:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004096:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800409a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800409e:	b29b      	uxth	r3, r3
 80040a0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80040a2:	687a      	ldr	r2, [r7, #4]
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	781b      	ldrb	r3, [r3, #0]
 80040a8:	009b      	lsls	r3, r3, #2
 80040aa:	4413      	add	r3, r2
 80040ac:	881b      	ldrh	r3, [r3, #0]
 80040ae:	873b      	strh	r3, [r7, #56]	; 0x38
 80040b0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80040b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d01b      	beq.n	80040f2 <USB_ActivateEndpoint+0x4ce>
 80040ba:	687a      	ldr	r2, [r7, #4]
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	781b      	ldrb	r3, [r3, #0]
 80040c0:	009b      	lsls	r3, r3, #2
 80040c2:	4413      	add	r3, r2
 80040c4:	881b      	ldrh	r3, [r3, #0]
 80040c6:	b29b      	uxth	r3, r3
 80040c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040d0:	86fb      	strh	r3, [r7, #54]	; 0x36
 80040d2:	687a      	ldr	r2, [r7, #4]
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	781b      	ldrb	r3, [r3, #0]
 80040d8:	009b      	lsls	r3, r3, #2
 80040da:	441a      	add	r2, r3
 80040dc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80040de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040ea:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80040ee:	b29b      	uxth	r3, r3
 80040f0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80040f2:	687a      	ldr	r2, [r7, #4]
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	781b      	ldrb	r3, [r3, #0]
 80040f8:	009b      	lsls	r3, r3, #2
 80040fa:	4413      	add	r3, r2
 80040fc:	881b      	ldrh	r3, [r3, #0]
 80040fe:	b29b      	uxth	r3, r3
 8004100:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004104:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004108:	86bb      	strh	r3, [r7, #52]	; 0x34
 800410a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800410c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004110:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004112:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004114:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004118:	86bb      	strh	r3, [r7, #52]	; 0x34
 800411a:	687a      	ldr	r2, [r7, #4]
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	781b      	ldrb	r3, [r3, #0]
 8004120:	009b      	lsls	r3, r3, #2
 8004122:	441a      	add	r2, r3
 8004124:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004126:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800412a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800412e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004132:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004136:	b29b      	uxth	r3, r3
 8004138:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800413a:	687a      	ldr	r2, [r7, #4]
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	781b      	ldrb	r3, [r3, #0]
 8004140:	009b      	lsls	r3, r3, #2
 8004142:	4413      	add	r3, r2
 8004144:	881b      	ldrh	r3, [r3, #0]
 8004146:	b29b      	uxth	r3, r3
 8004148:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800414c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004150:	867b      	strh	r3, [r7, #50]	; 0x32
 8004152:	687a      	ldr	r2, [r7, #4]
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	781b      	ldrb	r3, [r3, #0]
 8004158:	009b      	lsls	r3, r3, #2
 800415a:	441a      	add	r2, r3
 800415c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800415e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004162:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004166:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800416a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800416e:	b29b      	uxth	r3, r3
 8004170:	8013      	strh	r3, [r2, #0]
 8004172:	e0ba      	b.n	80042ea <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004174:	687a      	ldr	r2, [r7, #4]
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	781b      	ldrb	r3, [r3, #0]
 800417a:	009b      	lsls	r3, r3, #2
 800417c:	4413      	add	r3, r2
 800417e:	881b      	ldrh	r3, [r3, #0]
 8004180:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004184:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004188:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800418c:	2b00      	cmp	r3, #0
 800418e:	d01d      	beq.n	80041cc <USB_ActivateEndpoint+0x5a8>
 8004190:	687a      	ldr	r2, [r7, #4]
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	781b      	ldrb	r3, [r3, #0]
 8004196:	009b      	lsls	r3, r3, #2
 8004198:	4413      	add	r3, r2
 800419a:	881b      	ldrh	r3, [r3, #0]
 800419c:	b29b      	uxth	r3, r3
 800419e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041a6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80041aa:	687a      	ldr	r2, [r7, #4]
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	781b      	ldrb	r3, [r3, #0]
 80041b0:	009b      	lsls	r3, r3, #2
 80041b2:	441a      	add	r2, r3
 80041b4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80041b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80041c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041c8:	b29b      	uxth	r3, r3
 80041ca:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80041cc:	687a      	ldr	r2, [r7, #4]
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	781b      	ldrb	r3, [r3, #0]
 80041d2:	009b      	lsls	r3, r3, #2
 80041d4:	4413      	add	r3, r2
 80041d6:	881b      	ldrh	r3, [r3, #0]
 80041d8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80041dc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80041e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d01d      	beq.n	8004224 <USB_ActivateEndpoint+0x600>
 80041e8:	687a      	ldr	r2, [r7, #4]
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	781b      	ldrb	r3, [r3, #0]
 80041ee:	009b      	lsls	r3, r3, #2
 80041f0:	4413      	add	r3, r2
 80041f2:	881b      	ldrh	r3, [r3, #0]
 80041f4:	b29b      	uxth	r3, r3
 80041f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041fe:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004202:	687a      	ldr	r2, [r7, #4]
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	781b      	ldrb	r3, [r3, #0]
 8004208:	009b      	lsls	r3, r3, #2
 800420a:	441a      	add	r2, r3
 800420c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004210:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004214:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004218:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800421c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004220:	b29b      	uxth	r3, r3
 8004222:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	78db      	ldrb	r3, [r3, #3]
 8004228:	2b01      	cmp	r3, #1
 800422a:	d024      	beq.n	8004276 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800422c:	687a      	ldr	r2, [r7, #4]
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	781b      	ldrb	r3, [r3, #0]
 8004232:	009b      	lsls	r3, r3, #2
 8004234:	4413      	add	r3, r2
 8004236:	881b      	ldrh	r3, [r3, #0]
 8004238:	b29b      	uxth	r3, r3
 800423a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800423e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004242:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004246:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800424a:	f083 0320 	eor.w	r3, r3, #32
 800424e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004252:	687a      	ldr	r2, [r7, #4]
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	781b      	ldrb	r3, [r3, #0]
 8004258:	009b      	lsls	r3, r3, #2
 800425a:	441a      	add	r2, r3
 800425c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004260:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004264:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004268:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800426c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004270:	b29b      	uxth	r3, r3
 8004272:	8013      	strh	r3, [r2, #0]
 8004274:	e01d      	b.n	80042b2 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004276:	687a      	ldr	r2, [r7, #4]
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	781b      	ldrb	r3, [r3, #0]
 800427c:	009b      	lsls	r3, r3, #2
 800427e:	4413      	add	r3, r2
 8004280:	881b      	ldrh	r3, [r3, #0]
 8004282:	b29b      	uxth	r3, r3
 8004284:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004288:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800428c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004290:	687a      	ldr	r2, [r7, #4]
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	781b      	ldrb	r3, [r3, #0]
 8004296:	009b      	lsls	r3, r3, #2
 8004298:	441a      	add	r2, r3
 800429a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800429e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042ae:	b29b      	uxth	r3, r3
 80042b0:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80042b2:	687a      	ldr	r2, [r7, #4]
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	781b      	ldrb	r3, [r3, #0]
 80042b8:	009b      	lsls	r3, r3, #2
 80042ba:	4413      	add	r3, r2
 80042bc:	881b      	ldrh	r3, [r3, #0]
 80042be:	b29b      	uxth	r3, r3
 80042c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80042c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042c8:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80042ca:	687a      	ldr	r2, [r7, #4]
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	781b      	ldrb	r3, [r3, #0]
 80042d0:	009b      	lsls	r3, r3, #2
 80042d2:	441a      	add	r2, r3
 80042d4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80042d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042e6:	b29b      	uxth	r3, r3
 80042e8:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80042ea:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	376c      	adds	r7, #108	; 0x6c
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bc80      	pop	{r7}
 80042f6:	4770      	bx	lr

080042f8 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b08d      	sub	sp, #52	; 0x34
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
 8004300:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	7b1b      	ldrb	r3, [r3, #12]
 8004306:	2b00      	cmp	r3, #0
 8004308:	f040 808e 	bne.w	8004428 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	785b      	ldrb	r3, [r3, #1]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d044      	beq.n	800439e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004314:	687a      	ldr	r2, [r7, #4]
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	781b      	ldrb	r3, [r3, #0]
 800431a:	009b      	lsls	r3, r3, #2
 800431c:	4413      	add	r3, r2
 800431e:	881b      	ldrh	r3, [r3, #0]
 8004320:	81bb      	strh	r3, [r7, #12]
 8004322:	89bb      	ldrh	r3, [r7, #12]
 8004324:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004328:	2b00      	cmp	r3, #0
 800432a:	d01b      	beq.n	8004364 <USB_DeactivateEndpoint+0x6c>
 800432c:	687a      	ldr	r2, [r7, #4]
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	781b      	ldrb	r3, [r3, #0]
 8004332:	009b      	lsls	r3, r3, #2
 8004334:	4413      	add	r3, r2
 8004336:	881b      	ldrh	r3, [r3, #0]
 8004338:	b29b      	uxth	r3, r3
 800433a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800433e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004342:	817b      	strh	r3, [r7, #10]
 8004344:	687a      	ldr	r2, [r7, #4]
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	781b      	ldrb	r3, [r3, #0]
 800434a:	009b      	lsls	r3, r3, #2
 800434c:	441a      	add	r2, r3
 800434e:	897b      	ldrh	r3, [r7, #10]
 8004350:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004354:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004358:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800435c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004360:	b29b      	uxth	r3, r3
 8004362:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004364:	687a      	ldr	r2, [r7, #4]
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	781b      	ldrb	r3, [r3, #0]
 800436a:	009b      	lsls	r3, r3, #2
 800436c:	4413      	add	r3, r2
 800436e:	881b      	ldrh	r3, [r3, #0]
 8004370:	b29b      	uxth	r3, r3
 8004372:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004376:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800437a:	813b      	strh	r3, [r7, #8]
 800437c:	687a      	ldr	r2, [r7, #4]
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	781b      	ldrb	r3, [r3, #0]
 8004382:	009b      	lsls	r3, r3, #2
 8004384:	441a      	add	r2, r3
 8004386:	893b      	ldrh	r3, [r7, #8]
 8004388:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800438c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004390:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004394:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004398:	b29b      	uxth	r3, r3
 800439a:	8013      	strh	r3, [r2, #0]
 800439c:	e192      	b.n	80046c4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800439e:	687a      	ldr	r2, [r7, #4]
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	781b      	ldrb	r3, [r3, #0]
 80043a4:	009b      	lsls	r3, r3, #2
 80043a6:	4413      	add	r3, r2
 80043a8:	881b      	ldrh	r3, [r3, #0]
 80043aa:	827b      	strh	r3, [r7, #18]
 80043ac:	8a7b      	ldrh	r3, [r7, #18]
 80043ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d01b      	beq.n	80043ee <USB_DeactivateEndpoint+0xf6>
 80043b6:	687a      	ldr	r2, [r7, #4]
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	781b      	ldrb	r3, [r3, #0]
 80043bc:	009b      	lsls	r3, r3, #2
 80043be:	4413      	add	r3, r2
 80043c0:	881b      	ldrh	r3, [r3, #0]
 80043c2:	b29b      	uxth	r3, r3
 80043c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043cc:	823b      	strh	r3, [r7, #16]
 80043ce:	687a      	ldr	r2, [r7, #4]
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	781b      	ldrb	r3, [r3, #0]
 80043d4:	009b      	lsls	r3, r3, #2
 80043d6:	441a      	add	r2, r3
 80043d8:	8a3b      	ldrh	r3, [r7, #16]
 80043da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043e2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80043e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043ea:	b29b      	uxth	r3, r3
 80043ec:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80043ee:	687a      	ldr	r2, [r7, #4]
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	781b      	ldrb	r3, [r3, #0]
 80043f4:	009b      	lsls	r3, r3, #2
 80043f6:	4413      	add	r3, r2
 80043f8:	881b      	ldrh	r3, [r3, #0]
 80043fa:	b29b      	uxth	r3, r3
 80043fc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004400:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004404:	81fb      	strh	r3, [r7, #14]
 8004406:	687a      	ldr	r2, [r7, #4]
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	781b      	ldrb	r3, [r3, #0]
 800440c:	009b      	lsls	r3, r3, #2
 800440e:	441a      	add	r2, r3
 8004410:	89fb      	ldrh	r3, [r7, #14]
 8004412:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004416:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800441a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800441e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004422:	b29b      	uxth	r3, r3
 8004424:	8013      	strh	r3, [r2, #0]
 8004426:	e14d      	b.n	80046c4 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	785b      	ldrb	r3, [r3, #1]
 800442c:	2b00      	cmp	r3, #0
 800442e:	f040 80a5 	bne.w	800457c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004432:	687a      	ldr	r2, [r7, #4]
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	781b      	ldrb	r3, [r3, #0]
 8004438:	009b      	lsls	r3, r3, #2
 800443a:	4413      	add	r3, r2
 800443c:	881b      	ldrh	r3, [r3, #0]
 800443e:	843b      	strh	r3, [r7, #32]
 8004440:	8c3b      	ldrh	r3, [r7, #32]
 8004442:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004446:	2b00      	cmp	r3, #0
 8004448:	d01b      	beq.n	8004482 <USB_DeactivateEndpoint+0x18a>
 800444a:	687a      	ldr	r2, [r7, #4]
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	781b      	ldrb	r3, [r3, #0]
 8004450:	009b      	lsls	r3, r3, #2
 8004452:	4413      	add	r3, r2
 8004454:	881b      	ldrh	r3, [r3, #0]
 8004456:	b29b      	uxth	r3, r3
 8004458:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800445c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004460:	83fb      	strh	r3, [r7, #30]
 8004462:	687a      	ldr	r2, [r7, #4]
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	781b      	ldrb	r3, [r3, #0]
 8004468:	009b      	lsls	r3, r3, #2
 800446a:	441a      	add	r2, r3
 800446c:	8bfb      	ldrh	r3, [r7, #30]
 800446e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004472:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004476:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800447a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800447e:	b29b      	uxth	r3, r3
 8004480:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004482:	687a      	ldr	r2, [r7, #4]
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	781b      	ldrb	r3, [r3, #0]
 8004488:	009b      	lsls	r3, r3, #2
 800448a:	4413      	add	r3, r2
 800448c:	881b      	ldrh	r3, [r3, #0]
 800448e:	83bb      	strh	r3, [r7, #28]
 8004490:	8bbb      	ldrh	r3, [r7, #28]
 8004492:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004496:	2b00      	cmp	r3, #0
 8004498:	d01b      	beq.n	80044d2 <USB_DeactivateEndpoint+0x1da>
 800449a:	687a      	ldr	r2, [r7, #4]
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	781b      	ldrb	r3, [r3, #0]
 80044a0:	009b      	lsls	r3, r3, #2
 80044a2:	4413      	add	r3, r2
 80044a4:	881b      	ldrh	r3, [r3, #0]
 80044a6:	b29b      	uxth	r3, r3
 80044a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044b0:	837b      	strh	r3, [r7, #26]
 80044b2:	687a      	ldr	r2, [r7, #4]
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	781b      	ldrb	r3, [r3, #0]
 80044b8:	009b      	lsls	r3, r3, #2
 80044ba:	441a      	add	r2, r3
 80044bc:	8b7b      	ldrh	r3, [r7, #26]
 80044be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044ca:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80044ce:	b29b      	uxth	r3, r3
 80044d0:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80044d2:	687a      	ldr	r2, [r7, #4]
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	781b      	ldrb	r3, [r3, #0]
 80044d8:	009b      	lsls	r3, r3, #2
 80044da:	4413      	add	r3, r2
 80044dc:	881b      	ldrh	r3, [r3, #0]
 80044de:	b29b      	uxth	r3, r3
 80044e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044e8:	833b      	strh	r3, [r7, #24]
 80044ea:	687a      	ldr	r2, [r7, #4]
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	781b      	ldrb	r3, [r3, #0]
 80044f0:	009b      	lsls	r3, r3, #2
 80044f2:	441a      	add	r2, r3
 80044f4:	8b3b      	ldrh	r3, [r7, #24]
 80044f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004502:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004506:	b29b      	uxth	r3, r3
 8004508:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800450a:	687a      	ldr	r2, [r7, #4]
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	781b      	ldrb	r3, [r3, #0]
 8004510:	009b      	lsls	r3, r3, #2
 8004512:	4413      	add	r3, r2
 8004514:	881b      	ldrh	r3, [r3, #0]
 8004516:	b29b      	uxth	r3, r3
 8004518:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800451c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004520:	82fb      	strh	r3, [r7, #22]
 8004522:	687a      	ldr	r2, [r7, #4]
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	781b      	ldrb	r3, [r3, #0]
 8004528:	009b      	lsls	r3, r3, #2
 800452a:	441a      	add	r2, r3
 800452c:	8afb      	ldrh	r3, [r7, #22]
 800452e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004532:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004536:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800453a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800453e:	b29b      	uxth	r3, r3
 8004540:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004542:	687a      	ldr	r2, [r7, #4]
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	781b      	ldrb	r3, [r3, #0]
 8004548:	009b      	lsls	r3, r3, #2
 800454a:	4413      	add	r3, r2
 800454c:	881b      	ldrh	r3, [r3, #0]
 800454e:	b29b      	uxth	r3, r3
 8004550:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004554:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004558:	82bb      	strh	r3, [r7, #20]
 800455a:	687a      	ldr	r2, [r7, #4]
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	781b      	ldrb	r3, [r3, #0]
 8004560:	009b      	lsls	r3, r3, #2
 8004562:	441a      	add	r2, r3
 8004564:	8abb      	ldrh	r3, [r7, #20]
 8004566:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800456a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800456e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004572:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004576:	b29b      	uxth	r3, r3
 8004578:	8013      	strh	r3, [r2, #0]
 800457a:	e0a3      	b.n	80046c4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800457c:	687a      	ldr	r2, [r7, #4]
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	781b      	ldrb	r3, [r3, #0]
 8004582:	009b      	lsls	r3, r3, #2
 8004584:	4413      	add	r3, r2
 8004586:	881b      	ldrh	r3, [r3, #0]
 8004588:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800458a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800458c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004590:	2b00      	cmp	r3, #0
 8004592:	d01b      	beq.n	80045cc <USB_DeactivateEndpoint+0x2d4>
 8004594:	687a      	ldr	r2, [r7, #4]
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	781b      	ldrb	r3, [r3, #0]
 800459a:	009b      	lsls	r3, r3, #2
 800459c:	4413      	add	r3, r2
 800459e:	881b      	ldrh	r3, [r3, #0]
 80045a0:	b29b      	uxth	r3, r3
 80045a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045aa:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80045ac:	687a      	ldr	r2, [r7, #4]
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	781b      	ldrb	r3, [r3, #0]
 80045b2:	009b      	lsls	r3, r3, #2
 80045b4:	441a      	add	r2, r3
 80045b6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80045b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80045c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045c8:	b29b      	uxth	r3, r3
 80045ca:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80045cc:	687a      	ldr	r2, [r7, #4]
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	781b      	ldrb	r3, [r3, #0]
 80045d2:	009b      	lsls	r3, r3, #2
 80045d4:	4413      	add	r3, r2
 80045d6:	881b      	ldrh	r3, [r3, #0]
 80045d8:	857b      	strh	r3, [r7, #42]	; 0x2a
 80045da:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80045dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d01b      	beq.n	800461c <USB_DeactivateEndpoint+0x324>
 80045e4:	687a      	ldr	r2, [r7, #4]
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	781b      	ldrb	r3, [r3, #0]
 80045ea:	009b      	lsls	r3, r3, #2
 80045ec:	4413      	add	r3, r2
 80045ee:	881b      	ldrh	r3, [r3, #0]
 80045f0:	b29b      	uxth	r3, r3
 80045f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045fa:	853b      	strh	r3, [r7, #40]	; 0x28
 80045fc:	687a      	ldr	r2, [r7, #4]
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	781b      	ldrb	r3, [r3, #0]
 8004602:	009b      	lsls	r3, r3, #2
 8004604:	441a      	add	r2, r3
 8004606:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004608:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800460c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004610:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004614:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004618:	b29b      	uxth	r3, r3
 800461a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800461c:	687a      	ldr	r2, [r7, #4]
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	781b      	ldrb	r3, [r3, #0]
 8004622:	009b      	lsls	r3, r3, #2
 8004624:	4413      	add	r3, r2
 8004626:	881b      	ldrh	r3, [r3, #0]
 8004628:	b29b      	uxth	r3, r3
 800462a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800462e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004632:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004634:	687a      	ldr	r2, [r7, #4]
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	781b      	ldrb	r3, [r3, #0]
 800463a:	009b      	lsls	r3, r3, #2
 800463c:	441a      	add	r2, r3
 800463e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004640:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004644:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004648:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800464c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004650:	b29b      	uxth	r3, r3
 8004652:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004654:	687a      	ldr	r2, [r7, #4]
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	781b      	ldrb	r3, [r3, #0]
 800465a:	009b      	lsls	r3, r3, #2
 800465c:	4413      	add	r3, r2
 800465e:	881b      	ldrh	r3, [r3, #0]
 8004660:	b29b      	uxth	r3, r3
 8004662:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004666:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800466a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800466c:	687a      	ldr	r2, [r7, #4]
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	781b      	ldrb	r3, [r3, #0]
 8004672:	009b      	lsls	r3, r3, #2
 8004674:	441a      	add	r2, r3
 8004676:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004678:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800467c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004680:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004684:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004688:	b29b      	uxth	r3, r3
 800468a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800468c:	687a      	ldr	r2, [r7, #4]
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	781b      	ldrb	r3, [r3, #0]
 8004692:	009b      	lsls	r3, r3, #2
 8004694:	4413      	add	r3, r2
 8004696:	881b      	ldrh	r3, [r3, #0]
 8004698:	b29b      	uxth	r3, r3
 800469a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800469e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046a2:	847b      	strh	r3, [r7, #34]	; 0x22
 80046a4:	687a      	ldr	r2, [r7, #4]
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	781b      	ldrb	r3, [r3, #0]
 80046aa:	009b      	lsls	r3, r3, #2
 80046ac:	441a      	add	r2, r3
 80046ae:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80046b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046c0:	b29b      	uxth	r3, r3
 80046c2:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80046c4:	2300      	movs	r3, #0
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	3734      	adds	r7, #52	; 0x34
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bc80      	pop	{r7}
 80046ce:	4770      	bx	lr

080046d0 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b0cc      	sub	sp, #304	; 0x130
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	1d3b      	adds	r3, r7, #4
 80046d8:	6018      	str	r0, [r3, #0]
 80046da:	463b      	mov	r3, r7
 80046dc:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80046de:	463b      	mov	r3, r7
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	785b      	ldrb	r3, [r3, #1]
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	f040 872e 	bne.w	8005546 <USB_EPStartXfer+0xe76>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80046ea:	463b      	mov	r3, r7
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	699a      	ldr	r2, [r3, #24]
 80046f0:	463b      	mov	r3, r7
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	691b      	ldr	r3, [r3, #16]
 80046f6:	429a      	cmp	r2, r3
 80046f8:	d905      	bls.n	8004706 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 80046fa:	463b      	mov	r3, r7
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	691b      	ldr	r3, [r3, #16]
 8004700:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8004704:	e004      	b.n	8004710 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8004706:	463b      	mov	r3, r7
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	699b      	ldr	r3, [r3, #24]
 800470c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004710:	463b      	mov	r3, r7
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	7b1b      	ldrb	r3, [r3, #12]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d134      	bne.n	8004784 <USB_EPStartXfer+0xb4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800471a:	463b      	mov	r3, r7
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	6959      	ldr	r1, [r3, #20]
 8004720:	463b      	mov	r3, r7
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	88da      	ldrh	r2, [r3, #6]
 8004726:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800472a:	b29b      	uxth	r3, r3
 800472c:	1d38      	adds	r0, r7, #4
 800472e:	6800      	ldr	r0, [r0, #0]
 8004730:	f001 fc03 	bl	8005f3a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004734:	f107 0310 	add.w	r3, r7, #16
 8004738:	1d3a      	adds	r2, r7, #4
 800473a:	6812      	ldr	r2, [r2, #0]
 800473c:	601a      	str	r2, [r3, #0]
 800473e:	1d3b      	adds	r3, r7, #4
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004746:	b29b      	uxth	r3, r3
 8004748:	4619      	mov	r1, r3
 800474a:	f107 0310 	add.w	r3, r7, #16
 800474e:	f107 0210 	add.w	r2, r7, #16
 8004752:	6812      	ldr	r2, [r2, #0]
 8004754:	440a      	add	r2, r1
 8004756:	601a      	str	r2, [r3, #0]
 8004758:	463b      	mov	r3, r7
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	781b      	ldrb	r3, [r3, #0]
 800475e:	011a      	lsls	r2, r3, #4
 8004760:	f107 0310 	add.w	r3, r7, #16
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4413      	add	r3, r2
 8004768:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800476c:	f107 030c 	add.w	r3, r7, #12
 8004770:	601a      	str	r2, [r3, #0]
 8004772:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004776:	b29a      	uxth	r2, r3
 8004778:	f107 030c 	add.w	r3, r7, #12
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	801a      	strh	r2, [r3, #0]
 8004780:	f000 beac 	b.w	80054dc <USB_EPStartXfer+0xe0c>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004784:	463b      	mov	r3, r7
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	78db      	ldrb	r3, [r3, #3]
 800478a:	2b02      	cmp	r3, #2
 800478c:	f040 838c 	bne.w	8004ea8 <USB_EPStartXfer+0x7d8>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004790:	463b      	mov	r3, r7
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	6a1a      	ldr	r2, [r3, #32]
 8004796:	463b      	mov	r3, r7
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	691b      	ldr	r3, [r3, #16]
 800479c:	429a      	cmp	r2, r3
 800479e:	f240 8330 	bls.w	8004e02 <USB_EPStartXfer+0x732>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 80047a2:	1d3b      	adds	r3, r7, #4
 80047a4:	681a      	ldr	r2, [r3, #0]
 80047a6:	463b      	mov	r3, r7
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	781b      	ldrb	r3, [r3, #0]
 80047ac:	009b      	lsls	r3, r3, #2
 80047ae:	4413      	add	r3, r2
 80047b0:	881b      	ldrh	r3, [r3, #0]
 80047b2:	b29b      	uxth	r3, r3
 80047b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047bc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80047c0:	1d3b      	adds	r3, r7, #4
 80047c2:	681a      	ldr	r2, [r3, #0]
 80047c4:	463b      	mov	r3, r7
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	781b      	ldrb	r3, [r3, #0]
 80047ca:	009b      	lsls	r3, r3, #2
 80047cc:	441a      	add	r2, r3
 80047ce:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80047d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047da:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80047de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047e2:	b29b      	uxth	r3, r3
 80047e4:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80047e6:	463b      	mov	r3, r7
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	6a1a      	ldr	r2, [r3, #32]
 80047ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80047f0:	1ad2      	subs	r2, r2, r3
 80047f2:	463b      	mov	r3, r7
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80047f8:	1d3b      	adds	r3, r7, #4
 80047fa:	681a      	ldr	r2, [r3, #0]
 80047fc:	463b      	mov	r3, r7
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	781b      	ldrb	r3, [r3, #0]
 8004802:	009b      	lsls	r3, r3, #2
 8004804:	4413      	add	r3, r2
 8004806:	881b      	ldrh	r3, [r3, #0]
 8004808:	b29b      	uxth	r3, r3
 800480a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800480e:	2b00      	cmp	r3, #0
 8004810:	f000 819e 	beq.w	8004b50 <USB_EPStartXfer+0x480>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004814:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004818:	1d3a      	adds	r2, r7, #4
 800481a:	6812      	ldr	r2, [r2, #0]
 800481c:	601a      	str	r2, [r3, #0]
 800481e:	463b      	mov	r3, r7
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	785b      	ldrb	r3, [r3, #1]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d17a      	bne.n	800491e <USB_EPStartXfer+0x24e>
 8004828:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800482c:	1d3a      	adds	r2, r7, #4
 800482e:	6812      	ldr	r2, [r2, #0]
 8004830:	601a      	str	r2, [r3, #0]
 8004832:	1d3b      	adds	r3, r7, #4
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800483a:	b29b      	uxth	r3, r3
 800483c:	4619      	mov	r1, r3
 800483e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004842:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004846:	6812      	ldr	r2, [r2, #0]
 8004848:	440a      	add	r2, r1
 800484a:	601a      	str	r2, [r3, #0]
 800484c:	463b      	mov	r3, r7
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	781b      	ldrb	r3, [r3, #0]
 8004852:	011a      	lsls	r2, r3, #4
 8004854:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4413      	add	r3, r2
 800485c:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8004860:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004864:	601a      	str	r2, [r3, #0]
 8004866:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800486a:	2b00      	cmp	r3, #0
 800486c:	d11a      	bne.n	80048a4 <USB_EPStartXfer+0x1d4>
 800486e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	881b      	ldrh	r3, [r3, #0]
 8004876:	b29b      	uxth	r3, r3
 8004878:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800487c:	b29a      	uxth	r2, r3
 800487e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	801a      	strh	r2, [r3, #0]
 8004886:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	881b      	ldrh	r3, [r3, #0]
 800488e:	b29b      	uxth	r3, r3
 8004890:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004894:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004898:	b29a      	uxth	r2, r3
 800489a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	801a      	strh	r2, [r3, #0]
 80048a2:	e062      	b.n	800496a <USB_EPStartXfer+0x29a>
 80048a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80048a8:	2b3e      	cmp	r3, #62	; 0x3e
 80048aa:	d819      	bhi.n	80048e0 <USB_EPStartXfer+0x210>
 80048ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80048b0:	085b      	lsrs	r3, r3, #1
 80048b2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80048b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80048ba:	f003 0301 	and.w	r3, r3, #1
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d004      	beq.n	80048cc <USB_EPStartXfer+0x1fc>
 80048c2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80048c6:	3301      	adds	r3, #1
 80048c8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80048cc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80048d0:	b29b      	uxth	r3, r3
 80048d2:	029b      	lsls	r3, r3, #10
 80048d4:	b29a      	uxth	r2, r3
 80048d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	801a      	strh	r2, [r3, #0]
 80048de:	e044      	b.n	800496a <USB_EPStartXfer+0x29a>
 80048e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80048e4:	095b      	lsrs	r3, r3, #5
 80048e6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80048ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80048ee:	f003 031f 	and.w	r3, r3, #31
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d104      	bne.n	8004900 <USB_EPStartXfer+0x230>
 80048f6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80048fa:	3b01      	subs	r3, #1
 80048fc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004900:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004904:	b29b      	uxth	r3, r3
 8004906:	029b      	lsls	r3, r3, #10
 8004908:	b29b      	uxth	r3, r3
 800490a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800490e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004912:	b29a      	uxth	r2, r3
 8004914:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	801a      	strh	r2, [r3, #0]
 800491c:	e025      	b.n	800496a <USB_EPStartXfer+0x29a>
 800491e:	463b      	mov	r3, r7
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	785b      	ldrb	r3, [r3, #1]
 8004924:	2b01      	cmp	r3, #1
 8004926:	d120      	bne.n	800496a <USB_EPStartXfer+0x29a>
 8004928:	1d3b      	adds	r3, r7, #4
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004930:	b29b      	uxth	r3, r3
 8004932:	4619      	mov	r1, r3
 8004934:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004938:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800493c:	6812      	ldr	r2, [r2, #0]
 800493e:	440a      	add	r2, r1
 8004940:	601a      	str	r2, [r3, #0]
 8004942:	463b      	mov	r3, r7
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	781b      	ldrb	r3, [r3, #0]
 8004948:	011a      	lsls	r2, r3, #4
 800494a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4413      	add	r3, r2
 8004952:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8004956:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800495a:	601a      	str	r2, [r3, #0]
 800495c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004960:	b29a      	uxth	r2, r3
 8004962:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800496a:	463b      	mov	r3, r7
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	895b      	ldrh	r3, [r3, #10]
 8004970:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004974:	463b      	mov	r3, r7
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	6959      	ldr	r1, [r3, #20]
 800497a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800497e:	b29b      	uxth	r3, r3
 8004980:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004984:	1d38      	adds	r0, r7, #4
 8004986:	6800      	ldr	r0, [r0, #0]
 8004988:	f001 fad7 	bl	8005f3a <USB_WritePMA>
            ep->xfer_buff += len;
 800498c:	463b      	mov	r3, r7
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	695a      	ldr	r2, [r3, #20]
 8004992:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004996:	441a      	add	r2, r3
 8004998:	463b      	mov	r3, r7
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800499e:	463b      	mov	r3, r7
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	6a1a      	ldr	r2, [r3, #32]
 80049a4:	463b      	mov	r3, r7
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	691b      	ldr	r3, [r3, #16]
 80049aa:	429a      	cmp	r2, r3
 80049ac:	d909      	bls.n	80049c2 <USB_EPStartXfer+0x2f2>
            {
              ep->xfer_len_db -= len;
 80049ae:	463b      	mov	r3, r7
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	6a1a      	ldr	r2, [r3, #32]
 80049b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80049b8:	1ad2      	subs	r2, r2, r3
 80049ba:	463b      	mov	r3, r7
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	621a      	str	r2, [r3, #32]
 80049c0:	e008      	b.n	80049d4 <USB_EPStartXfer+0x304>
            }
            else
            {
              len = ep->xfer_len_db;
 80049c2:	463b      	mov	r3, r7
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	6a1b      	ldr	r3, [r3, #32]
 80049c8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 80049cc:	463b      	mov	r3, r7
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	2200      	movs	r2, #0
 80049d2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80049d4:	463b      	mov	r3, r7
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	785b      	ldrb	r3, [r3, #1]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d17a      	bne.n	8004ad4 <USB_EPStartXfer+0x404>
 80049de:	f107 0318 	add.w	r3, r7, #24
 80049e2:	1d3a      	adds	r2, r7, #4
 80049e4:	6812      	ldr	r2, [r2, #0]
 80049e6:	601a      	str	r2, [r3, #0]
 80049e8:	1d3b      	adds	r3, r7, #4
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049f0:	b29b      	uxth	r3, r3
 80049f2:	4619      	mov	r1, r3
 80049f4:	f107 0318 	add.w	r3, r7, #24
 80049f8:	f107 0218 	add.w	r2, r7, #24
 80049fc:	6812      	ldr	r2, [r2, #0]
 80049fe:	440a      	add	r2, r1
 8004a00:	601a      	str	r2, [r3, #0]
 8004a02:	463b      	mov	r3, r7
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	781b      	ldrb	r3, [r3, #0]
 8004a08:	011a      	lsls	r2, r3, #4
 8004a0a:	f107 0318 	add.w	r3, r7, #24
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4413      	add	r3, r2
 8004a12:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004a16:	f107 0314 	add.w	r3, r7, #20
 8004a1a:	601a      	str	r2, [r3, #0]
 8004a1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d11a      	bne.n	8004a5a <USB_EPStartXfer+0x38a>
 8004a24:	f107 0314 	add.w	r3, r7, #20
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	881b      	ldrh	r3, [r3, #0]
 8004a2c:	b29b      	uxth	r3, r3
 8004a2e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004a32:	b29a      	uxth	r2, r3
 8004a34:	f107 0314 	add.w	r3, r7, #20
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	801a      	strh	r2, [r3, #0]
 8004a3c:	f107 0314 	add.w	r3, r7, #20
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	881b      	ldrh	r3, [r3, #0]
 8004a44:	b29b      	uxth	r3, r3
 8004a46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a4e:	b29a      	uxth	r2, r3
 8004a50:	f107 0314 	add.w	r3, r7, #20
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	801a      	strh	r2, [r3, #0]
 8004a58:	e067      	b.n	8004b2a <USB_EPStartXfer+0x45a>
 8004a5a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a5e:	2b3e      	cmp	r3, #62	; 0x3e
 8004a60:	d819      	bhi.n	8004a96 <USB_EPStartXfer+0x3c6>
 8004a62:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a66:	085b      	lsrs	r3, r3, #1
 8004a68:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004a6c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a70:	f003 0301 	and.w	r3, r3, #1
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d004      	beq.n	8004a82 <USB_EPStartXfer+0x3b2>
 8004a78:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004a7c:	3301      	adds	r3, #1
 8004a7e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004a82:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004a86:	b29b      	uxth	r3, r3
 8004a88:	029b      	lsls	r3, r3, #10
 8004a8a:	b29a      	uxth	r2, r3
 8004a8c:	f107 0314 	add.w	r3, r7, #20
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	801a      	strh	r2, [r3, #0]
 8004a94:	e049      	b.n	8004b2a <USB_EPStartXfer+0x45a>
 8004a96:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a9a:	095b      	lsrs	r3, r3, #5
 8004a9c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004aa0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004aa4:	f003 031f 	and.w	r3, r3, #31
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d104      	bne.n	8004ab6 <USB_EPStartXfer+0x3e6>
 8004aac:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004ab0:	3b01      	subs	r3, #1
 8004ab2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004ab6:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004aba:	b29b      	uxth	r3, r3
 8004abc:	029b      	lsls	r3, r3, #10
 8004abe:	b29b      	uxth	r3, r3
 8004ac0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ac4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ac8:	b29a      	uxth	r2, r3
 8004aca:	f107 0314 	add.w	r3, r7, #20
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	801a      	strh	r2, [r3, #0]
 8004ad2:	e02a      	b.n	8004b2a <USB_EPStartXfer+0x45a>
 8004ad4:	463b      	mov	r3, r7
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	785b      	ldrb	r3, [r3, #1]
 8004ada:	2b01      	cmp	r3, #1
 8004adc:	d125      	bne.n	8004b2a <USB_EPStartXfer+0x45a>
 8004ade:	f107 0320 	add.w	r3, r7, #32
 8004ae2:	1d3a      	adds	r2, r7, #4
 8004ae4:	6812      	ldr	r2, [r2, #0]
 8004ae6:	601a      	str	r2, [r3, #0]
 8004ae8:	1d3b      	adds	r3, r7, #4
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004af0:	b29b      	uxth	r3, r3
 8004af2:	4619      	mov	r1, r3
 8004af4:	f107 0320 	add.w	r3, r7, #32
 8004af8:	f107 0220 	add.w	r2, r7, #32
 8004afc:	6812      	ldr	r2, [r2, #0]
 8004afe:	440a      	add	r2, r1
 8004b00:	601a      	str	r2, [r3, #0]
 8004b02:	463b      	mov	r3, r7
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	781b      	ldrb	r3, [r3, #0]
 8004b08:	011a      	lsls	r2, r3, #4
 8004b0a:	f107 0320 	add.w	r3, r7, #32
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4413      	add	r3, r2
 8004b12:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004b16:	f107 031c 	add.w	r3, r7, #28
 8004b1a:	601a      	str	r2, [r3, #0]
 8004b1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b20:	b29a      	uxth	r2, r3
 8004b22:	f107 031c 	add.w	r3, r7, #28
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004b2a:	463b      	mov	r3, r7
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	891b      	ldrh	r3, [r3, #8]
 8004b30:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004b34:	463b      	mov	r3, r7
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	6959      	ldr	r1, [r3, #20]
 8004b3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b3e:	b29b      	uxth	r3, r3
 8004b40:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004b44:	1d38      	adds	r0, r7, #4
 8004b46:	6800      	ldr	r0, [r0, #0]
 8004b48:	f001 f9f7 	bl	8005f3a <USB_WritePMA>
 8004b4c:	f000 bcc6 	b.w	80054dc <USB_EPStartXfer+0xe0c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004b50:	463b      	mov	r3, r7
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	785b      	ldrb	r3, [r3, #1]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d164      	bne.n	8004c24 <USB_EPStartXfer+0x554>
 8004b5a:	1d3b      	adds	r3, r7, #4
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004b60:	1d3b      	adds	r3, r7, #4
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b68:	b29b      	uxth	r3, r3
 8004b6a:	461a      	mov	r2, r3
 8004b6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b6e:	4413      	add	r3, r2
 8004b70:	64bb      	str	r3, [r7, #72]	; 0x48
 8004b72:	463b      	mov	r3, r7
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	781b      	ldrb	r3, [r3, #0]
 8004b78:	011a      	lsls	r2, r3, #4
 8004b7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b7c:	4413      	add	r3, r2
 8004b7e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004b82:	647b      	str	r3, [r7, #68]	; 0x44
 8004b84:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d112      	bne.n	8004bb2 <USB_EPStartXfer+0x4e2>
 8004b8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b8e:	881b      	ldrh	r3, [r3, #0]
 8004b90:	b29b      	uxth	r3, r3
 8004b92:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004b96:	b29a      	uxth	r2, r3
 8004b98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b9a:	801a      	strh	r2, [r3, #0]
 8004b9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b9e:	881b      	ldrh	r3, [r3, #0]
 8004ba0:	b29b      	uxth	r3, r3
 8004ba2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ba6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004baa:	b29a      	uxth	r2, r3
 8004bac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004bae:	801a      	strh	r2, [r3, #0]
 8004bb0:	e057      	b.n	8004c62 <USB_EPStartXfer+0x592>
 8004bb2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004bb6:	2b3e      	cmp	r3, #62	; 0x3e
 8004bb8:	d817      	bhi.n	8004bea <USB_EPStartXfer+0x51a>
 8004bba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004bbe:	085b      	lsrs	r3, r3, #1
 8004bc0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004bc4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004bc8:	f003 0301 	and.w	r3, r3, #1
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d004      	beq.n	8004bda <USB_EPStartXfer+0x50a>
 8004bd0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004bd4:	3301      	adds	r3, #1
 8004bd6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004bda:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004bde:	b29b      	uxth	r3, r3
 8004be0:	029b      	lsls	r3, r3, #10
 8004be2:	b29a      	uxth	r2, r3
 8004be4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004be6:	801a      	strh	r2, [r3, #0]
 8004be8:	e03b      	b.n	8004c62 <USB_EPStartXfer+0x592>
 8004bea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004bee:	095b      	lsrs	r3, r3, #5
 8004bf0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004bf4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004bf8:	f003 031f 	and.w	r3, r3, #31
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d104      	bne.n	8004c0a <USB_EPStartXfer+0x53a>
 8004c00:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004c04:	3b01      	subs	r3, #1
 8004c06:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004c0a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004c0e:	b29b      	uxth	r3, r3
 8004c10:	029b      	lsls	r3, r3, #10
 8004c12:	b29b      	uxth	r3, r3
 8004c14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c1c:	b29a      	uxth	r2, r3
 8004c1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c20:	801a      	strh	r2, [r3, #0]
 8004c22:	e01e      	b.n	8004c62 <USB_EPStartXfer+0x592>
 8004c24:	463b      	mov	r3, r7
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	785b      	ldrb	r3, [r3, #1]
 8004c2a:	2b01      	cmp	r3, #1
 8004c2c:	d119      	bne.n	8004c62 <USB_EPStartXfer+0x592>
 8004c2e:	1d3b      	adds	r3, r7, #4
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	653b      	str	r3, [r7, #80]	; 0x50
 8004c34:	1d3b      	adds	r3, r7, #4
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c3c:	b29b      	uxth	r3, r3
 8004c3e:	461a      	mov	r2, r3
 8004c40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c42:	4413      	add	r3, r2
 8004c44:	653b      	str	r3, [r7, #80]	; 0x50
 8004c46:	463b      	mov	r3, r7
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	781b      	ldrb	r3, [r3, #0]
 8004c4c:	011a      	lsls	r2, r3, #4
 8004c4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c50:	4413      	add	r3, r2
 8004c52:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004c56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c58:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c5c:	b29a      	uxth	r2, r3
 8004c5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c60:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004c62:	463b      	mov	r3, r7
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	891b      	ldrh	r3, [r3, #8]
 8004c68:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004c6c:	463b      	mov	r3, r7
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	6959      	ldr	r1, [r3, #20]
 8004c72:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c76:	b29b      	uxth	r3, r3
 8004c78:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004c7c:	1d38      	adds	r0, r7, #4
 8004c7e:	6800      	ldr	r0, [r0, #0]
 8004c80:	f001 f95b 	bl	8005f3a <USB_WritePMA>
            ep->xfer_buff += len;
 8004c84:	463b      	mov	r3, r7
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	695a      	ldr	r2, [r3, #20]
 8004c8a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c8e:	441a      	add	r2, r3
 8004c90:	463b      	mov	r3, r7
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004c96:	463b      	mov	r3, r7
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	6a1a      	ldr	r2, [r3, #32]
 8004c9c:	463b      	mov	r3, r7
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	691b      	ldr	r3, [r3, #16]
 8004ca2:	429a      	cmp	r2, r3
 8004ca4:	d909      	bls.n	8004cba <USB_EPStartXfer+0x5ea>
            {
              ep->xfer_len_db -= len;
 8004ca6:	463b      	mov	r3, r7
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	6a1a      	ldr	r2, [r3, #32]
 8004cac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004cb0:	1ad2      	subs	r2, r2, r3
 8004cb2:	463b      	mov	r3, r7
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	621a      	str	r2, [r3, #32]
 8004cb8:	e008      	b.n	8004ccc <USB_EPStartXfer+0x5fc>
            }
            else
            {
              len = ep->xfer_len_db;
 8004cba:	463b      	mov	r3, r7
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	6a1b      	ldr	r3, [r3, #32]
 8004cc0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8004cc4:	463b      	mov	r3, r7
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004ccc:	1d3b      	adds	r3, r7, #4
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	643b      	str	r3, [r7, #64]	; 0x40
 8004cd2:	463b      	mov	r3, r7
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	785b      	ldrb	r3, [r3, #1]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d164      	bne.n	8004da6 <USB_EPStartXfer+0x6d6>
 8004cdc:	1d3b      	adds	r3, r7, #4
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	63bb      	str	r3, [r7, #56]	; 0x38
 8004ce2:	1d3b      	adds	r3, r7, #4
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004cea:	b29b      	uxth	r3, r3
 8004cec:	461a      	mov	r2, r3
 8004cee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cf0:	4413      	add	r3, r2
 8004cf2:	63bb      	str	r3, [r7, #56]	; 0x38
 8004cf4:	463b      	mov	r3, r7
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	781b      	ldrb	r3, [r3, #0]
 8004cfa:	011a      	lsls	r2, r3, #4
 8004cfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cfe:	4413      	add	r3, r2
 8004d00:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004d04:	637b      	str	r3, [r7, #52]	; 0x34
 8004d06:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d112      	bne.n	8004d34 <USB_EPStartXfer+0x664>
 8004d0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d10:	881b      	ldrh	r3, [r3, #0]
 8004d12:	b29b      	uxth	r3, r3
 8004d14:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004d18:	b29a      	uxth	r2, r3
 8004d1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d1c:	801a      	strh	r2, [r3, #0]
 8004d1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d20:	881b      	ldrh	r3, [r3, #0]
 8004d22:	b29b      	uxth	r3, r3
 8004d24:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d28:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d2c:	b29a      	uxth	r2, r3
 8004d2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d30:	801a      	strh	r2, [r3, #0]
 8004d32:	e054      	b.n	8004dde <USB_EPStartXfer+0x70e>
 8004d34:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d38:	2b3e      	cmp	r3, #62	; 0x3e
 8004d3a:	d817      	bhi.n	8004d6c <USB_EPStartXfer+0x69c>
 8004d3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d40:	085b      	lsrs	r3, r3, #1
 8004d42:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004d46:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d4a:	f003 0301 	and.w	r3, r3, #1
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d004      	beq.n	8004d5c <USB_EPStartXfer+0x68c>
 8004d52:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004d56:	3301      	adds	r3, #1
 8004d58:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004d5c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004d60:	b29b      	uxth	r3, r3
 8004d62:	029b      	lsls	r3, r3, #10
 8004d64:	b29a      	uxth	r2, r3
 8004d66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d68:	801a      	strh	r2, [r3, #0]
 8004d6a:	e038      	b.n	8004dde <USB_EPStartXfer+0x70e>
 8004d6c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d70:	095b      	lsrs	r3, r3, #5
 8004d72:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004d76:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d7a:	f003 031f 	and.w	r3, r3, #31
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d104      	bne.n	8004d8c <USB_EPStartXfer+0x6bc>
 8004d82:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004d86:	3b01      	subs	r3, #1
 8004d88:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004d8c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004d90:	b29b      	uxth	r3, r3
 8004d92:	029b      	lsls	r3, r3, #10
 8004d94:	b29b      	uxth	r3, r3
 8004d96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d9e:	b29a      	uxth	r2, r3
 8004da0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004da2:	801a      	strh	r2, [r3, #0]
 8004da4:	e01b      	b.n	8004dde <USB_EPStartXfer+0x70e>
 8004da6:	463b      	mov	r3, r7
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	785b      	ldrb	r3, [r3, #1]
 8004dac:	2b01      	cmp	r3, #1
 8004dae:	d116      	bne.n	8004dde <USB_EPStartXfer+0x70e>
 8004db0:	1d3b      	adds	r3, r7, #4
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004db8:	b29b      	uxth	r3, r3
 8004dba:	461a      	mov	r2, r3
 8004dbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004dbe:	4413      	add	r3, r2
 8004dc0:	643b      	str	r3, [r7, #64]	; 0x40
 8004dc2:	463b      	mov	r3, r7
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	781b      	ldrb	r3, [r3, #0]
 8004dc8:	011a      	lsls	r2, r3, #4
 8004dca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004dcc:	4413      	add	r3, r2
 8004dce:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004dd2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004dd4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004dd8:	b29a      	uxth	r2, r3
 8004dda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ddc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004dde:	463b      	mov	r3, r7
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	895b      	ldrh	r3, [r3, #10]
 8004de4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004de8:	463b      	mov	r3, r7
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	6959      	ldr	r1, [r3, #20]
 8004dee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004df2:	b29b      	uxth	r3, r3
 8004df4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004df8:	1d38      	adds	r0, r7, #4
 8004dfa:	6800      	ldr	r0, [r0, #0]
 8004dfc:	f001 f89d 	bl	8005f3a <USB_WritePMA>
 8004e00:	e36c      	b.n	80054dc <USB_EPStartXfer+0xe0c>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8004e02:	463b      	mov	r3, r7
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	6a1b      	ldr	r3, [r3, #32]
 8004e08:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8004e0c:	1d3b      	adds	r3, r7, #4
 8004e0e:	681a      	ldr	r2, [r3, #0]
 8004e10:	463b      	mov	r3, r7
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	781b      	ldrb	r3, [r3, #0]
 8004e16:	009b      	lsls	r3, r3, #2
 8004e18:	4413      	add	r3, r2
 8004e1a:	881b      	ldrh	r3, [r3, #0]
 8004e1c:	b29b      	uxth	r3, r3
 8004e1e:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8004e22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e26:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8004e2a:	1d3b      	adds	r3, r7, #4
 8004e2c:	681a      	ldr	r2, [r3, #0]
 8004e2e:	463b      	mov	r3, r7
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	781b      	ldrb	r3, [r3, #0]
 8004e34:	009b      	lsls	r3, r3, #2
 8004e36:	441a      	add	r2, r3
 8004e38:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8004e3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e4c:	b29b      	uxth	r3, r3
 8004e4e:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004e50:	1d3b      	adds	r3, r7, #4
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004e56:	1d3b      	adds	r3, r7, #4
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e5e:	b29b      	uxth	r3, r3
 8004e60:	461a      	mov	r2, r3
 8004e62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e64:	4413      	add	r3, r2
 8004e66:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004e68:	463b      	mov	r3, r7
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	781b      	ldrb	r3, [r3, #0]
 8004e6e:	011a      	lsls	r2, r3, #4
 8004e70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e72:	4413      	add	r3, r2
 8004e74:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004e78:	65bb      	str	r3, [r7, #88]	; 0x58
 8004e7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e7e:	b29a      	uxth	r2, r3
 8004e80:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004e82:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004e84:	463b      	mov	r3, r7
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	891b      	ldrh	r3, [r3, #8]
 8004e8a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004e8e:	463b      	mov	r3, r7
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	6959      	ldr	r1, [r3, #20]
 8004e94:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e98:	b29b      	uxth	r3, r3
 8004e9a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004e9e:	1d38      	adds	r0, r7, #4
 8004ea0:	6800      	ldr	r0, [r0, #0]
 8004ea2:	f001 f84a 	bl	8005f3a <USB_WritePMA>
 8004ea6:	e319      	b.n	80054dc <USB_EPStartXfer+0xe0c>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8004ea8:	1d3b      	adds	r3, r7, #4
 8004eaa:	681a      	ldr	r2, [r3, #0]
 8004eac:	463b      	mov	r3, r7
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	781b      	ldrb	r3, [r3, #0]
 8004eb2:	009b      	lsls	r3, r3, #2
 8004eb4:	4413      	add	r3, r2
 8004eb6:	881b      	ldrh	r3, [r3, #0]
 8004eb8:	b29b      	uxth	r3, r3
 8004eba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ebe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ec2:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8004ec6:	1d3b      	adds	r3, r7, #4
 8004ec8:	681a      	ldr	r2, [r3, #0]
 8004eca:	463b      	mov	r3, r7
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	781b      	ldrb	r3, [r3, #0]
 8004ed0:	009b      	lsls	r3, r3, #2
 8004ed2:	441a      	add	r2, r3
 8004ed4:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8004ed8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004edc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ee0:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004ee4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ee8:	b29b      	uxth	r3, r3
 8004eea:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8004eec:	463b      	mov	r3, r7
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	6a1a      	ldr	r2, [r3, #32]
 8004ef2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ef6:	1ad2      	subs	r2, r2, r3
 8004ef8:	463b      	mov	r3, r7
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004efe:	1d3b      	adds	r3, r7, #4
 8004f00:	681a      	ldr	r2, [r3, #0]
 8004f02:	463b      	mov	r3, r7
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	781b      	ldrb	r3, [r3, #0]
 8004f08:	009b      	lsls	r3, r3, #2
 8004f0a:	4413      	add	r3, r2
 8004f0c:	881b      	ldrh	r3, [r3, #0]
 8004f0e:	b29b      	uxth	r3, r3
 8004f10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	f000 8162 	beq.w	80051de <USB_EPStartXfer+0xb0e>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004f1a:	1d3b      	adds	r3, r7, #4
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004f22:	463b      	mov	r3, r7
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	785b      	ldrb	r3, [r3, #1]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d164      	bne.n	8004ff6 <USB_EPStartXfer+0x926>
 8004f2c:	1d3b      	adds	r3, r7, #4
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	67bb      	str	r3, [r7, #120]	; 0x78
 8004f32:	1d3b      	adds	r3, r7, #4
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f3a:	b29b      	uxth	r3, r3
 8004f3c:	461a      	mov	r2, r3
 8004f3e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f40:	4413      	add	r3, r2
 8004f42:	67bb      	str	r3, [r7, #120]	; 0x78
 8004f44:	463b      	mov	r3, r7
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	781b      	ldrb	r3, [r3, #0]
 8004f4a:	011a      	lsls	r2, r3, #4
 8004f4c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f4e:	4413      	add	r3, r2
 8004f50:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004f54:	677b      	str	r3, [r7, #116]	; 0x74
 8004f56:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d112      	bne.n	8004f84 <USB_EPStartXfer+0x8b4>
 8004f5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f60:	881b      	ldrh	r3, [r3, #0]
 8004f62:	b29b      	uxth	r3, r3
 8004f64:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004f68:	b29a      	uxth	r2, r3
 8004f6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f6c:	801a      	strh	r2, [r3, #0]
 8004f6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f70:	881b      	ldrh	r3, [r3, #0]
 8004f72:	b29b      	uxth	r3, r3
 8004f74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f7c:	b29a      	uxth	r2, r3
 8004f7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f80:	801a      	strh	r2, [r3, #0]
 8004f82:	e057      	b.n	8005034 <USB_EPStartXfer+0x964>
 8004f84:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f88:	2b3e      	cmp	r3, #62	; 0x3e
 8004f8a:	d817      	bhi.n	8004fbc <USB_EPStartXfer+0x8ec>
 8004f8c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f90:	085b      	lsrs	r3, r3, #1
 8004f92:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8004f96:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f9a:	f003 0301 	and.w	r3, r3, #1
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d004      	beq.n	8004fac <USB_EPStartXfer+0x8dc>
 8004fa2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004fa6:	3301      	adds	r3, #1
 8004fa8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8004fac:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004fb0:	b29b      	uxth	r3, r3
 8004fb2:	029b      	lsls	r3, r3, #10
 8004fb4:	b29a      	uxth	r2, r3
 8004fb6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004fb8:	801a      	strh	r2, [r3, #0]
 8004fba:	e03b      	b.n	8005034 <USB_EPStartXfer+0x964>
 8004fbc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004fc0:	095b      	lsrs	r3, r3, #5
 8004fc2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8004fc6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004fca:	f003 031f 	and.w	r3, r3, #31
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d104      	bne.n	8004fdc <USB_EPStartXfer+0x90c>
 8004fd2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004fd6:	3b01      	subs	r3, #1
 8004fd8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8004fdc:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004fe0:	b29b      	uxth	r3, r3
 8004fe2:	029b      	lsls	r3, r3, #10
 8004fe4:	b29b      	uxth	r3, r3
 8004fe6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004fea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004fee:	b29a      	uxth	r2, r3
 8004ff0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ff2:	801a      	strh	r2, [r3, #0]
 8004ff4:	e01e      	b.n	8005034 <USB_EPStartXfer+0x964>
 8004ff6:	463b      	mov	r3, r7
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	785b      	ldrb	r3, [r3, #1]
 8004ffc:	2b01      	cmp	r3, #1
 8004ffe:	d119      	bne.n	8005034 <USB_EPStartXfer+0x964>
 8005000:	1d3b      	adds	r3, r7, #4
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005008:	b29b      	uxth	r3, r3
 800500a:	461a      	mov	r2, r3
 800500c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005010:	4413      	add	r3, r2
 8005012:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005016:	463b      	mov	r3, r7
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	781b      	ldrb	r3, [r3, #0]
 800501c:	011a      	lsls	r2, r3, #4
 800501e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005022:	4413      	add	r3, r2
 8005024:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005028:	67fb      	str	r3, [r7, #124]	; 0x7c
 800502a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800502e:	b29a      	uxth	r2, r3
 8005030:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005032:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005034:	463b      	mov	r3, r7
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	895b      	ldrh	r3, [r3, #10]
 800503a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800503e:	463b      	mov	r3, r7
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	6959      	ldr	r1, [r3, #20]
 8005044:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005048:	b29b      	uxth	r3, r3
 800504a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800504e:	1d38      	adds	r0, r7, #4
 8005050:	6800      	ldr	r0, [r0, #0]
 8005052:	f000 ff72 	bl	8005f3a <USB_WritePMA>
          ep->xfer_buff += len;
 8005056:	463b      	mov	r3, r7
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	695a      	ldr	r2, [r3, #20]
 800505c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005060:	441a      	add	r2, r3
 8005062:	463b      	mov	r3, r7
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8005068:	463b      	mov	r3, r7
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	6a1a      	ldr	r2, [r3, #32]
 800506e:	463b      	mov	r3, r7
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	691b      	ldr	r3, [r3, #16]
 8005074:	429a      	cmp	r2, r3
 8005076:	d909      	bls.n	800508c <USB_EPStartXfer+0x9bc>
          {
            ep->xfer_len_db -= len;
 8005078:	463b      	mov	r3, r7
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	6a1a      	ldr	r2, [r3, #32]
 800507e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005082:	1ad2      	subs	r2, r2, r3
 8005084:	463b      	mov	r3, r7
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	621a      	str	r2, [r3, #32]
 800508a:	e008      	b.n	800509e <USB_EPStartXfer+0x9ce>
          }
          else
          {
            len = ep->xfer_len_db;
 800508c:	463b      	mov	r3, r7
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	6a1b      	ldr	r3, [r3, #32]
 8005092:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8005096:	463b      	mov	r3, r7
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	2200      	movs	r2, #0
 800509c:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 800509e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	f000 821a 	beq.w	80054dc <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80050a8:	463b      	mov	r3, r7
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	785b      	ldrb	r3, [r3, #1]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d164      	bne.n	800517c <USB_EPStartXfer+0xaac>
 80050b2:	1d3b      	adds	r3, r7, #4
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	66bb      	str	r3, [r7, #104]	; 0x68
 80050b8:	1d3b      	adds	r3, r7, #4
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050c0:	b29b      	uxth	r3, r3
 80050c2:	461a      	mov	r2, r3
 80050c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80050c6:	4413      	add	r3, r2
 80050c8:	66bb      	str	r3, [r7, #104]	; 0x68
 80050ca:	463b      	mov	r3, r7
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	781b      	ldrb	r3, [r3, #0]
 80050d0:	011a      	lsls	r2, r3, #4
 80050d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80050d4:	4413      	add	r3, r2
 80050d6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80050da:	667b      	str	r3, [r7, #100]	; 0x64
 80050dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d112      	bne.n	800510a <USB_EPStartXfer+0xa3a>
 80050e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80050e6:	881b      	ldrh	r3, [r3, #0]
 80050e8:	b29b      	uxth	r3, r3
 80050ea:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80050ee:	b29a      	uxth	r2, r3
 80050f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80050f2:	801a      	strh	r2, [r3, #0]
 80050f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80050f6:	881b      	ldrh	r3, [r3, #0]
 80050f8:	b29b      	uxth	r3, r3
 80050fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80050fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005102:	b29a      	uxth	r2, r3
 8005104:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005106:	801a      	strh	r2, [r3, #0]
 8005108:	e057      	b.n	80051ba <USB_EPStartXfer+0xaea>
 800510a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800510e:	2b3e      	cmp	r3, #62	; 0x3e
 8005110:	d817      	bhi.n	8005142 <USB_EPStartXfer+0xa72>
 8005112:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005116:	085b      	lsrs	r3, r3, #1
 8005118:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800511c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005120:	f003 0301 	and.w	r3, r3, #1
 8005124:	2b00      	cmp	r3, #0
 8005126:	d004      	beq.n	8005132 <USB_EPStartXfer+0xa62>
 8005128:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800512c:	3301      	adds	r3, #1
 800512e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005132:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005136:	b29b      	uxth	r3, r3
 8005138:	029b      	lsls	r3, r3, #10
 800513a:	b29a      	uxth	r2, r3
 800513c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800513e:	801a      	strh	r2, [r3, #0]
 8005140:	e03b      	b.n	80051ba <USB_EPStartXfer+0xaea>
 8005142:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005146:	095b      	lsrs	r3, r3, #5
 8005148:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800514c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005150:	f003 031f 	and.w	r3, r3, #31
 8005154:	2b00      	cmp	r3, #0
 8005156:	d104      	bne.n	8005162 <USB_EPStartXfer+0xa92>
 8005158:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800515c:	3b01      	subs	r3, #1
 800515e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005162:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005166:	b29b      	uxth	r3, r3
 8005168:	029b      	lsls	r3, r3, #10
 800516a:	b29b      	uxth	r3, r3
 800516c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005170:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005174:	b29a      	uxth	r2, r3
 8005176:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005178:	801a      	strh	r2, [r3, #0]
 800517a:	e01e      	b.n	80051ba <USB_EPStartXfer+0xaea>
 800517c:	463b      	mov	r3, r7
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	785b      	ldrb	r3, [r3, #1]
 8005182:	2b01      	cmp	r3, #1
 8005184:	d119      	bne.n	80051ba <USB_EPStartXfer+0xaea>
 8005186:	1d3b      	adds	r3, r7, #4
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	673b      	str	r3, [r7, #112]	; 0x70
 800518c:	1d3b      	adds	r3, r7, #4
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005194:	b29b      	uxth	r3, r3
 8005196:	461a      	mov	r2, r3
 8005198:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800519a:	4413      	add	r3, r2
 800519c:	673b      	str	r3, [r7, #112]	; 0x70
 800519e:	463b      	mov	r3, r7
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	781b      	ldrb	r3, [r3, #0]
 80051a4:	011a      	lsls	r2, r3, #4
 80051a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80051a8:	4413      	add	r3, r2
 80051aa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80051ae:	66fb      	str	r3, [r7, #108]	; 0x6c
 80051b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80051b4:	b29a      	uxth	r2, r3
 80051b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051b8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80051ba:	463b      	mov	r3, r7
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	891b      	ldrh	r3, [r3, #8]
 80051c0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80051c4:	463b      	mov	r3, r7
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	6959      	ldr	r1, [r3, #20]
 80051ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80051ce:	b29b      	uxth	r3, r3
 80051d0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80051d4:	1d38      	adds	r0, r7, #4
 80051d6:	6800      	ldr	r0, [r0, #0]
 80051d8:	f000 feaf 	bl	8005f3a <USB_WritePMA>
 80051dc:	e17e      	b.n	80054dc <USB_EPStartXfer+0xe0c>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80051de:	463b      	mov	r3, r7
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	785b      	ldrb	r3, [r3, #1]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d16f      	bne.n	80052c8 <USB_EPStartXfer+0xbf8>
 80051e8:	1d3b      	adds	r3, r7, #4
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80051f0:	1d3b      	adds	r3, r7, #4
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051f8:	b29b      	uxth	r3, r3
 80051fa:	461a      	mov	r2, r3
 80051fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005200:	4413      	add	r3, r2
 8005202:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005206:	463b      	mov	r3, r7
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	781b      	ldrb	r3, [r3, #0]
 800520c:	011a      	lsls	r2, r3, #4
 800520e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005212:	4413      	add	r3, r2
 8005214:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005218:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800521c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005220:	2b00      	cmp	r3, #0
 8005222:	d116      	bne.n	8005252 <USB_EPStartXfer+0xb82>
 8005224:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005228:	881b      	ldrh	r3, [r3, #0]
 800522a:	b29b      	uxth	r3, r3
 800522c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005230:	b29a      	uxth	r2, r3
 8005232:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005236:	801a      	strh	r2, [r3, #0]
 8005238:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800523c:	881b      	ldrh	r3, [r3, #0]
 800523e:	b29b      	uxth	r3, r3
 8005240:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005244:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005248:	b29a      	uxth	r2, r3
 800524a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800524e:	801a      	strh	r2, [r3, #0]
 8005250:	e05f      	b.n	8005312 <USB_EPStartXfer+0xc42>
 8005252:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005256:	2b3e      	cmp	r3, #62	; 0x3e
 8005258:	d818      	bhi.n	800528c <USB_EPStartXfer+0xbbc>
 800525a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800525e:	085b      	lsrs	r3, r3, #1
 8005260:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005264:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005268:	f003 0301 	and.w	r3, r3, #1
 800526c:	2b00      	cmp	r3, #0
 800526e:	d004      	beq.n	800527a <USB_EPStartXfer+0xbaa>
 8005270:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005274:	3301      	adds	r3, #1
 8005276:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800527a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800527e:	b29b      	uxth	r3, r3
 8005280:	029b      	lsls	r3, r3, #10
 8005282:	b29a      	uxth	r2, r3
 8005284:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005288:	801a      	strh	r2, [r3, #0]
 800528a:	e042      	b.n	8005312 <USB_EPStartXfer+0xc42>
 800528c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005290:	095b      	lsrs	r3, r3, #5
 8005292:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005296:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800529a:	f003 031f 	and.w	r3, r3, #31
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d104      	bne.n	80052ac <USB_EPStartXfer+0xbdc>
 80052a2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80052a6:	3b01      	subs	r3, #1
 80052a8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80052ac:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80052b0:	b29b      	uxth	r3, r3
 80052b2:	029b      	lsls	r3, r3, #10
 80052b4:	b29b      	uxth	r3, r3
 80052b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052be:	b29a      	uxth	r2, r3
 80052c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80052c4:	801a      	strh	r2, [r3, #0]
 80052c6:	e024      	b.n	8005312 <USB_EPStartXfer+0xc42>
 80052c8:	463b      	mov	r3, r7
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	785b      	ldrb	r3, [r3, #1]
 80052ce:	2b01      	cmp	r3, #1
 80052d0:	d11f      	bne.n	8005312 <USB_EPStartXfer+0xc42>
 80052d2:	1d3b      	adds	r3, r7, #4
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80052da:	1d3b      	adds	r3, r7, #4
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052e2:	b29b      	uxth	r3, r3
 80052e4:	461a      	mov	r2, r3
 80052e6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80052ea:	4413      	add	r3, r2
 80052ec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80052f0:	463b      	mov	r3, r7
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	781b      	ldrb	r3, [r3, #0]
 80052f6:	011a      	lsls	r2, r3, #4
 80052f8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80052fc:	4413      	add	r3, r2
 80052fe:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005302:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005306:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800530a:	b29a      	uxth	r2, r3
 800530c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005310:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005312:	463b      	mov	r3, r7
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	891b      	ldrh	r3, [r3, #8]
 8005318:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800531c:	463b      	mov	r3, r7
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	6959      	ldr	r1, [r3, #20]
 8005322:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005326:	b29b      	uxth	r3, r3
 8005328:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800532c:	1d38      	adds	r0, r7, #4
 800532e:	6800      	ldr	r0, [r0, #0]
 8005330:	f000 fe03 	bl	8005f3a <USB_WritePMA>
          ep->xfer_buff += len;
 8005334:	463b      	mov	r3, r7
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	695a      	ldr	r2, [r3, #20]
 800533a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800533e:	441a      	add	r2, r3
 8005340:	463b      	mov	r3, r7
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8005346:	463b      	mov	r3, r7
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	6a1a      	ldr	r2, [r3, #32]
 800534c:	463b      	mov	r3, r7
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	691b      	ldr	r3, [r3, #16]
 8005352:	429a      	cmp	r2, r3
 8005354:	d909      	bls.n	800536a <USB_EPStartXfer+0xc9a>
          {
            ep->xfer_len_db -= len;
 8005356:	463b      	mov	r3, r7
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	6a1a      	ldr	r2, [r3, #32]
 800535c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005360:	1ad2      	subs	r2, r2, r3
 8005362:	463b      	mov	r3, r7
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	621a      	str	r2, [r3, #32]
 8005368:	e008      	b.n	800537c <USB_EPStartXfer+0xcac>
          }
          else
          {
            len = ep->xfer_len_db;
 800536a:	463b      	mov	r3, r7
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	6a1b      	ldr	r3, [r3, #32]
 8005370:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8005374:	463b      	mov	r3, r7
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	2200      	movs	r2, #0
 800537a:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 800537c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005380:	2b00      	cmp	r3, #0
 8005382:	f000 80ab 	beq.w	80054dc <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005386:	1d3b      	adds	r3, r7, #4
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800538e:	463b      	mov	r3, r7
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	785b      	ldrb	r3, [r3, #1]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d16f      	bne.n	8005478 <USB_EPStartXfer+0xda8>
 8005398:	1d3b      	adds	r3, r7, #4
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80053a0:	1d3b      	adds	r3, r7, #4
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053a8:	b29b      	uxth	r3, r3
 80053aa:	461a      	mov	r2, r3
 80053ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80053b0:	4413      	add	r3, r2
 80053b2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80053b6:	463b      	mov	r3, r7
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	781b      	ldrb	r3, [r3, #0]
 80053bc:	011a      	lsls	r2, r3, #4
 80053be:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80053c2:	4413      	add	r3, r2
 80053c4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80053c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80053cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d116      	bne.n	8005402 <USB_EPStartXfer+0xd32>
 80053d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80053d8:	881b      	ldrh	r3, [r3, #0]
 80053da:	b29b      	uxth	r3, r3
 80053dc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80053e0:	b29a      	uxth	r2, r3
 80053e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80053e6:	801a      	strh	r2, [r3, #0]
 80053e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80053ec:	881b      	ldrh	r3, [r3, #0]
 80053ee:	b29b      	uxth	r3, r3
 80053f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053f8:	b29a      	uxth	r2, r3
 80053fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80053fe:	801a      	strh	r2, [r3, #0]
 8005400:	e05b      	b.n	80054ba <USB_EPStartXfer+0xdea>
 8005402:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005406:	2b3e      	cmp	r3, #62	; 0x3e
 8005408:	d818      	bhi.n	800543c <USB_EPStartXfer+0xd6c>
 800540a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800540e:	085b      	lsrs	r3, r3, #1
 8005410:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005414:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005418:	f003 0301 	and.w	r3, r3, #1
 800541c:	2b00      	cmp	r3, #0
 800541e:	d004      	beq.n	800542a <USB_EPStartXfer+0xd5a>
 8005420:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005424:	3301      	adds	r3, #1
 8005426:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800542a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800542e:	b29b      	uxth	r3, r3
 8005430:	029b      	lsls	r3, r3, #10
 8005432:	b29a      	uxth	r2, r3
 8005434:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005438:	801a      	strh	r2, [r3, #0]
 800543a:	e03e      	b.n	80054ba <USB_EPStartXfer+0xdea>
 800543c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005440:	095b      	lsrs	r3, r3, #5
 8005442:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005446:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800544a:	f003 031f 	and.w	r3, r3, #31
 800544e:	2b00      	cmp	r3, #0
 8005450:	d104      	bne.n	800545c <USB_EPStartXfer+0xd8c>
 8005452:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005456:	3b01      	subs	r3, #1
 8005458:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800545c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005460:	b29b      	uxth	r3, r3
 8005462:	029b      	lsls	r3, r3, #10
 8005464:	b29b      	uxth	r3, r3
 8005466:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800546a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800546e:	b29a      	uxth	r2, r3
 8005470:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005474:	801a      	strh	r2, [r3, #0]
 8005476:	e020      	b.n	80054ba <USB_EPStartXfer+0xdea>
 8005478:	463b      	mov	r3, r7
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	785b      	ldrb	r3, [r3, #1]
 800547e:	2b01      	cmp	r3, #1
 8005480:	d11b      	bne.n	80054ba <USB_EPStartXfer+0xdea>
 8005482:	1d3b      	adds	r3, r7, #4
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800548a:	b29b      	uxth	r3, r3
 800548c:	461a      	mov	r2, r3
 800548e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005492:	4413      	add	r3, r2
 8005494:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005498:	463b      	mov	r3, r7
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	781b      	ldrb	r3, [r3, #0]
 800549e:	011a      	lsls	r2, r3, #4
 80054a0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80054a4:	4413      	add	r3, r2
 80054a6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80054aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80054ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054b2:	b29a      	uxth	r2, r3
 80054b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80054b8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80054ba:	463b      	mov	r3, r7
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	895b      	ldrh	r3, [r3, #10]
 80054c0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80054c4:	463b      	mov	r3, r7
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	6959      	ldr	r1, [r3, #20]
 80054ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054ce:	b29b      	uxth	r3, r3
 80054d0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80054d4:	1d38      	adds	r0, r7, #4
 80054d6:	6800      	ldr	r0, [r0, #0]
 80054d8:	f000 fd2f 	bl	8005f3a <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80054dc:	1d3b      	adds	r3, r7, #4
 80054de:	681a      	ldr	r2, [r3, #0]
 80054e0:	463b      	mov	r3, r7
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	781b      	ldrb	r3, [r3, #0]
 80054e6:	009b      	lsls	r3, r3, #2
 80054e8:	4413      	add	r3, r2
 80054ea:	881b      	ldrh	r3, [r3, #0]
 80054ec:	b29b      	uxth	r3, r3
 80054ee:	f107 020a 	add.w	r2, r7, #10
 80054f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054fa:	8013      	strh	r3, [r2, #0]
 80054fc:	f107 030a 	add.w	r3, r7, #10
 8005500:	f107 020a 	add.w	r2, r7, #10
 8005504:	8812      	ldrh	r2, [r2, #0]
 8005506:	f082 0210 	eor.w	r2, r2, #16
 800550a:	801a      	strh	r2, [r3, #0]
 800550c:	f107 030a 	add.w	r3, r7, #10
 8005510:	f107 020a 	add.w	r2, r7, #10
 8005514:	8812      	ldrh	r2, [r2, #0]
 8005516:	f082 0220 	eor.w	r2, r2, #32
 800551a:	801a      	strh	r2, [r3, #0]
 800551c:	1d3b      	adds	r3, r7, #4
 800551e:	681a      	ldr	r2, [r3, #0]
 8005520:	463b      	mov	r3, r7
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	781b      	ldrb	r3, [r3, #0]
 8005526:	009b      	lsls	r3, r3, #2
 8005528:	441a      	add	r2, r3
 800552a:	f107 030a 	add.w	r3, r7, #10
 800552e:	881b      	ldrh	r3, [r3, #0]
 8005530:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005534:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005538:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800553c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005540:	b29b      	uxth	r3, r3
 8005542:	8013      	strh	r3, [r2, #0]
 8005544:	e3b5      	b.n	8005cb2 <USB_EPStartXfer+0x15e2>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005546:	463b      	mov	r3, r7
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	7b1b      	ldrb	r3, [r3, #12]
 800554c:	2b00      	cmp	r3, #0
 800554e:	f040 8090 	bne.w	8005672 <USB_EPStartXfer+0xfa2>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005552:	463b      	mov	r3, r7
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	699a      	ldr	r2, [r3, #24]
 8005558:	463b      	mov	r3, r7
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	691b      	ldr	r3, [r3, #16]
 800555e:	429a      	cmp	r2, r3
 8005560:	d90e      	bls.n	8005580 <USB_EPStartXfer+0xeb0>
      {
        len = ep->maxpacket;
 8005562:	463b      	mov	r3, r7
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	691b      	ldr	r3, [r3, #16]
 8005568:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 800556c:	463b      	mov	r3, r7
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	699a      	ldr	r2, [r3, #24]
 8005572:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005576:	1ad2      	subs	r2, r2, r3
 8005578:	463b      	mov	r3, r7
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	619a      	str	r2, [r3, #24]
 800557e:	e008      	b.n	8005592 <USB_EPStartXfer+0xec2>
      }
      else
      {
        len = ep->xfer_len;
 8005580:	463b      	mov	r3, r7
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	699b      	ldr	r3, [r3, #24]
 8005586:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 800558a:	463b      	mov	r3, r7
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	2200      	movs	r2, #0
 8005590:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005592:	1d3b      	adds	r3, r7, #4
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800559a:	1d3b      	adds	r3, r7, #4
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055a2:	b29b      	uxth	r3, r3
 80055a4:	461a      	mov	r2, r3
 80055a6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80055aa:	4413      	add	r3, r2
 80055ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80055b0:	463b      	mov	r3, r7
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	781b      	ldrb	r3, [r3, #0]
 80055b6:	011a      	lsls	r2, r3, #4
 80055b8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80055bc:	4413      	add	r3, r2
 80055be:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80055c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80055c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d116      	bne.n	80055fc <USB_EPStartXfer+0xf2c>
 80055ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80055d2:	881b      	ldrh	r3, [r3, #0]
 80055d4:	b29b      	uxth	r3, r3
 80055d6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80055da:	b29a      	uxth	r2, r3
 80055dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80055e0:	801a      	strh	r2, [r3, #0]
 80055e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80055e6:	881b      	ldrh	r3, [r3, #0]
 80055e8:	b29b      	uxth	r3, r3
 80055ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055f2:	b29a      	uxth	r2, r3
 80055f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80055f8:	801a      	strh	r2, [r3, #0]
 80055fa:	e32c      	b.n	8005c56 <USB_EPStartXfer+0x1586>
 80055fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005600:	2b3e      	cmp	r3, #62	; 0x3e
 8005602:	d818      	bhi.n	8005636 <USB_EPStartXfer+0xf66>
 8005604:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005608:	085b      	lsrs	r3, r3, #1
 800560a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800560e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005612:	f003 0301 	and.w	r3, r3, #1
 8005616:	2b00      	cmp	r3, #0
 8005618:	d004      	beq.n	8005624 <USB_EPStartXfer+0xf54>
 800561a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800561e:	3301      	adds	r3, #1
 8005620:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005624:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005628:	b29b      	uxth	r3, r3
 800562a:	029b      	lsls	r3, r3, #10
 800562c:	b29a      	uxth	r2, r3
 800562e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005632:	801a      	strh	r2, [r3, #0]
 8005634:	e30f      	b.n	8005c56 <USB_EPStartXfer+0x1586>
 8005636:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800563a:	095b      	lsrs	r3, r3, #5
 800563c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005640:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005644:	f003 031f 	and.w	r3, r3, #31
 8005648:	2b00      	cmp	r3, #0
 800564a:	d104      	bne.n	8005656 <USB_EPStartXfer+0xf86>
 800564c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005650:	3b01      	subs	r3, #1
 8005652:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005656:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800565a:	b29b      	uxth	r3, r3
 800565c:	029b      	lsls	r3, r3, #10
 800565e:	b29b      	uxth	r3, r3
 8005660:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005664:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005668:	b29a      	uxth	r2, r3
 800566a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800566e:	801a      	strh	r2, [r3, #0]
 8005670:	e2f1      	b.n	8005c56 <USB_EPStartXfer+0x1586>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005672:	463b      	mov	r3, r7
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	78db      	ldrb	r3, [r3, #3]
 8005678:	2b02      	cmp	r3, #2
 800567a:	f040 818f 	bne.w	800599c <USB_EPStartXfer+0x12cc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800567e:	463b      	mov	r3, r7
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	785b      	ldrb	r3, [r3, #1]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d175      	bne.n	8005774 <USB_EPStartXfer+0x10a4>
 8005688:	1d3b      	adds	r3, r7, #4
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005690:	1d3b      	adds	r3, r7, #4
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005698:	b29b      	uxth	r3, r3
 800569a:	461a      	mov	r2, r3
 800569c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80056a0:	4413      	add	r3, r2
 80056a2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80056a6:	463b      	mov	r3, r7
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	781b      	ldrb	r3, [r3, #0]
 80056ac:	011a      	lsls	r2, r3, #4
 80056ae:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80056b2:	4413      	add	r3, r2
 80056b4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80056b8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80056bc:	463b      	mov	r3, r7
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	691b      	ldr	r3, [r3, #16]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d116      	bne.n	80056f4 <USB_EPStartXfer+0x1024>
 80056c6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80056ca:	881b      	ldrh	r3, [r3, #0]
 80056cc:	b29b      	uxth	r3, r3
 80056ce:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80056d2:	b29a      	uxth	r2, r3
 80056d4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80056d8:	801a      	strh	r2, [r3, #0]
 80056da:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80056de:	881b      	ldrh	r3, [r3, #0]
 80056e0:	b29b      	uxth	r3, r3
 80056e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056ea:	b29a      	uxth	r2, r3
 80056ec:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80056f0:	801a      	strh	r2, [r3, #0]
 80056f2:	e065      	b.n	80057c0 <USB_EPStartXfer+0x10f0>
 80056f4:	463b      	mov	r3, r7
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	691b      	ldr	r3, [r3, #16]
 80056fa:	2b3e      	cmp	r3, #62	; 0x3e
 80056fc:	d81a      	bhi.n	8005734 <USB_EPStartXfer+0x1064>
 80056fe:	463b      	mov	r3, r7
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	691b      	ldr	r3, [r3, #16]
 8005704:	085b      	lsrs	r3, r3, #1
 8005706:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800570a:	463b      	mov	r3, r7
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	691b      	ldr	r3, [r3, #16]
 8005710:	f003 0301 	and.w	r3, r3, #1
 8005714:	2b00      	cmp	r3, #0
 8005716:	d004      	beq.n	8005722 <USB_EPStartXfer+0x1052>
 8005718:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800571c:	3301      	adds	r3, #1
 800571e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005722:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005726:	b29b      	uxth	r3, r3
 8005728:	029b      	lsls	r3, r3, #10
 800572a:	b29a      	uxth	r2, r3
 800572c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005730:	801a      	strh	r2, [r3, #0]
 8005732:	e045      	b.n	80057c0 <USB_EPStartXfer+0x10f0>
 8005734:	463b      	mov	r3, r7
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	691b      	ldr	r3, [r3, #16]
 800573a:	095b      	lsrs	r3, r3, #5
 800573c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005740:	463b      	mov	r3, r7
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	691b      	ldr	r3, [r3, #16]
 8005746:	f003 031f 	and.w	r3, r3, #31
 800574a:	2b00      	cmp	r3, #0
 800574c:	d104      	bne.n	8005758 <USB_EPStartXfer+0x1088>
 800574e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005752:	3b01      	subs	r3, #1
 8005754:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005758:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800575c:	b29b      	uxth	r3, r3
 800575e:	029b      	lsls	r3, r3, #10
 8005760:	b29b      	uxth	r3, r3
 8005762:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005766:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800576a:	b29a      	uxth	r2, r3
 800576c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005770:	801a      	strh	r2, [r3, #0]
 8005772:	e025      	b.n	80057c0 <USB_EPStartXfer+0x10f0>
 8005774:	463b      	mov	r3, r7
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	785b      	ldrb	r3, [r3, #1]
 800577a:	2b01      	cmp	r3, #1
 800577c:	d120      	bne.n	80057c0 <USB_EPStartXfer+0x10f0>
 800577e:	1d3b      	adds	r3, r7, #4
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005786:	1d3b      	adds	r3, r7, #4
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800578e:	b29b      	uxth	r3, r3
 8005790:	461a      	mov	r2, r3
 8005792:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005796:	4413      	add	r3, r2
 8005798:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800579c:	463b      	mov	r3, r7
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	781b      	ldrb	r3, [r3, #0]
 80057a2:	011a      	lsls	r2, r3, #4
 80057a4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80057a8:	4413      	add	r3, r2
 80057aa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80057ae:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80057b2:	463b      	mov	r3, r7
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	691b      	ldr	r3, [r3, #16]
 80057b8:	b29a      	uxth	r2, r3
 80057ba:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80057be:	801a      	strh	r2, [r3, #0]
 80057c0:	1d3b      	adds	r3, r7, #4
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80057c8:	463b      	mov	r3, r7
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	785b      	ldrb	r3, [r3, #1]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d175      	bne.n	80058be <USB_EPStartXfer+0x11ee>
 80057d2:	1d3b      	adds	r3, r7, #4
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80057da:	1d3b      	adds	r3, r7, #4
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057e2:	b29b      	uxth	r3, r3
 80057e4:	461a      	mov	r2, r3
 80057e6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80057ea:	4413      	add	r3, r2
 80057ec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80057f0:	463b      	mov	r3, r7
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	781b      	ldrb	r3, [r3, #0]
 80057f6:	011a      	lsls	r2, r3, #4
 80057f8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80057fc:	4413      	add	r3, r2
 80057fe:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005802:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005806:	463b      	mov	r3, r7
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	691b      	ldr	r3, [r3, #16]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d116      	bne.n	800583e <USB_EPStartXfer+0x116e>
 8005810:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005814:	881b      	ldrh	r3, [r3, #0]
 8005816:	b29b      	uxth	r3, r3
 8005818:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800581c:	b29a      	uxth	r2, r3
 800581e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005822:	801a      	strh	r2, [r3, #0]
 8005824:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005828:	881b      	ldrh	r3, [r3, #0]
 800582a:	b29b      	uxth	r3, r3
 800582c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005830:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005834:	b29a      	uxth	r2, r3
 8005836:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800583a:	801a      	strh	r2, [r3, #0]
 800583c:	e061      	b.n	8005902 <USB_EPStartXfer+0x1232>
 800583e:	463b      	mov	r3, r7
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	691b      	ldr	r3, [r3, #16]
 8005844:	2b3e      	cmp	r3, #62	; 0x3e
 8005846:	d81a      	bhi.n	800587e <USB_EPStartXfer+0x11ae>
 8005848:	463b      	mov	r3, r7
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	691b      	ldr	r3, [r3, #16]
 800584e:	085b      	lsrs	r3, r3, #1
 8005850:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005854:	463b      	mov	r3, r7
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	691b      	ldr	r3, [r3, #16]
 800585a:	f003 0301 	and.w	r3, r3, #1
 800585e:	2b00      	cmp	r3, #0
 8005860:	d004      	beq.n	800586c <USB_EPStartXfer+0x119c>
 8005862:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005866:	3301      	adds	r3, #1
 8005868:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800586c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005870:	b29b      	uxth	r3, r3
 8005872:	029b      	lsls	r3, r3, #10
 8005874:	b29a      	uxth	r2, r3
 8005876:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800587a:	801a      	strh	r2, [r3, #0]
 800587c:	e041      	b.n	8005902 <USB_EPStartXfer+0x1232>
 800587e:	463b      	mov	r3, r7
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	691b      	ldr	r3, [r3, #16]
 8005884:	095b      	lsrs	r3, r3, #5
 8005886:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800588a:	463b      	mov	r3, r7
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	691b      	ldr	r3, [r3, #16]
 8005890:	f003 031f 	and.w	r3, r3, #31
 8005894:	2b00      	cmp	r3, #0
 8005896:	d104      	bne.n	80058a2 <USB_EPStartXfer+0x11d2>
 8005898:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800589c:	3b01      	subs	r3, #1
 800589e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80058a2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80058a6:	b29b      	uxth	r3, r3
 80058a8:	029b      	lsls	r3, r3, #10
 80058aa:	b29b      	uxth	r3, r3
 80058ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058b4:	b29a      	uxth	r2, r3
 80058b6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80058ba:	801a      	strh	r2, [r3, #0]
 80058bc:	e021      	b.n	8005902 <USB_EPStartXfer+0x1232>
 80058be:	463b      	mov	r3, r7
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	785b      	ldrb	r3, [r3, #1]
 80058c4:	2b01      	cmp	r3, #1
 80058c6:	d11c      	bne.n	8005902 <USB_EPStartXfer+0x1232>
 80058c8:	1d3b      	adds	r3, r7, #4
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058d0:	b29b      	uxth	r3, r3
 80058d2:	461a      	mov	r2, r3
 80058d4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80058d8:	4413      	add	r3, r2
 80058da:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80058de:	463b      	mov	r3, r7
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	781b      	ldrb	r3, [r3, #0]
 80058e4:	011a      	lsls	r2, r3, #4
 80058e6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80058ea:	4413      	add	r3, r2
 80058ec:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80058f0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80058f4:	463b      	mov	r3, r7
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	691b      	ldr	r3, [r3, #16]
 80058fa:	b29a      	uxth	r2, r3
 80058fc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005900:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8005902:	463b      	mov	r3, r7
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	69db      	ldr	r3, [r3, #28]
 8005908:	2b00      	cmp	r3, #0
 800590a:	f000 81a4 	beq.w	8005c56 <USB_EPStartXfer+0x1586>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800590e:	1d3b      	adds	r3, r7, #4
 8005910:	681a      	ldr	r2, [r3, #0]
 8005912:	463b      	mov	r3, r7
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	781b      	ldrb	r3, [r3, #0]
 8005918:	009b      	lsls	r3, r3, #2
 800591a:	4413      	add	r3, r2
 800591c:	881b      	ldrh	r3, [r3, #0]
 800591e:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005922:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8005926:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800592a:	2b00      	cmp	r3, #0
 800592c:	d005      	beq.n	800593a <USB_EPStartXfer+0x126a>
 800592e:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8005932:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005936:	2b00      	cmp	r3, #0
 8005938:	d10d      	bne.n	8005956 <USB_EPStartXfer+0x1286>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800593a:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800593e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005942:	2b00      	cmp	r3, #0
 8005944:	f040 8187 	bne.w	8005c56 <USB_EPStartXfer+0x1586>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005948:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800594c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005950:	2b00      	cmp	r3, #0
 8005952:	f040 8180 	bne.w	8005c56 <USB_EPStartXfer+0x1586>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8005956:	1d3b      	adds	r3, r7, #4
 8005958:	681a      	ldr	r2, [r3, #0]
 800595a:	463b      	mov	r3, r7
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	781b      	ldrb	r3, [r3, #0]
 8005960:	009b      	lsls	r3, r3, #2
 8005962:	4413      	add	r3, r2
 8005964:	881b      	ldrh	r3, [r3, #0]
 8005966:	b29b      	uxth	r3, r3
 8005968:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800596c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005970:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8005974:	1d3b      	adds	r3, r7, #4
 8005976:	681a      	ldr	r2, [r3, #0]
 8005978:	463b      	mov	r3, r7
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	781b      	ldrb	r3, [r3, #0]
 800597e:	009b      	lsls	r3, r3, #2
 8005980:	441a      	add	r2, r3
 8005982:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8005986:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800598a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800598e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005992:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005996:	b29b      	uxth	r3, r3
 8005998:	8013      	strh	r3, [r2, #0]
 800599a:	e15c      	b.n	8005c56 <USB_EPStartXfer+0x1586>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800599c:	463b      	mov	r3, r7
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	78db      	ldrb	r3, [r3, #3]
 80059a2:	2b01      	cmp	r3, #1
 80059a4:	f040 8155 	bne.w	8005c52 <USB_EPStartXfer+0x1582>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80059a8:	463b      	mov	r3, r7
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	699a      	ldr	r2, [r3, #24]
 80059ae:	463b      	mov	r3, r7
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	691b      	ldr	r3, [r3, #16]
 80059b4:	429a      	cmp	r2, r3
 80059b6:	d90e      	bls.n	80059d6 <USB_EPStartXfer+0x1306>
        {
          len = ep->maxpacket;
 80059b8:	463b      	mov	r3, r7
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	691b      	ldr	r3, [r3, #16]
 80059be:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 80059c2:	463b      	mov	r3, r7
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	699a      	ldr	r2, [r3, #24]
 80059c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059cc:	1ad2      	subs	r2, r2, r3
 80059ce:	463b      	mov	r3, r7
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	619a      	str	r2, [r3, #24]
 80059d4:	e008      	b.n	80059e8 <USB_EPStartXfer+0x1318>
        }
        else
        {
          len = ep->xfer_len;
 80059d6:	463b      	mov	r3, r7
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	699b      	ldr	r3, [r3, #24]
 80059dc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 80059e0:	463b      	mov	r3, r7
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	2200      	movs	r2, #0
 80059e6:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80059e8:	463b      	mov	r3, r7
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	785b      	ldrb	r3, [r3, #1]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d16f      	bne.n	8005ad2 <USB_EPStartXfer+0x1402>
 80059f2:	1d3b      	adds	r3, r7, #4
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80059fa:	1d3b      	adds	r3, r7, #4
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a02:	b29b      	uxth	r3, r3
 8005a04:	461a      	mov	r2, r3
 8005a06:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005a0a:	4413      	add	r3, r2
 8005a0c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005a10:	463b      	mov	r3, r7
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	781b      	ldrb	r3, [r3, #0]
 8005a16:	011a      	lsls	r2, r3, #4
 8005a18:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005a1c:	4413      	add	r3, r2
 8005a1e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005a22:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005a26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d116      	bne.n	8005a5c <USB_EPStartXfer+0x138c>
 8005a2e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005a32:	881b      	ldrh	r3, [r3, #0]
 8005a34:	b29b      	uxth	r3, r3
 8005a36:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005a3a:	b29a      	uxth	r2, r3
 8005a3c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005a40:	801a      	strh	r2, [r3, #0]
 8005a42:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005a46:	881b      	ldrh	r3, [r3, #0]
 8005a48:	b29b      	uxth	r3, r3
 8005a4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a52:	b29a      	uxth	r2, r3
 8005a54:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005a58:	801a      	strh	r2, [r3, #0]
 8005a5a:	e05f      	b.n	8005b1c <USB_EPStartXfer+0x144c>
 8005a5c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a60:	2b3e      	cmp	r3, #62	; 0x3e
 8005a62:	d818      	bhi.n	8005a96 <USB_EPStartXfer+0x13c6>
 8005a64:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a68:	085b      	lsrs	r3, r3, #1
 8005a6a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005a6e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a72:	f003 0301 	and.w	r3, r3, #1
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d004      	beq.n	8005a84 <USB_EPStartXfer+0x13b4>
 8005a7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a7e:	3301      	adds	r3, #1
 8005a80:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005a84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a88:	b29b      	uxth	r3, r3
 8005a8a:	029b      	lsls	r3, r3, #10
 8005a8c:	b29a      	uxth	r2, r3
 8005a8e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005a92:	801a      	strh	r2, [r3, #0]
 8005a94:	e042      	b.n	8005b1c <USB_EPStartXfer+0x144c>
 8005a96:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a9a:	095b      	lsrs	r3, r3, #5
 8005a9c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005aa0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005aa4:	f003 031f 	and.w	r3, r3, #31
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d104      	bne.n	8005ab6 <USB_EPStartXfer+0x13e6>
 8005aac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ab0:	3b01      	subs	r3, #1
 8005ab2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005ab6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005aba:	b29b      	uxth	r3, r3
 8005abc:	029b      	lsls	r3, r3, #10
 8005abe:	b29b      	uxth	r3, r3
 8005ac0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ac4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ac8:	b29a      	uxth	r2, r3
 8005aca:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005ace:	801a      	strh	r2, [r3, #0]
 8005ad0:	e024      	b.n	8005b1c <USB_EPStartXfer+0x144c>
 8005ad2:	463b      	mov	r3, r7
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	785b      	ldrb	r3, [r3, #1]
 8005ad8:	2b01      	cmp	r3, #1
 8005ada:	d11f      	bne.n	8005b1c <USB_EPStartXfer+0x144c>
 8005adc:	1d3b      	adds	r3, r7, #4
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005ae4:	1d3b      	adds	r3, r7, #4
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005aec:	b29b      	uxth	r3, r3
 8005aee:	461a      	mov	r2, r3
 8005af0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005af4:	4413      	add	r3, r2
 8005af6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005afa:	463b      	mov	r3, r7
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	781b      	ldrb	r3, [r3, #0]
 8005b00:	011a      	lsls	r2, r3, #4
 8005b02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b06:	4413      	add	r3, r2
 8005b08:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005b0c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005b10:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b14:	b29a      	uxth	r2, r3
 8005b16:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005b1a:	801a      	strh	r2, [r3, #0]
 8005b1c:	1d3b      	adds	r3, r7, #4
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005b24:	463b      	mov	r3, r7
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	785b      	ldrb	r3, [r3, #1]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d16f      	bne.n	8005c0e <USB_EPStartXfer+0x153e>
 8005b2e:	1d3b      	adds	r3, r7, #4
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005b36:	1d3b      	adds	r3, r7, #4
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b3e:	b29b      	uxth	r3, r3
 8005b40:	461a      	mov	r2, r3
 8005b42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b46:	4413      	add	r3, r2
 8005b48:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005b4c:	463b      	mov	r3, r7
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	781b      	ldrb	r3, [r3, #0]
 8005b52:	011a      	lsls	r2, r3, #4
 8005b54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b58:	4413      	add	r3, r2
 8005b5a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005b5e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005b62:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d116      	bne.n	8005b98 <USB_EPStartXfer+0x14c8>
 8005b6a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005b6e:	881b      	ldrh	r3, [r3, #0]
 8005b70:	b29b      	uxth	r3, r3
 8005b72:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005b76:	b29a      	uxth	r2, r3
 8005b78:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005b7c:	801a      	strh	r2, [r3, #0]
 8005b7e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005b82:	881b      	ldrh	r3, [r3, #0]
 8005b84:	b29b      	uxth	r3, r3
 8005b86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b8e:	b29a      	uxth	r2, r3
 8005b90:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005b94:	801a      	strh	r2, [r3, #0]
 8005b96:	e05e      	b.n	8005c56 <USB_EPStartXfer+0x1586>
 8005b98:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b9c:	2b3e      	cmp	r3, #62	; 0x3e
 8005b9e:	d818      	bhi.n	8005bd2 <USB_EPStartXfer+0x1502>
 8005ba0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ba4:	085b      	lsrs	r3, r3, #1
 8005ba6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005baa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bae:	f003 0301 	and.w	r3, r3, #1
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d004      	beq.n	8005bc0 <USB_EPStartXfer+0x14f0>
 8005bb6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005bba:	3301      	adds	r3, #1
 8005bbc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005bc0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005bc4:	b29b      	uxth	r3, r3
 8005bc6:	029b      	lsls	r3, r3, #10
 8005bc8:	b29a      	uxth	r2, r3
 8005bca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005bce:	801a      	strh	r2, [r3, #0]
 8005bd0:	e041      	b.n	8005c56 <USB_EPStartXfer+0x1586>
 8005bd2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bd6:	095b      	lsrs	r3, r3, #5
 8005bd8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005bdc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005be0:	f003 031f 	and.w	r3, r3, #31
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d104      	bne.n	8005bf2 <USB_EPStartXfer+0x1522>
 8005be8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005bec:	3b01      	subs	r3, #1
 8005bee:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005bf2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005bf6:	b29b      	uxth	r3, r3
 8005bf8:	029b      	lsls	r3, r3, #10
 8005bfa:	b29b      	uxth	r3, r3
 8005bfc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c04:	b29a      	uxth	r2, r3
 8005c06:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005c0a:	801a      	strh	r2, [r3, #0]
 8005c0c:	e023      	b.n	8005c56 <USB_EPStartXfer+0x1586>
 8005c0e:	463b      	mov	r3, r7
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	785b      	ldrb	r3, [r3, #1]
 8005c14:	2b01      	cmp	r3, #1
 8005c16:	d11e      	bne.n	8005c56 <USB_EPStartXfer+0x1586>
 8005c18:	1d3b      	adds	r3, r7, #4
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c20:	b29b      	uxth	r3, r3
 8005c22:	461a      	mov	r2, r3
 8005c24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c28:	4413      	add	r3, r2
 8005c2a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005c2e:	463b      	mov	r3, r7
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	781b      	ldrb	r3, [r3, #0]
 8005c34:	011a      	lsls	r2, r3, #4
 8005c36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c3a:	4413      	add	r3, r2
 8005c3c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005c40:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005c44:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c48:	b29a      	uxth	r2, r3
 8005c4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c4e:	801a      	strh	r2, [r3, #0]
 8005c50:	e001      	b.n	8005c56 <USB_EPStartXfer+0x1586>
      }
      else
      {
        return HAL_ERROR;
 8005c52:	2301      	movs	r3, #1
 8005c54:	e02e      	b.n	8005cb4 <USB_EPStartXfer+0x15e4>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005c56:	1d3b      	adds	r3, r7, #4
 8005c58:	681a      	ldr	r2, [r3, #0]
 8005c5a:	463b      	mov	r3, r7
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	781b      	ldrb	r3, [r3, #0]
 8005c60:	009b      	lsls	r3, r3, #2
 8005c62:	4413      	add	r3, r2
 8005c64:	881b      	ldrh	r3, [r3, #0]
 8005c66:	b29b      	uxth	r3, r3
 8005c68:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c70:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8005c74:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8005c78:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005c7c:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8005c80:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8005c84:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005c88:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8005c8c:	1d3b      	adds	r3, r7, #4
 8005c8e:	681a      	ldr	r2, [r3, #0]
 8005c90:	463b      	mov	r3, r7
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	781b      	ldrb	r3, [r3, #0]
 8005c96:	009b      	lsls	r3, r3, #2
 8005c98:	441a      	add	r2, r3
 8005c9a:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8005c9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ca2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ca6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005caa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cae:	b29b      	uxth	r3, r3
 8005cb0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005cb2:	2300      	movs	r3, #0
}
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}

08005cbe <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005cbe:	b480      	push	{r7}
 8005cc0:	b085      	sub	sp, #20
 8005cc2:	af00      	add	r7, sp, #0
 8005cc4:	6078      	str	r0, [r7, #4]
 8005cc6:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	785b      	ldrb	r3, [r3, #1]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d020      	beq.n	8005d12 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8005cd0:	687a      	ldr	r2, [r7, #4]
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	781b      	ldrb	r3, [r3, #0]
 8005cd6:	009b      	lsls	r3, r3, #2
 8005cd8:	4413      	add	r3, r2
 8005cda:	881b      	ldrh	r3, [r3, #0]
 8005cdc:	b29b      	uxth	r3, r3
 8005cde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ce2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ce6:	81bb      	strh	r3, [r7, #12]
 8005ce8:	89bb      	ldrh	r3, [r7, #12]
 8005cea:	f083 0310 	eor.w	r3, r3, #16
 8005cee:	81bb      	strh	r3, [r7, #12]
 8005cf0:	687a      	ldr	r2, [r7, #4]
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	781b      	ldrb	r3, [r3, #0]
 8005cf6:	009b      	lsls	r3, r3, #2
 8005cf8:	441a      	add	r2, r3
 8005cfa:	89bb      	ldrh	r3, [r7, #12]
 8005cfc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d0c:	b29b      	uxth	r3, r3
 8005d0e:	8013      	strh	r3, [r2, #0]
 8005d10:	e01f      	b.n	8005d52 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005d12:	687a      	ldr	r2, [r7, #4]
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	781b      	ldrb	r3, [r3, #0]
 8005d18:	009b      	lsls	r3, r3, #2
 8005d1a:	4413      	add	r3, r2
 8005d1c:	881b      	ldrh	r3, [r3, #0]
 8005d1e:	b29b      	uxth	r3, r3
 8005d20:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d28:	81fb      	strh	r3, [r7, #14]
 8005d2a:	89fb      	ldrh	r3, [r7, #14]
 8005d2c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005d30:	81fb      	strh	r3, [r7, #14]
 8005d32:	687a      	ldr	r2, [r7, #4]
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	781b      	ldrb	r3, [r3, #0]
 8005d38:	009b      	lsls	r3, r3, #2
 8005d3a:	441a      	add	r2, r3
 8005d3c:	89fb      	ldrh	r3, [r7, #14]
 8005d3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d4e:	b29b      	uxth	r3, r3
 8005d50:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005d52:	2300      	movs	r3, #0
}
 8005d54:	4618      	mov	r0, r3
 8005d56:	3714      	adds	r7, #20
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	bc80      	pop	{r7}
 8005d5c:	4770      	bx	lr

08005d5e <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005d5e:	b480      	push	{r7}
 8005d60:	b087      	sub	sp, #28
 8005d62:	af00      	add	r7, sp, #0
 8005d64:	6078      	str	r0, [r7, #4]
 8005d66:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	7b1b      	ldrb	r3, [r3, #12]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	f040 809d 	bne.w	8005eac <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	785b      	ldrb	r3, [r3, #1]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d04c      	beq.n	8005e14 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005d7a:	687a      	ldr	r2, [r7, #4]
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	781b      	ldrb	r3, [r3, #0]
 8005d80:	009b      	lsls	r3, r3, #2
 8005d82:	4413      	add	r3, r2
 8005d84:	881b      	ldrh	r3, [r3, #0]
 8005d86:	823b      	strh	r3, [r7, #16]
 8005d88:	8a3b      	ldrh	r3, [r7, #16]
 8005d8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d01b      	beq.n	8005dca <USB_EPClearStall+0x6c>
 8005d92:	687a      	ldr	r2, [r7, #4]
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	781b      	ldrb	r3, [r3, #0]
 8005d98:	009b      	lsls	r3, r3, #2
 8005d9a:	4413      	add	r3, r2
 8005d9c:	881b      	ldrh	r3, [r3, #0]
 8005d9e:	b29b      	uxth	r3, r3
 8005da0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005da4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005da8:	81fb      	strh	r3, [r7, #14]
 8005daa:	687a      	ldr	r2, [r7, #4]
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	781b      	ldrb	r3, [r3, #0]
 8005db0:	009b      	lsls	r3, r3, #2
 8005db2:	441a      	add	r2, r3
 8005db4:	89fb      	ldrh	r3, [r7, #14]
 8005db6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005dba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005dbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005dc2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005dc6:	b29b      	uxth	r3, r3
 8005dc8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	78db      	ldrb	r3, [r3, #3]
 8005dce:	2b01      	cmp	r3, #1
 8005dd0:	d06c      	beq.n	8005eac <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005dd2:	687a      	ldr	r2, [r7, #4]
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	781b      	ldrb	r3, [r3, #0]
 8005dd8:	009b      	lsls	r3, r3, #2
 8005dda:	4413      	add	r3, r2
 8005ddc:	881b      	ldrh	r3, [r3, #0]
 8005dde:	b29b      	uxth	r3, r3
 8005de0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005de4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005de8:	81bb      	strh	r3, [r7, #12]
 8005dea:	89bb      	ldrh	r3, [r7, #12]
 8005dec:	f083 0320 	eor.w	r3, r3, #32
 8005df0:	81bb      	strh	r3, [r7, #12]
 8005df2:	687a      	ldr	r2, [r7, #4]
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	781b      	ldrb	r3, [r3, #0]
 8005df8:	009b      	lsls	r3, r3, #2
 8005dfa:	441a      	add	r2, r3
 8005dfc:	89bb      	ldrh	r3, [r7, #12]
 8005dfe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e0e:	b29b      	uxth	r3, r3
 8005e10:	8013      	strh	r3, [r2, #0]
 8005e12:	e04b      	b.n	8005eac <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005e14:	687a      	ldr	r2, [r7, #4]
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	781b      	ldrb	r3, [r3, #0]
 8005e1a:	009b      	lsls	r3, r3, #2
 8005e1c:	4413      	add	r3, r2
 8005e1e:	881b      	ldrh	r3, [r3, #0]
 8005e20:	82fb      	strh	r3, [r7, #22]
 8005e22:	8afb      	ldrh	r3, [r7, #22]
 8005e24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d01b      	beq.n	8005e64 <USB_EPClearStall+0x106>
 8005e2c:	687a      	ldr	r2, [r7, #4]
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	781b      	ldrb	r3, [r3, #0]
 8005e32:	009b      	lsls	r3, r3, #2
 8005e34:	4413      	add	r3, r2
 8005e36:	881b      	ldrh	r3, [r3, #0]
 8005e38:	b29b      	uxth	r3, r3
 8005e3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e42:	82bb      	strh	r3, [r7, #20]
 8005e44:	687a      	ldr	r2, [r7, #4]
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	781b      	ldrb	r3, [r3, #0]
 8005e4a:	009b      	lsls	r3, r3, #2
 8005e4c:	441a      	add	r2, r3
 8005e4e:	8abb      	ldrh	r3, [r7, #20]
 8005e50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e58:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005e5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e60:	b29b      	uxth	r3, r3
 8005e62:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005e64:	687a      	ldr	r2, [r7, #4]
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	781b      	ldrb	r3, [r3, #0]
 8005e6a:	009b      	lsls	r3, r3, #2
 8005e6c:	4413      	add	r3, r2
 8005e6e:	881b      	ldrh	r3, [r3, #0]
 8005e70:	b29b      	uxth	r3, r3
 8005e72:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e7a:	827b      	strh	r3, [r7, #18]
 8005e7c:	8a7b      	ldrh	r3, [r7, #18]
 8005e7e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005e82:	827b      	strh	r3, [r7, #18]
 8005e84:	8a7b      	ldrh	r3, [r7, #18]
 8005e86:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005e8a:	827b      	strh	r3, [r7, #18]
 8005e8c:	687a      	ldr	r2, [r7, #4]
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	781b      	ldrb	r3, [r3, #0]
 8005e92:	009b      	lsls	r3, r3, #2
 8005e94:	441a      	add	r2, r3
 8005e96:	8a7b      	ldrh	r3, [r7, #18]
 8005e98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ea0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ea4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ea8:	b29b      	uxth	r3, r3
 8005eaa:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005eac:	2300      	movs	r3, #0
}
 8005eae:	4618      	mov	r0, r3
 8005eb0:	371c      	adds	r7, #28
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	bc80      	pop	{r7}
 8005eb6:	4770      	bx	lr

08005eb8 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8005eb8:	b480      	push	{r7}
 8005eba:	b083      	sub	sp, #12
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
 8005ec0:	460b      	mov	r3, r1
 8005ec2:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8005ec4:	78fb      	ldrb	r3, [r7, #3]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d103      	bne.n	8005ed2 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2280      	movs	r2, #128	; 0x80
 8005ece:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8005ed2:	2300      	movs	r3, #0
}
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	370c      	adds	r7, #12
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	bc80      	pop	{r7}
 8005edc:	4770      	bx	lr

08005ede <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8005ede:	b480      	push	{r7}
 8005ee0:	b083      	sub	sp, #12
 8005ee2:	af00      	add	r7, sp, #0
 8005ee4:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005ee6:	2300      	movs	r3, #0
}
 8005ee8:	4618      	mov	r0, r3
 8005eea:	370c      	adds	r7, #12
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bc80      	pop	{r7}
 8005ef0:	4770      	bx	lr

08005ef2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8005ef2:	b480      	push	{r7}
 8005ef4:	b083      	sub	sp, #12
 8005ef6:	af00      	add	r7, sp, #0
 8005ef8:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005efa:	2300      	movs	r3, #0
}
 8005efc:	4618      	mov	r0, r3
 8005efe:	370c      	adds	r7, #12
 8005f00:	46bd      	mov	sp, r7
 8005f02:	bc80      	pop	{r7}
 8005f04:	4770      	bx	lr

08005f06 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8005f06:	b480      	push	{r7}
 8005f08:	b085      	sub	sp, #20
 8005f0a:	af00      	add	r7, sp, #0
 8005f0c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005f14:	b29b      	uxth	r3, r3
 8005f16:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8005f18:	68fb      	ldr	r3, [r7, #12]
}
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	3714      	adds	r7, #20
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	bc80      	pop	{r7}
 8005f22:	4770      	bx	lr

08005f24 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8005f24:	b480      	push	{r7}
 8005f26:	b083      	sub	sp, #12
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
 8005f2c:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005f2e:	2300      	movs	r3, #0
}
 8005f30:	4618      	mov	r0, r3
 8005f32:	370c      	adds	r7, #12
 8005f34:	46bd      	mov	sp, r7
 8005f36:	bc80      	pop	{r7}
 8005f38:	4770      	bx	lr

08005f3a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005f3a:	b480      	push	{r7}
 8005f3c:	b08d      	sub	sp, #52	; 0x34
 8005f3e:	af00      	add	r7, sp, #0
 8005f40:	60f8      	str	r0, [r7, #12]
 8005f42:	60b9      	str	r1, [r7, #8]
 8005f44:	4611      	mov	r1, r2
 8005f46:	461a      	mov	r2, r3
 8005f48:	460b      	mov	r3, r1
 8005f4a:	80fb      	strh	r3, [r7, #6]
 8005f4c:	4613      	mov	r3, r2
 8005f4e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005f50:	88bb      	ldrh	r3, [r7, #4]
 8005f52:	3301      	adds	r3, #1
 8005f54:	085b      	lsrs	r3, r3, #1
 8005f56:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005f60:	88fb      	ldrh	r3, [r7, #6]
 8005f62:	005a      	lsls	r2, r3, #1
 8005f64:	69fb      	ldr	r3, [r7, #28]
 8005f66:	4413      	add	r3, r2
 8005f68:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f6c:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8005f6e:	6a3b      	ldr	r3, [r7, #32]
 8005f70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f72:	e01e      	b.n	8005fb2 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8005f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f76:	781b      	ldrb	r3, [r3, #0]
 8005f78:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8005f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f7c:	3301      	adds	r3, #1
 8005f7e:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8005f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f82:	781b      	ldrb	r3, [r3, #0]
 8005f84:	b29b      	uxth	r3, r3
 8005f86:	021b      	lsls	r3, r3, #8
 8005f88:	b29b      	uxth	r3, r3
 8005f8a:	461a      	mov	r2, r3
 8005f8c:	69bb      	ldr	r3, [r7, #24]
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8005f92:	697b      	ldr	r3, [r7, #20]
 8005f94:	b29a      	uxth	r2, r3
 8005f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f98:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8005f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f9c:	3302      	adds	r3, #2
 8005f9e:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8005fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fa2:	3302      	adds	r3, #2
 8005fa4:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8005fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa8:	3301      	adds	r3, #1
 8005faa:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8005fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fae:	3b01      	subs	r3, #1
 8005fb0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005fb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d1dd      	bne.n	8005f74 <USB_WritePMA+0x3a>
  }
}
 8005fb8:	bf00      	nop
 8005fba:	bf00      	nop
 8005fbc:	3734      	adds	r7, #52	; 0x34
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bc80      	pop	{r7}
 8005fc2:	4770      	bx	lr

08005fc4 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	b08b      	sub	sp, #44	; 0x2c
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	60f8      	str	r0, [r7, #12]
 8005fcc:	60b9      	str	r1, [r7, #8]
 8005fce:	4611      	mov	r1, r2
 8005fd0:	461a      	mov	r2, r3
 8005fd2:	460b      	mov	r3, r1
 8005fd4:	80fb      	strh	r3, [r7, #6]
 8005fd6:	4613      	mov	r3, r2
 8005fd8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8005fda:	88bb      	ldrh	r3, [r7, #4]
 8005fdc:	085b      	lsrs	r3, r3, #1
 8005fde:	b29b      	uxth	r3, r3
 8005fe0:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005fea:	88fb      	ldrh	r3, [r7, #6]
 8005fec:	005a      	lsls	r2, r3, #1
 8005fee:	697b      	ldr	r3, [r7, #20]
 8005ff0:	4413      	add	r3, r2
 8005ff2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ff6:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8005ff8:	69bb      	ldr	r3, [r7, #24]
 8005ffa:	627b      	str	r3, [r7, #36]	; 0x24
 8005ffc:	e01b      	b.n	8006036 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8005ffe:	6a3b      	ldr	r3, [r7, #32]
 8006000:	881b      	ldrh	r3, [r3, #0]
 8006002:	b29b      	uxth	r3, r3
 8006004:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006006:	6a3b      	ldr	r3, [r7, #32]
 8006008:	3302      	adds	r3, #2
 800600a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800600c:	693b      	ldr	r3, [r7, #16]
 800600e:	b2da      	uxtb	r2, r3
 8006010:	69fb      	ldr	r3, [r7, #28]
 8006012:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006014:	69fb      	ldr	r3, [r7, #28]
 8006016:	3301      	adds	r3, #1
 8006018:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800601a:	693b      	ldr	r3, [r7, #16]
 800601c:	0a1b      	lsrs	r3, r3, #8
 800601e:	b2da      	uxtb	r2, r3
 8006020:	69fb      	ldr	r3, [r7, #28]
 8006022:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006024:	69fb      	ldr	r3, [r7, #28]
 8006026:	3301      	adds	r3, #1
 8006028:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800602a:	6a3b      	ldr	r3, [r7, #32]
 800602c:	3302      	adds	r3, #2
 800602e:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8006030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006032:	3b01      	subs	r3, #1
 8006034:	627b      	str	r3, [r7, #36]	; 0x24
 8006036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006038:	2b00      	cmp	r3, #0
 800603a:	d1e0      	bne.n	8005ffe <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800603c:	88bb      	ldrh	r3, [r7, #4]
 800603e:	f003 0301 	and.w	r3, r3, #1
 8006042:	b29b      	uxth	r3, r3
 8006044:	2b00      	cmp	r3, #0
 8006046:	d007      	beq.n	8006058 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8006048:	6a3b      	ldr	r3, [r7, #32]
 800604a:	881b      	ldrh	r3, [r3, #0]
 800604c:	b29b      	uxth	r3, r3
 800604e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006050:	693b      	ldr	r3, [r7, #16]
 8006052:	b2da      	uxtb	r2, r3
 8006054:	69fb      	ldr	r3, [r7, #28]
 8006056:	701a      	strb	r2, [r3, #0]
  }
}
 8006058:	bf00      	nop
 800605a:	372c      	adds	r7, #44	; 0x2c
 800605c:	46bd      	mov	sp, r7
 800605e:	bc80      	pop	{r7}
 8006060:	4770      	bx	lr

08006062 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006062:	b580      	push	{r7, lr}
 8006064:	b082      	sub	sp, #8
 8006066:	af00      	add	r7, sp, #0
 8006068:	6078      	str	r0, [r7, #4]
 800606a:	460b      	mov	r3, r1
 800606c:	70fb      	strb	r3, [r7, #3]
  /* Open EP IN */
  USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 800606e:	2304      	movs	r3, #4
 8006070:	2203      	movs	r2, #3
 8006072:	2181      	movs	r1, #129	; 0x81
 8006074:	6878      	ldr	r0, [r7, #4]
 8006076:	f001 fc84 	bl	8007982 <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2201      	movs	r2, #1
 800607e:	62da      	str	r2, [r3, #44]	; 0x2c

  pdev->pClassData = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8006080:	2010      	movs	r0, #16
 8006082:	f001 fd93 	bl	8007bac <USBD_static_malloc>
 8006086:	4602      	mov	r2, r0
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006094:	2b00      	cmp	r3, #0
 8006096:	d101      	bne.n	800609c <USBD_HID_Init+0x3a>
  {
    return USBD_FAIL;
 8006098:	2302      	movs	r3, #2
 800609a:	e005      	b.n	80060a8 <USBD_HID_Init+0x46>
  }

  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060a2:	2200      	movs	r2, #0
 80060a4:	731a      	strb	r2, [r3, #12]

  return USBD_OK;
 80060a6:	2300      	movs	r3, #0
}
 80060a8:	4618      	mov	r0, r3
 80060aa:	3708      	adds	r7, #8
 80060ac:	46bd      	mov	sp, r7
 80060ae:	bd80      	pop	{r7, pc}

080060b0 <USBD_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_DeInit(USBD_HandleTypeDef *pdev,
                                uint8_t cfgidx)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b082      	sub	sp, #8
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
 80060b8:	460b      	mov	r3, r1
 80060ba:	70fb      	strb	r3, [r7, #3]
  /* Close HID EPs */
  USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 80060bc:	2181      	movs	r1, #129	; 0x81
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	f001 fc85 	bl	80079ce <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2200      	movs	r2, #0
 80060c8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d009      	beq.n	80060e8 <USBD_HID_DeInit+0x38>
  {
    USBD_free(pdev->pClassData);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060da:	4618      	mov	r0, r3
 80060dc:	f001 fd72 	bl	8007bc4 <USBD_static_free>
    pdev->pClassData = NULL;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2200      	movs	r2, #0
 80060e4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return USBD_OK;
 80060e8:	2300      	movs	r3, #0
}
 80060ea:	4618      	mov	r0, r3
 80060ec:	3708      	adds	r7, #8
 80060ee:	46bd      	mov	sp, r7
 80060f0:	bd80      	pop	{r7, pc}
	...

080060f4 <USBD_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_HID_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b088      	sub	sp, #32
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
 80060fc:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *) pdev->pClassData;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006104:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8006106:	2300      	movs	r3, #0
 8006108:	83fb      	strh	r3, [r7, #30]
  uint8_t *pbuf = NULL;
 800610a:	2300      	movs	r3, #0
 800610c:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 800610e:	2300      	movs	r3, #0
 8006110:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 8006112:	2300      	movs	r3, #0
 8006114:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	781b      	ldrb	r3, [r3, #0]
 800611a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800611e:	2b00      	cmp	r3, #0
 8006120:	d045      	beq.n	80061ae <USBD_HID_Setup+0xba>
 8006122:	2b20      	cmp	r3, #32
 8006124:	f040 80d3 	bne.w	80062ce <USBD_HID_Setup+0x1da>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	785b      	ldrb	r3, [r3, #1]
 800612c:	3b02      	subs	r3, #2
 800612e:	2b09      	cmp	r3, #9
 8006130:	d835      	bhi.n	800619e <USBD_HID_Setup+0xaa>
 8006132:	a201      	add	r2, pc, #4	; (adr r2, 8006138 <USBD_HID_Setup+0x44>)
 8006134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006138:	0800618f 	.word	0x0800618f
 800613c:	0800616f 	.word	0x0800616f
 8006140:	0800619f 	.word	0x0800619f
 8006144:	0800619f 	.word	0x0800619f
 8006148:	0800619f 	.word	0x0800619f
 800614c:	0800619f 	.word	0x0800619f
 8006150:	0800619f 	.word	0x0800619f
 8006154:	0800619f 	.word	0x0800619f
 8006158:	0800617d 	.word	0x0800617d
 800615c:	08006161 	.word	0x08006161
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	885b      	ldrh	r3, [r3, #2]
 8006164:	b2db      	uxtb	r3, r3
 8006166:	461a      	mov	r2, r3
 8006168:	693b      	ldr	r3, [r7, #16]
 800616a:	601a      	str	r2, [r3, #0]
          break;
 800616c:	e01e      	b.n	80061ac <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 800616e:	693b      	ldr	r3, [r7, #16]
 8006170:	2201      	movs	r2, #1
 8006172:	4619      	mov	r1, r3
 8006174:	6878      	ldr	r0, [r7, #4]
 8006176:	f001 f944 	bl	8007402 <USBD_CtlSendData>
          break;
 800617a:	e017      	b.n	80061ac <USBD_HID_Setup+0xb8>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	885b      	ldrh	r3, [r3, #2]
 8006180:	0a1b      	lsrs	r3, r3, #8
 8006182:	b29b      	uxth	r3, r3
 8006184:	b2db      	uxtb	r3, r3
 8006186:	461a      	mov	r2, r3
 8006188:	693b      	ldr	r3, [r7, #16]
 800618a:	605a      	str	r2, [r3, #4]
          break;
 800618c:	e00e      	b.n	80061ac <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 800618e:	693b      	ldr	r3, [r7, #16]
 8006190:	3304      	adds	r3, #4
 8006192:	2201      	movs	r2, #1
 8006194:	4619      	mov	r1, r3
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f001 f933 	bl	8007402 <USBD_CtlSendData>
          break;
 800619c:	e006      	b.n	80061ac <USBD_HID_Setup+0xb8>

        default:
          USBD_CtlError(pdev, req);
 800619e:	6839      	ldr	r1, [r7, #0]
 80061a0:	6878      	ldr	r0, [r7, #4]
 80061a2:	f001 f8c4 	bl	800732e <USBD_CtlError>
          ret = USBD_FAIL;
 80061a6:	2302      	movs	r3, #2
 80061a8:	75fb      	strb	r3, [r7, #23]
          break;
 80061aa:	bf00      	nop
      }
      break;
 80061ac:	e096      	b.n	80062dc <USBD_HID_Setup+0x1e8>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	785b      	ldrb	r3, [r3, #1]
 80061b2:	2b0b      	cmp	r3, #11
 80061b4:	f200 8083 	bhi.w	80062be <USBD_HID_Setup+0x1ca>
 80061b8:	a201      	add	r2, pc, #4	; (adr r2, 80061c0 <USBD_HID_Setup+0xcc>)
 80061ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061be:	bf00      	nop
 80061c0:	080061f1 	.word	0x080061f1
 80061c4:	080062bf 	.word	0x080062bf
 80061c8:	080062bf 	.word	0x080062bf
 80061cc:	080062bf 	.word	0x080062bf
 80061d0:	080062bf 	.word	0x080062bf
 80061d4:	080062bf 	.word	0x080062bf
 80061d8:	08006219 	.word	0x08006219
 80061dc:	080062bf 	.word	0x080062bf
 80061e0:	080062bf 	.word	0x080062bf
 80061e4:	080062bf 	.word	0x080062bf
 80061e8:	08006271 	.word	0x08006271
 80061ec:	08006299 	.word	0x08006299
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061f6:	2b03      	cmp	r3, #3
 80061f8:	d107      	bne.n	800620a <USBD_HID_Setup+0x116>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80061fa:	f107 030e 	add.w	r3, r7, #14
 80061fe:	2202      	movs	r2, #2
 8006200:	4619      	mov	r1, r3
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	f001 f8fd 	bl	8007402 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006208:	e060      	b.n	80062cc <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 800620a:	6839      	ldr	r1, [r7, #0]
 800620c:	6878      	ldr	r0, [r7, #4]
 800620e:	f001 f88e 	bl	800732e <USBD_CtlError>
            ret = USBD_FAIL;
 8006212:	2302      	movs	r3, #2
 8006214:	75fb      	strb	r3, [r7, #23]
          break;
 8006216:	e059      	b.n	80062cc <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == HID_REPORT_DESC)
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	885b      	ldrh	r3, [r3, #2]
 800621c:	0a1b      	lsrs	r3, r3, #8
 800621e:	b29b      	uxth	r3, r3
 8006220:	2b22      	cmp	r3, #34	; 0x22
 8006222:	d108      	bne.n	8006236 <USBD_HID_Setup+0x142>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	88db      	ldrh	r3, [r3, #6]
 8006228:	2b22      	cmp	r3, #34	; 0x22
 800622a:	bf28      	it	cs
 800622c:	2322      	movcs	r3, #34	; 0x22
 800622e:	83fb      	strh	r3, [r7, #30]
            pbuf = HID_MOUSE_ReportDesc;
 8006230:	4b2d      	ldr	r3, [pc, #180]	; (80062e8 <USBD_HID_Setup+0x1f4>)
 8006232:	61bb      	str	r3, [r7, #24]
 8006234:	e015      	b.n	8006262 <USBD_HID_Setup+0x16e>
          }
          else if (req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	885b      	ldrh	r3, [r3, #2]
 800623a:	0a1b      	lsrs	r3, r3, #8
 800623c:	b29b      	uxth	r3, r3
 800623e:	2b21      	cmp	r3, #33	; 0x21
 8006240:	d108      	bne.n	8006254 <USBD_HID_Setup+0x160>
          {
            pbuf = USBD_HID_Desc;
 8006242:	4b2a      	ldr	r3, [pc, #168]	; (80062ec <USBD_HID_Setup+0x1f8>)
 8006244:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	88db      	ldrh	r3, [r3, #6]
 800624a:	2b09      	cmp	r3, #9
 800624c:	bf28      	it	cs
 800624e:	2309      	movcs	r3, #9
 8006250:	83fb      	strh	r3, [r7, #30]
 8006252:	e006      	b.n	8006262 <USBD_HID_Setup+0x16e>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8006254:	6839      	ldr	r1, [r7, #0]
 8006256:	6878      	ldr	r0, [r7, #4]
 8006258:	f001 f869 	bl	800732e <USBD_CtlError>
            ret = USBD_FAIL;
 800625c:	2302      	movs	r3, #2
 800625e:	75fb      	strb	r3, [r7, #23]
            break;
 8006260:	e034      	b.n	80062cc <USBD_HID_Setup+0x1d8>
          }
          USBD_CtlSendData(pdev, pbuf, len);
 8006262:	8bfb      	ldrh	r3, [r7, #30]
 8006264:	461a      	mov	r2, r3
 8006266:	69b9      	ldr	r1, [r7, #24]
 8006268:	6878      	ldr	r0, [r7, #4]
 800626a:	f001 f8ca 	bl	8007402 <USBD_CtlSendData>
          break;
 800626e:	e02d      	b.n	80062cc <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006276:	2b03      	cmp	r3, #3
 8006278:	d107      	bne.n	800628a <USBD_HID_Setup+0x196>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 800627a:	693b      	ldr	r3, [r7, #16]
 800627c:	3308      	adds	r3, #8
 800627e:	2201      	movs	r2, #1
 8006280:	4619      	mov	r1, r3
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	f001 f8bd 	bl	8007402 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006288:	e020      	b.n	80062cc <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 800628a:	6839      	ldr	r1, [r7, #0]
 800628c:	6878      	ldr	r0, [r7, #4]
 800628e:	f001 f84e 	bl	800732e <USBD_CtlError>
            ret = USBD_FAIL;
 8006292:	2302      	movs	r3, #2
 8006294:	75fb      	strb	r3, [r7, #23]
          break;
 8006296:	e019      	b.n	80062cc <USBD_HID_Setup+0x1d8>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800629e:	2b03      	cmp	r3, #3
 80062a0:	d106      	bne.n	80062b0 <USBD_HID_Setup+0x1bc>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	885b      	ldrh	r3, [r3, #2]
 80062a6:	b2db      	uxtb	r3, r3
 80062a8:	461a      	mov	r2, r3
 80062aa:	693b      	ldr	r3, [r7, #16]
 80062ac:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80062ae:	e00d      	b.n	80062cc <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 80062b0:	6839      	ldr	r1, [r7, #0]
 80062b2:	6878      	ldr	r0, [r7, #4]
 80062b4:	f001 f83b 	bl	800732e <USBD_CtlError>
            ret = USBD_FAIL;
 80062b8:	2302      	movs	r3, #2
 80062ba:	75fb      	strb	r3, [r7, #23]
          break;
 80062bc:	e006      	b.n	80062cc <USBD_HID_Setup+0x1d8>

        default:
          USBD_CtlError(pdev, req);
 80062be:	6839      	ldr	r1, [r7, #0]
 80062c0:	6878      	ldr	r0, [r7, #4]
 80062c2:	f001 f834 	bl	800732e <USBD_CtlError>
          ret = USBD_FAIL;
 80062c6:	2302      	movs	r3, #2
 80062c8:	75fb      	strb	r3, [r7, #23]
          break;
 80062ca:	bf00      	nop
      }
      break;
 80062cc:	e006      	b.n	80062dc <USBD_HID_Setup+0x1e8>

    default:
      USBD_CtlError(pdev, req);
 80062ce:	6839      	ldr	r1, [r7, #0]
 80062d0:	6878      	ldr	r0, [r7, #4]
 80062d2:	f001 f82c 	bl	800732e <USBD_CtlError>
      ret = USBD_FAIL;
 80062d6:	2302      	movs	r3, #2
 80062d8:	75fb      	strb	r3, [r7, #23]
      break;
 80062da:	bf00      	nop
  }

  return ret;
 80062dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80062de:	4618      	mov	r0, r3
 80062e0:	3720      	adds	r7, #32
 80062e2:	46bd      	mov	sp, r7
 80062e4:	bd80      	pop	{r7, pc}
 80062e6:	bf00      	nop
 80062e8:	200000c8 	.word	0x200000c8
 80062ec:	200000b0 	.word	0x200000b0

080062f0 <USBD_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef  *pdev,
                            uint8_t *report,
                            uint16_t len)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b086      	sub	sp, #24
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	60f8      	str	r0, [r7, #12]
 80062f8:	60b9      	str	r1, [r7, #8]
 80062fa:	4613      	mov	r3, r2
 80062fc:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef     *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006304:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800630c:	2b03      	cmp	r3, #3
 800630e:	d10c      	bne.n	800632a <USBD_HID_SendReport+0x3a>
  {
    if (hhid->state == HID_IDLE)
 8006310:	697b      	ldr	r3, [r7, #20]
 8006312:	7b1b      	ldrb	r3, [r3, #12]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d108      	bne.n	800632a <USBD_HID_SendReport+0x3a>
    {
      hhid->state = HID_BUSY;
 8006318:	697b      	ldr	r3, [r7, #20]
 800631a:	2201      	movs	r2, #1
 800631c:	731a      	strb	r2, [r3, #12]
      USBD_LL_Transmit(pdev,
 800631e:	88fb      	ldrh	r3, [r7, #6]
 8006320:	68ba      	ldr	r2, [r7, #8]
 8006322:	2181      	movs	r1, #129	; 0x81
 8006324:	68f8      	ldr	r0, [r7, #12]
 8006326:	f001 fbfa 	bl	8007b1e <USBD_LL_Transmit>
                       HID_EPIN_ADDR,
                       report,
                       len);
    }
  }
  return USBD_OK;
 800632a:	2300      	movs	r3, #0
}
 800632c:	4618      	mov	r0, r3
 800632e:	3718      	adds	r7, #24
 8006330:	46bd      	mov	sp, r7
 8006332:	bd80      	pop	{r7, pc}

08006334 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8006334:	b480      	push	{r7}
 8006336:	b083      	sub	sp, #12
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgFSDesc);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2222      	movs	r2, #34	; 0x22
 8006340:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgFSDesc;
 8006342:	4b03      	ldr	r3, [pc, #12]	; (8006350 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8006344:	4618      	mov	r0, r3
 8006346:	370c      	adds	r7, #12
 8006348:	46bd      	mov	sp, r7
 800634a:	bc80      	pop	{r7}
 800634c:	4770      	bx	lr
 800634e:	bf00      	nop
 8006350:	20000044 	.word	0x20000044

08006354 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8006354:	b480      	push	{r7}
 8006356:	b083      	sub	sp, #12
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgHSDesc);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2222      	movs	r2, #34	; 0x22
 8006360:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgHSDesc;
 8006362:	4b03      	ldr	r3, [pc, #12]	; (8006370 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 8006364:	4618      	mov	r0, r3
 8006366:	370c      	adds	r7, #12
 8006368:	46bd      	mov	sp, r7
 800636a:	bc80      	pop	{r7}
 800636c:	4770      	bx	lr
 800636e:	bf00      	nop
 8006370:	20000068 	.word	0x20000068

08006374 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006374:	b480      	push	{r7}
 8006376:	b083      	sub	sp, #12
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_OtherSpeedCfgDesc);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2222      	movs	r2, #34	; 0x22
 8006380:	801a      	strh	r2, [r3, #0]
  return USBD_HID_OtherSpeedCfgDesc;
 8006382:	4b03      	ldr	r3, [pc, #12]	; (8006390 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8006384:	4618      	mov	r0, r3
 8006386:	370c      	adds	r7, #12
 8006388:	46bd      	mov	sp, r7
 800638a:	bc80      	pop	{r7}
 800638c:	4770      	bx	lr
 800638e:	bf00      	nop
 8006390:	2000008c 	.word	0x2000008c

08006394 <USBD_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_HID_DataIn(USBD_HandleTypeDef *pdev,
                                uint8_t epnum)
{
 8006394:	b480      	push	{r7}
 8006396:	b083      	sub	sp, #12
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
 800639c:	460b      	mov	r3, r1
 800639e:	70fb      	strb	r3, [r7, #3]

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063a6:	2200      	movs	r2, #0
 80063a8:	731a      	strb	r2, [r3, #12]
  return USBD_OK;
 80063aa:	2300      	movs	r3, #0
}
 80063ac:	4618      	mov	r0, r3
 80063ae:	370c      	adds	r7, #12
 80063b0:	46bd      	mov	sp, r7
 80063b2:	bc80      	pop	{r7}
 80063b4:	4770      	bx	lr
	...

080063b8 <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 80063b8:	b480      	push	{r7}
 80063ba:	b083      	sub	sp, #12
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_DeviceQualifierDesc);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	220a      	movs	r2, #10
 80063c4:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 80063c6:	4b03      	ldr	r3, [pc, #12]	; (80063d4 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 80063c8:	4618      	mov	r0, r3
 80063ca:	370c      	adds	r7, #12
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bc80      	pop	{r7}
 80063d0:	4770      	bx	lr
 80063d2:	bf00      	nop
 80063d4:	200000bc 	.word	0x200000bc

080063d8 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b084      	sub	sp, #16
 80063dc:	af00      	add	r7, sp, #0
 80063de:	60f8      	str	r0, [r7, #12]
 80063e0:	60b9      	str	r1, [r7, #8]
 80063e2:	4613      	mov	r3, r2
 80063e4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d101      	bne.n	80063f0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80063ec:	2302      	movs	r3, #2
 80063ee:	e01a      	b.n	8006426 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d003      	beq.n	8006402 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	2200      	movs	r2, #0
 80063fe:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006402:	68bb      	ldr	r3, [r7, #8]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d003      	beq.n	8006410 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	68ba      	ldr	r2, [r7, #8]
 800640c:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	2201      	movs	r2, #1
 8006414:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	79fa      	ldrb	r2, [r7, #7]
 800641c:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800641e:	68f8      	ldr	r0, [r7, #12]
 8006420:	f001 fa4c 	bl	80078bc <USBD_LL_Init>

  return USBD_OK;
 8006424:	2300      	movs	r3, #0
}
 8006426:	4618      	mov	r0, r3
 8006428:	3710      	adds	r7, #16
 800642a:	46bd      	mov	sp, r7
 800642c:	bd80      	pop	{r7, pc}

0800642e <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800642e:	b480      	push	{r7}
 8006430:	b085      	sub	sp, #20
 8006432:	af00      	add	r7, sp, #0
 8006434:	6078      	str	r0, [r7, #4]
 8006436:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8006438:	2300      	movs	r3, #0
 800643a:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d006      	beq.n	8006450 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	683a      	ldr	r2, [r7, #0]
 8006446:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800644a:	2300      	movs	r3, #0
 800644c:	73fb      	strb	r3, [r7, #15]
 800644e:	e001      	b.n	8006454 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006450:	2302      	movs	r3, #2
 8006452:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006454:	7bfb      	ldrb	r3, [r7, #15]
}
 8006456:	4618      	mov	r0, r3
 8006458:	3714      	adds	r7, #20
 800645a:	46bd      	mov	sp, r7
 800645c:	bc80      	pop	{r7}
 800645e:	4770      	bx	lr

08006460 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b082      	sub	sp, #8
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006468:	6878      	ldr	r0, [r7, #4]
 800646a:	f001 fa6f 	bl	800794c <USBD_LL_Start>

  return USBD_OK;
 800646e:	2300      	movs	r3, #0
}
 8006470:	4618      	mov	r0, r3
 8006472:	3708      	adds	r7, #8
 8006474:	46bd      	mov	sp, r7
 8006476:	bd80      	pop	{r7, pc}

08006478 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006478:	b480      	push	{r7}
 800647a:	b083      	sub	sp, #12
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006480:	2300      	movs	r3, #0
}
 8006482:	4618      	mov	r0, r3
 8006484:	370c      	adds	r7, #12
 8006486:	46bd      	mov	sp, r7
 8006488:	bc80      	pop	{r7}
 800648a:	4770      	bx	lr

0800648c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b084      	sub	sp, #16
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
 8006494:	460b      	mov	r3, r1
 8006496:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006498:	2302      	movs	r3, #2
 800649a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d00c      	beq.n	80064c0 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	78fa      	ldrb	r2, [r7, #3]
 80064b0:	4611      	mov	r1, r2
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	4798      	blx	r3
 80064b6:	4603      	mov	r3, r0
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d101      	bne.n	80064c0 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80064bc:	2300      	movs	r3, #0
 80064be:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80064c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80064c2:	4618      	mov	r0, r3
 80064c4:	3710      	adds	r7, #16
 80064c6:	46bd      	mov	sp, r7
 80064c8:	bd80      	pop	{r7, pc}

080064ca <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80064ca:	b580      	push	{r7, lr}
 80064cc:	b082      	sub	sp, #8
 80064ce:	af00      	add	r7, sp, #0
 80064d0:	6078      	str	r0, [r7, #4]
 80064d2:	460b      	mov	r3, r1
 80064d4:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80064dc:	685b      	ldr	r3, [r3, #4]
 80064de:	78fa      	ldrb	r2, [r7, #3]
 80064e0:	4611      	mov	r1, r2
 80064e2:	6878      	ldr	r0, [r7, #4]
 80064e4:	4798      	blx	r3

  return USBD_OK;
 80064e6:	2300      	movs	r3, #0
}
 80064e8:	4618      	mov	r0, r3
 80064ea:	3708      	adds	r7, #8
 80064ec:	46bd      	mov	sp, r7
 80064ee:	bd80      	pop	{r7, pc}

080064f0 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b082      	sub	sp, #8
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
 80064f8:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006500:	6839      	ldr	r1, [r7, #0]
 8006502:	4618      	mov	r0, r3
 8006504:	f000 fed7 	bl	80072b6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2201      	movs	r2, #1
 800650c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006516:	461a      	mov	r2, r3
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006524:	f003 031f 	and.w	r3, r3, #31
 8006528:	2b02      	cmp	r3, #2
 800652a:	d016      	beq.n	800655a <USBD_LL_SetupStage+0x6a>
 800652c:	2b02      	cmp	r3, #2
 800652e:	d81c      	bhi.n	800656a <USBD_LL_SetupStage+0x7a>
 8006530:	2b00      	cmp	r3, #0
 8006532:	d002      	beq.n	800653a <USBD_LL_SetupStage+0x4a>
 8006534:	2b01      	cmp	r3, #1
 8006536:	d008      	beq.n	800654a <USBD_LL_SetupStage+0x5a>
 8006538:	e017      	b.n	800656a <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006540:	4619      	mov	r1, r3
 8006542:	6878      	ldr	r0, [r7, #4]
 8006544:	f000 f9ca 	bl	80068dc <USBD_StdDevReq>
      break;
 8006548:	e01a      	b.n	8006580 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006550:	4619      	mov	r1, r3
 8006552:	6878      	ldr	r0, [r7, #4]
 8006554:	f000 fa2c 	bl	80069b0 <USBD_StdItfReq>
      break;
 8006558:	e012      	b.n	8006580 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006560:	4619      	mov	r1, r3
 8006562:	6878      	ldr	r0, [r7, #4]
 8006564:	f000 fa6c 	bl	8006a40 <USBD_StdEPReq>
      break;
 8006568:	e00a      	b.n	8006580 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006570:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006574:	b2db      	uxtb	r3, r3
 8006576:	4619      	mov	r1, r3
 8006578:	6878      	ldr	r0, [r7, #4]
 800657a:	f001 fa47 	bl	8007a0c <USBD_LL_StallEP>
      break;
 800657e:	bf00      	nop
  }

  return USBD_OK;
 8006580:	2300      	movs	r3, #0
}
 8006582:	4618      	mov	r0, r3
 8006584:	3708      	adds	r7, #8
 8006586:	46bd      	mov	sp, r7
 8006588:	bd80      	pop	{r7, pc}

0800658a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800658a:	b580      	push	{r7, lr}
 800658c:	b086      	sub	sp, #24
 800658e:	af00      	add	r7, sp, #0
 8006590:	60f8      	str	r0, [r7, #12]
 8006592:	460b      	mov	r3, r1
 8006594:	607a      	str	r2, [r7, #4]
 8006596:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006598:	7afb      	ldrb	r3, [r7, #11]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d14b      	bne.n	8006636 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80065a4:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80065ac:	2b03      	cmp	r3, #3
 80065ae:	d134      	bne.n	800661a <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80065b0:	697b      	ldr	r3, [r7, #20]
 80065b2:	68da      	ldr	r2, [r3, #12]
 80065b4:	697b      	ldr	r3, [r7, #20]
 80065b6:	691b      	ldr	r3, [r3, #16]
 80065b8:	429a      	cmp	r2, r3
 80065ba:	d919      	bls.n	80065f0 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80065bc:	697b      	ldr	r3, [r7, #20]
 80065be:	68da      	ldr	r2, [r3, #12]
 80065c0:	697b      	ldr	r3, [r7, #20]
 80065c2:	691b      	ldr	r3, [r3, #16]
 80065c4:	1ad2      	subs	r2, r2, r3
 80065c6:	697b      	ldr	r3, [r7, #20]
 80065c8:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80065ca:	697b      	ldr	r3, [r7, #20]
 80065cc:	68da      	ldr	r2, [r3, #12]
 80065ce:	697b      	ldr	r3, [r7, #20]
 80065d0:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80065d2:	429a      	cmp	r2, r3
 80065d4:	d203      	bcs.n	80065de <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80065d6:	697b      	ldr	r3, [r7, #20]
 80065d8:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80065da:	b29b      	uxth	r3, r3
 80065dc:	e002      	b.n	80065e4 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80065de:	697b      	ldr	r3, [r7, #20]
 80065e0:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80065e2:	b29b      	uxth	r3, r3
 80065e4:	461a      	mov	r2, r3
 80065e6:	6879      	ldr	r1, [r7, #4]
 80065e8:	68f8      	ldr	r0, [r7, #12]
 80065ea:	f000 ff38 	bl	800745e <USBD_CtlContinueRx>
 80065ee:	e038      	b.n	8006662 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065f6:	691b      	ldr	r3, [r3, #16]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d00a      	beq.n	8006612 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006602:	2b03      	cmp	r3, #3
 8006604:	d105      	bne.n	8006612 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800660c:	691b      	ldr	r3, [r3, #16]
 800660e:	68f8      	ldr	r0, [r7, #12]
 8006610:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006612:	68f8      	ldr	r0, [r7, #12]
 8006614:	f000 ff35 	bl	8007482 <USBD_CtlSendStatus>
 8006618:	e023      	b.n	8006662 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006620:	2b05      	cmp	r3, #5
 8006622:	d11e      	bne.n	8006662 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	2200      	movs	r2, #0
 8006628:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800662c:	2100      	movs	r1, #0
 800662e:	68f8      	ldr	r0, [r7, #12]
 8006630:	f001 f9ec 	bl	8007a0c <USBD_LL_StallEP>
 8006634:	e015      	b.n	8006662 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800663c:	699b      	ldr	r3, [r3, #24]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d00d      	beq.n	800665e <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8006648:	2b03      	cmp	r3, #3
 800664a:	d108      	bne.n	800665e <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006652:	699b      	ldr	r3, [r3, #24]
 8006654:	7afa      	ldrb	r2, [r7, #11]
 8006656:	4611      	mov	r1, r2
 8006658:	68f8      	ldr	r0, [r7, #12]
 800665a:	4798      	blx	r3
 800665c:	e001      	b.n	8006662 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800665e:	2302      	movs	r3, #2
 8006660:	e000      	b.n	8006664 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8006662:	2300      	movs	r3, #0
}
 8006664:	4618      	mov	r0, r3
 8006666:	3718      	adds	r7, #24
 8006668:	46bd      	mov	sp, r7
 800666a:	bd80      	pop	{r7, pc}

0800666c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b086      	sub	sp, #24
 8006670:	af00      	add	r7, sp, #0
 8006672:	60f8      	str	r0, [r7, #12]
 8006674:	460b      	mov	r3, r1
 8006676:	607a      	str	r2, [r7, #4]
 8006678:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800667a:	7afb      	ldrb	r3, [r7, #11]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d17f      	bne.n	8006780 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	3314      	adds	r3, #20
 8006684:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800668c:	2b02      	cmp	r3, #2
 800668e:	d15c      	bne.n	800674a <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8006690:	697b      	ldr	r3, [r7, #20]
 8006692:	68da      	ldr	r2, [r3, #12]
 8006694:	697b      	ldr	r3, [r7, #20]
 8006696:	691b      	ldr	r3, [r3, #16]
 8006698:	429a      	cmp	r2, r3
 800669a:	d915      	bls.n	80066c8 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800669c:	697b      	ldr	r3, [r7, #20]
 800669e:	68da      	ldr	r2, [r3, #12]
 80066a0:	697b      	ldr	r3, [r7, #20]
 80066a2:	691b      	ldr	r3, [r3, #16]
 80066a4:	1ad2      	subs	r2, r2, r3
 80066a6:	697b      	ldr	r3, [r7, #20]
 80066a8:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80066aa:	697b      	ldr	r3, [r7, #20]
 80066ac:	68db      	ldr	r3, [r3, #12]
 80066ae:	b29b      	uxth	r3, r3
 80066b0:	461a      	mov	r2, r3
 80066b2:	6879      	ldr	r1, [r7, #4]
 80066b4:	68f8      	ldr	r0, [r7, #12]
 80066b6:	f000 fec0 	bl	800743a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80066ba:	2300      	movs	r3, #0
 80066bc:	2200      	movs	r2, #0
 80066be:	2100      	movs	r1, #0
 80066c0:	68f8      	ldr	r0, [r7, #12]
 80066c2:	f001 fa4f 	bl	8007b64 <USBD_LL_PrepareReceive>
 80066c6:	e04e      	b.n	8006766 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80066c8:	697b      	ldr	r3, [r7, #20]
 80066ca:	689b      	ldr	r3, [r3, #8]
 80066cc:	697a      	ldr	r2, [r7, #20]
 80066ce:	6912      	ldr	r2, [r2, #16]
 80066d0:	fbb3 f1f2 	udiv	r1, r3, r2
 80066d4:	fb02 f201 	mul.w	r2, r2, r1
 80066d8:	1a9b      	subs	r3, r3, r2
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d11c      	bne.n	8006718 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80066de:	697b      	ldr	r3, [r7, #20]
 80066e0:	689a      	ldr	r2, [r3, #8]
 80066e2:	697b      	ldr	r3, [r7, #20]
 80066e4:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80066e6:	429a      	cmp	r2, r3
 80066e8:	d316      	bcc.n	8006718 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80066ea:	697b      	ldr	r3, [r7, #20]
 80066ec:	689a      	ldr	r2, [r3, #8]
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80066f4:	429a      	cmp	r2, r3
 80066f6:	d20f      	bcs.n	8006718 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80066f8:	2200      	movs	r2, #0
 80066fa:	2100      	movs	r1, #0
 80066fc:	68f8      	ldr	r0, [r7, #12]
 80066fe:	f000 fe9c 	bl	800743a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	2200      	movs	r2, #0
 8006706:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800670a:	2300      	movs	r3, #0
 800670c:	2200      	movs	r2, #0
 800670e:	2100      	movs	r1, #0
 8006710:	68f8      	ldr	r0, [r7, #12]
 8006712:	f001 fa27 	bl	8007b64 <USBD_LL_PrepareReceive>
 8006716:	e026      	b.n	8006766 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800671e:	68db      	ldr	r3, [r3, #12]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d00a      	beq.n	800673a <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800672a:	2b03      	cmp	r3, #3
 800672c:	d105      	bne.n	800673a <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006734:	68db      	ldr	r3, [r3, #12]
 8006736:	68f8      	ldr	r0, [r7, #12]
 8006738:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800673a:	2180      	movs	r1, #128	; 0x80
 800673c:	68f8      	ldr	r0, [r7, #12]
 800673e:	f001 f965 	bl	8007a0c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8006742:	68f8      	ldr	r0, [r7, #12]
 8006744:	f000 feb0 	bl	80074a8 <USBD_CtlReceiveStatus>
 8006748:	e00d      	b.n	8006766 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006750:	2b04      	cmp	r3, #4
 8006752:	d004      	beq.n	800675e <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800675a:	2b00      	cmp	r3, #0
 800675c:	d103      	bne.n	8006766 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800675e:	2180      	movs	r1, #128	; 0x80
 8006760:	68f8      	ldr	r0, [r7, #12]
 8006762:	f001 f953 	bl	8007a0c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800676c:	2b01      	cmp	r3, #1
 800676e:	d11d      	bne.n	80067ac <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8006770:	68f8      	ldr	r0, [r7, #12]
 8006772:	f7ff fe81 	bl	8006478 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	2200      	movs	r2, #0
 800677a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800677e:	e015      	b.n	80067ac <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006786:	695b      	ldr	r3, [r3, #20]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d00d      	beq.n	80067a8 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006792:	2b03      	cmp	r3, #3
 8006794:	d108      	bne.n	80067a8 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800679c:	695b      	ldr	r3, [r3, #20]
 800679e:	7afa      	ldrb	r2, [r7, #11]
 80067a0:	4611      	mov	r1, r2
 80067a2:	68f8      	ldr	r0, [r7, #12]
 80067a4:	4798      	blx	r3
 80067a6:	e001      	b.n	80067ac <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80067a8:	2302      	movs	r3, #2
 80067aa:	e000      	b.n	80067ae <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80067ac:	2300      	movs	r3, #0
}
 80067ae:	4618      	mov	r0, r3
 80067b0:	3718      	adds	r7, #24
 80067b2:	46bd      	mov	sp, r7
 80067b4:	bd80      	pop	{r7, pc}

080067b6 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80067b6:	b580      	push	{r7, lr}
 80067b8:	b082      	sub	sp, #8
 80067ba:	af00      	add	r7, sp, #0
 80067bc:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80067be:	2340      	movs	r3, #64	; 0x40
 80067c0:	2200      	movs	r2, #0
 80067c2:	2100      	movs	r1, #0
 80067c4:	6878      	ldr	r0, [r7, #4]
 80067c6:	f001 f8dc 	bl	8007982 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2201      	movs	r2, #1
 80067ce:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2240      	movs	r2, #64	; 0x40
 80067d6:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80067da:	2340      	movs	r3, #64	; 0x40
 80067dc:	2200      	movs	r2, #0
 80067de:	2180      	movs	r1, #128	; 0x80
 80067e0:	6878      	ldr	r0, [r7, #4]
 80067e2:	f001 f8ce 	bl	8007982 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2201      	movs	r2, #1
 80067ea:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2240      	movs	r2, #64	; 0x40
 80067f0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2201      	movs	r2, #1
 80067f6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2200      	movs	r2, #0
 80067fe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2200      	movs	r2, #0
 8006806:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2200      	movs	r2, #0
 800680c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006816:	2b00      	cmp	r3, #0
 8006818:	d009      	beq.n	800682e <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006820:	685b      	ldr	r3, [r3, #4]
 8006822:	687a      	ldr	r2, [r7, #4]
 8006824:	6852      	ldr	r2, [r2, #4]
 8006826:	b2d2      	uxtb	r2, r2
 8006828:	4611      	mov	r1, r2
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	4798      	blx	r3
  }

  return USBD_OK;
 800682e:	2300      	movs	r3, #0
}
 8006830:	4618      	mov	r0, r3
 8006832:	3708      	adds	r7, #8
 8006834:	46bd      	mov	sp, r7
 8006836:	bd80      	pop	{r7, pc}

08006838 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006838:	b480      	push	{r7}
 800683a:	b083      	sub	sp, #12
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
 8006840:	460b      	mov	r3, r1
 8006842:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	78fa      	ldrb	r2, [r7, #3]
 8006848:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800684a:	2300      	movs	r3, #0
}
 800684c:	4618      	mov	r0, r3
 800684e:	370c      	adds	r7, #12
 8006850:	46bd      	mov	sp, r7
 8006852:	bc80      	pop	{r7}
 8006854:	4770      	bx	lr

08006856 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006856:	b480      	push	{r7}
 8006858:	b083      	sub	sp, #12
 800685a:	af00      	add	r7, sp, #0
 800685c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2204      	movs	r2, #4
 800686e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006872:	2300      	movs	r3, #0
}
 8006874:	4618      	mov	r0, r3
 8006876:	370c      	adds	r7, #12
 8006878:	46bd      	mov	sp, r7
 800687a:	bc80      	pop	{r7}
 800687c:	4770      	bx	lr

0800687e <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800687e:	b480      	push	{r7}
 8006880:	b083      	sub	sp, #12
 8006882:	af00      	add	r7, sp, #0
 8006884:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800688c:	2b04      	cmp	r3, #4
 800688e:	d105      	bne.n	800689c <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800689c:	2300      	movs	r3, #0
}
 800689e:	4618      	mov	r0, r3
 80068a0:	370c      	adds	r7, #12
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bc80      	pop	{r7}
 80068a6:	4770      	bx	lr

080068a8 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b082      	sub	sp, #8
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068b6:	2b03      	cmp	r3, #3
 80068b8:	d10b      	bne.n	80068d2 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068c0:	69db      	ldr	r3, [r3, #28]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d005      	beq.n	80068d2 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068cc:	69db      	ldr	r3, [r3, #28]
 80068ce:	6878      	ldr	r0, [r7, #4]
 80068d0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80068d2:	2300      	movs	r3, #0
}
 80068d4:	4618      	mov	r0, r3
 80068d6:	3708      	adds	r7, #8
 80068d8:	46bd      	mov	sp, r7
 80068da:	bd80      	pop	{r7, pc}

080068dc <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b084      	sub	sp, #16
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
 80068e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80068e6:	2300      	movs	r3, #0
 80068e8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	781b      	ldrb	r3, [r3, #0]
 80068ee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80068f2:	2b40      	cmp	r3, #64	; 0x40
 80068f4:	d005      	beq.n	8006902 <USBD_StdDevReq+0x26>
 80068f6:	2b40      	cmp	r3, #64	; 0x40
 80068f8:	d84f      	bhi.n	800699a <USBD_StdDevReq+0xbe>
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d009      	beq.n	8006912 <USBD_StdDevReq+0x36>
 80068fe:	2b20      	cmp	r3, #32
 8006900:	d14b      	bne.n	800699a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006908:	689b      	ldr	r3, [r3, #8]
 800690a:	6839      	ldr	r1, [r7, #0]
 800690c:	6878      	ldr	r0, [r7, #4]
 800690e:	4798      	blx	r3
      break;
 8006910:	e048      	b.n	80069a4 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	785b      	ldrb	r3, [r3, #1]
 8006916:	2b09      	cmp	r3, #9
 8006918:	d839      	bhi.n	800698e <USBD_StdDevReq+0xb2>
 800691a:	a201      	add	r2, pc, #4	; (adr r2, 8006920 <USBD_StdDevReq+0x44>)
 800691c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006920:	08006971 	.word	0x08006971
 8006924:	08006985 	.word	0x08006985
 8006928:	0800698f 	.word	0x0800698f
 800692c:	0800697b 	.word	0x0800697b
 8006930:	0800698f 	.word	0x0800698f
 8006934:	08006953 	.word	0x08006953
 8006938:	08006949 	.word	0x08006949
 800693c:	0800698f 	.word	0x0800698f
 8006940:	08006967 	.word	0x08006967
 8006944:	0800695d 	.word	0x0800695d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006948:	6839      	ldr	r1, [r7, #0]
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	f000 f9dc 	bl	8006d08 <USBD_GetDescriptor>
          break;
 8006950:	e022      	b.n	8006998 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006952:	6839      	ldr	r1, [r7, #0]
 8006954:	6878      	ldr	r0, [r7, #4]
 8006956:	f000 fb3f 	bl	8006fd8 <USBD_SetAddress>
          break;
 800695a:	e01d      	b.n	8006998 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800695c:	6839      	ldr	r1, [r7, #0]
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	f000 fb7e 	bl	8007060 <USBD_SetConfig>
          break;
 8006964:	e018      	b.n	8006998 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006966:	6839      	ldr	r1, [r7, #0]
 8006968:	6878      	ldr	r0, [r7, #4]
 800696a:	f000 fc07 	bl	800717c <USBD_GetConfig>
          break;
 800696e:	e013      	b.n	8006998 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006970:	6839      	ldr	r1, [r7, #0]
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	f000 fc37 	bl	80071e6 <USBD_GetStatus>
          break;
 8006978:	e00e      	b.n	8006998 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800697a:	6839      	ldr	r1, [r7, #0]
 800697c:	6878      	ldr	r0, [r7, #4]
 800697e:	f000 fc65 	bl	800724c <USBD_SetFeature>
          break;
 8006982:	e009      	b.n	8006998 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006984:	6839      	ldr	r1, [r7, #0]
 8006986:	6878      	ldr	r0, [r7, #4]
 8006988:	f000 fc74 	bl	8007274 <USBD_ClrFeature>
          break;
 800698c:	e004      	b.n	8006998 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800698e:	6839      	ldr	r1, [r7, #0]
 8006990:	6878      	ldr	r0, [r7, #4]
 8006992:	f000 fccc 	bl	800732e <USBD_CtlError>
          break;
 8006996:	bf00      	nop
      }
      break;
 8006998:	e004      	b.n	80069a4 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800699a:	6839      	ldr	r1, [r7, #0]
 800699c:	6878      	ldr	r0, [r7, #4]
 800699e:	f000 fcc6 	bl	800732e <USBD_CtlError>
      break;
 80069a2:	bf00      	nop
  }

  return ret;
 80069a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80069a6:	4618      	mov	r0, r3
 80069a8:	3710      	adds	r7, #16
 80069aa:	46bd      	mov	sp, r7
 80069ac:	bd80      	pop	{r7, pc}
 80069ae:	bf00      	nop

080069b0 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b084      	sub	sp, #16
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
 80069b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80069ba:	2300      	movs	r3, #0
 80069bc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	781b      	ldrb	r3, [r3, #0]
 80069c2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80069c6:	2b40      	cmp	r3, #64	; 0x40
 80069c8:	d005      	beq.n	80069d6 <USBD_StdItfReq+0x26>
 80069ca:	2b40      	cmp	r3, #64	; 0x40
 80069cc:	d82e      	bhi.n	8006a2c <USBD_StdItfReq+0x7c>
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d001      	beq.n	80069d6 <USBD_StdItfReq+0x26>
 80069d2:	2b20      	cmp	r3, #32
 80069d4:	d12a      	bne.n	8006a2c <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069dc:	3b01      	subs	r3, #1
 80069de:	2b02      	cmp	r3, #2
 80069e0:	d81d      	bhi.n	8006a1e <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	889b      	ldrh	r3, [r3, #4]
 80069e6:	b2db      	uxtb	r3, r3
 80069e8:	2b01      	cmp	r3, #1
 80069ea:	d813      	bhi.n	8006a14 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069f2:	689b      	ldr	r3, [r3, #8]
 80069f4:	6839      	ldr	r1, [r7, #0]
 80069f6:	6878      	ldr	r0, [r7, #4]
 80069f8:	4798      	blx	r3
 80069fa:	4603      	mov	r3, r0
 80069fc:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	88db      	ldrh	r3, [r3, #6]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d110      	bne.n	8006a28 <USBD_StdItfReq+0x78>
 8006a06:	7bfb      	ldrb	r3, [r7, #15]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d10d      	bne.n	8006a28 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8006a0c:	6878      	ldr	r0, [r7, #4]
 8006a0e:	f000 fd38 	bl	8007482 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006a12:	e009      	b.n	8006a28 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8006a14:	6839      	ldr	r1, [r7, #0]
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	f000 fc89 	bl	800732e <USBD_CtlError>
          break;
 8006a1c:	e004      	b.n	8006a28 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8006a1e:	6839      	ldr	r1, [r7, #0]
 8006a20:	6878      	ldr	r0, [r7, #4]
 8006a22:	f000 fc84 	bl	800732e <USBD_CtlError>
          break;
 8006a26:	e000      	b.n	8006a2a <USBD_StdItfReq+0x7a>
          break;
 8006a28:	bf00      	nop
      }
      break;
 8006a2a:	e004      	b.n	8006a36 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8006a2c:	6839      	ldr	r1, [r7, #0]
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f000 fc7d 	bl	800732e <USBD_CtlError>
      break;
 8006a34:	bf00      	nop
  }

  return USBD_OK;
 8006a36:	2300      	movs	r3, #0
}
 8006a38:	4618      	mov	r0, r3
 8006a3a:	3710      	adds	r7, #16
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	bd80      	pop	{r7, pc}

08006a40 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b084      	sub	sp, #16
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
 8006a48:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	889b      	ldrh	r3, [r3, #4]
 8006a52:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	781b      	ldrb	r3, [r3, #0]
 8006a58:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006a5c:	2b40      	cmp	r3, #64	; 0x40
 8006a5e:	d007      	beq.n	8006a70 <USBD_StdEPReq+0x30>
 8006a60:	2b40      	cmp	r3, #64	; 0x40
 8006a62:	f200 8146 	bhi.w	8006cf2 <USBD_StdEPReq+0x2b2>
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d00a      	beq.n	8006a80 <USBD_StdEPReq+0x40>
 8006a6a:	2b20      	cmp	r3, #32
 8006a6c:	f040 8141 	bne.w	8006cf2 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a76:	689b      	ldr	r3, [r3, #8]
 8006a78:	6839      	ldr	r1, [r7, #0]
 8006a7a:	6878      	ldr	r0, [r7, #4]
 8006a7c:	4798      	blx	r3
      break;
 8006a7e:	e13d      	b.n	8006cfc <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	781b      	ldrb	r3, [r3, #0]
 8006a84:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006a88:	2b20      	cmp	r3, #32
 8006a8a:	d10a      	bne.n	8006aa2 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a92:	689b      	ldr	r3, [r3, #8]
 8006a94:	6839      	ldr	r1, [r7, #0]
 8006a96:	6878      	ldr	r0, [r7, #4]
 8006a98:	4798      	blx	r3
 8006a9a:	4603      	mov	r3, r0
 8006a9c:	73fb      	strb	r3, [r7, #15]

        return ret;
 8006a9e:	7bfb      	ldrb	r3, [r7, #15]
 8006aa0:	e12d      	b.n	8006cfe <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	785b      	ldrb	r3, [r3, #1]
 8006aa6:	2b03      	cmp	r3, #3
 8006aa8:	d007      	beq.n	8006aba <USBD_StdEPReq+0x7a>
 8006aaa:	2b03      	cmp	r3, #3
 8006aac:	f300 811b 	bgt.w	8006ce6 <USBD_StdEPReq+0x2a6>
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d072      	beq.n	8006b9a <USBD_StdEPReq+0x15a>
 8006ab4:	2b01      	cmp	r3, #1
 8006ab6:	d03a      	beq.n	8006b2e <USBD_StdEPReq+0xee>
 8006ab8:	e115      	b.n	8006ce6 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ac0:	2b02      	cmp	r3, #2
 8006ac2:	d002      	beq.n	8006aca <USBD_StdEPReq+0x8a>
 8006ac4:	2b03      	cmp	r3, #3
 8006ac6:	d015      	beq.n	8006af4 <USBD_StdEPReq+0xb4>
 8006ac8:	e02b      	b.n	8006b22 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006aca:	7bbb      	ldrb	r3, [r7, #14]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d00c      	beq.n	8006aea <USBD_StdEPReq+0xaa>
 8006ad0:	7bbb      	ldrb	r3, [r7, #14]
 8006ad2:	2b80      	cmp	r3, #128	; 0x80
 8006ad4:	d009      	beq.n	8006aea <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006ad6:	7bbb      	ldrb	r3, [r7, #14]
 8006ad8:	4619      	mov	r1, r3
 8006ada:	6878      	ldr	r0, [r7, #4]
 8006adc:	f000 ff96 	bl	8007a0c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006ae0:	2180      	movs	r1, #128	; 0x80
 8006ae2:	6878      	ldr	r0, [r7, #4]
 8006ae4:	f000 ff92 	bl	8007a0c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006ae8:	e020      	b.n	8006b2c <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8006aea:	6839      	ldr	r1, [r7, #0]
 8006aec:	6878      	ldr	r0, [r7, #4]
 8006aee:	f000 fc1e 	bl	800732e <USBD_CtlError>
              break;
 8006af2:	e01b      	b.n	8006b2c <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	885b      	ldrh	r3, [r3, #2]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d10e      	bne.n	8006b1a <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8006afc:	7bbb      	ldrb	r3, [r7, #14]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d00b      	beq.n	8006b1a <USBD_StdEPReq+0xda>
 8006b02:	7bbb      	ldrb	r3, [r7, #14]
 8006b04:	2b80      	cmp	r3, #128	; 0x80
 8006b06:	d008      	beq.n	8006b1a <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	88db      	ldrh	r3, [r3, #6]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d104      	bne.n	8006b1a <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8006b10:	7bbb      	ldrb	r3, [r7, #14]
 8006b12:	4619      	mov	r1, r3
 8006b14:	6878      	ldr	r0, [r7, #4]
 8006b16:	f000 ff79 	bl	8007a0c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	f000 fcb1 	bl	8007482 <USBD_CtlSendStatus>

              break;
 8006b20:	e004      	b.n	8006b2c <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8006b22:	6839      	ldr	r1, [r7, #0]
 8006b24:	6878      	ldr	r0, [r7, #4]
 8006b26:	f000 fc02 	bl	800732e <USBD_CtlError>
              break;
 8006b2a:	bf00      	nop
          }
          break;
 8006b2c:	e0e0      	b.n	8006cf0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b34:	2b02      	cmp	r3, #2
 8006b36:	d002      	beq.n	8006b3e <USBD_StdEPReq+0xfe>
 8006b38:	2b03      	cmp	r3, #3
 8006b3a:	d015      	beq.n	8006b68 <USBD_StdEPReq+0x128>
 8006b3c:	e026      	b.n	8006b8c <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006b3e:	7bbb      	ldrb	r3, [r7, #14]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d00c      	beq.n	8006b5e <USBD_StdEPReq+0x11e>
 8006b44:	7bbb      	ldrb	r3, [r7, #14]
 8006b46:	2b80      	cmp	r3, #128	; 0x80
 8006b48:	d009      	beq.n	8006b5e <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006b4a:	7bbb      	ldrb	r3, [r7, #14]
 8006b4c:	4619      	mov	r1, r3
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	f000 ff5c 	bl	8007a0c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006b54:	2180      	movs	r1, #128	; 0x80
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	f000 ff58 	bl	8007a0c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006b5c:	e01c      	b.n	8006b98 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8006b5e:	6839      	ldr	r1, [r7, #0]
 8006b60:	6878      	ldr	r0, [r7, #4]
 8006b62:	f000 fbe4 	bl	800732e <USBD_CtlError>
              break;
 8006b66:	e017      	b.n	8006b98 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	885b      	ldrh	r3, [r3, #2]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d112      	bne.n	8006b96 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006b70:	7bbb      	ldrb	r3, [r7, #14]
 8006b72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d004      	beq.n	8006b84 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8006b7a:	7bbb      	ldrb	r3, [r7, #14]
 8006b7c:	4619      	mov	r1, r3
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	f000 ff63 	bl	8007a4a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8006b84:	6878      	ldr	r0, [r7, #4]
 8006b86:	f000 fc7c 	bl	8007482 <USBD_CtlSendStatus>
              }
              break;
 8006b8a:	e004      	b.n	8006b96 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8006b8c:	6839      	ldr	r1, [r7, #0]
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	f000 fbcd 	bl	800732e <USBD_CtlError>
              break;
 8006b94:	e000      	b.n	8006b98 <USBD_StdEPReq+0x158>
              break;
 8006b96:	bf00      	nop
          }
          break;
 8006b98:	e0aa      	b.n	8006cf0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ba0:	2b02      	cmp	r3, #2
 8006ba2:	d002      	beq.n	8006baa <USBD_StdEPReq+0x16a>
 8006ba4:	2b03      	cmp	r3, #3
 8006ba6:	d032      	beq.n	8006c0e <USBD_StdEPReq+0x1ce>
 8006ba8:	e097      	b.n	8006cda <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006baa:	7bbb      	ldrb	r3, [r7, #14]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d007      	beq.n	8006bc0 <USBD_StdEPReq+0x180>
 8006bb0:	7bbb      	ldrb	r3, [r7, #14]
 8006bb2:	2b80      	cmp	r3, #128	; 0x80
 8006bb4:	d004      	beq.n	8006bc0 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8006bb6:	6839      	ldr	r1, [r7, #0]
 8006bb8:	6878      	ldr	r0, [r7, #4]
 8006bba:	f000 fbb8 	bl	800732e <USBD_CtlError>
                break;
 8006bbe:	e091      	b.n	8006ce4 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006bc0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	da0b      	bge.n	8006be0 <USBD_StdEPReq+0x1a0>
 8006bc8:	7bbb      	ldrb	r3, [r7, #14]
 8006bca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006bce:	4613      	mov	r3, r2
 8006bd0:	009b      	lsls	r3, r3, #2
 8006bd2:	4413      	add	r3, r2
 8006bd4:	009b      	lsls	r3, r3, #2
 8006bd6:	3310      	adds	r3, #16
 8006bd8:	687a      	ldr	r2, [r7, #4]
 8006bda:	4413      	add	r3, r2
 8006bdc:	3304      	adds	r3, #4
 8006bde:	e00b      	b.n	8006bf8 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006be0:	7bbb      	ldrb	r3, [r7, #14]
 8006be2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006be6:	4613      	mov	r3, r2
 8006be8:	009b      	lsls	r3, r3, #2
 8006bea:	4413      	add	r3, r2
 8006bec:	009b      	lsls	r3, r3, #2
 8006bee:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006bf2:	687a      	ldr	r2, [r7, #4]
 8006bf4:	4413      	add	r3, r2
 8006bf6:	3304      	adds	r3, #4
 8006bf8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006bfa:	68bb      	ldr	r3, [r7, #8]
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006c00:	68bb      	ldr	r3, [r7, #8]
 8006c02:	2202      	movs	r2, #2
 8006c04:	4619      	mov	r1, r3
 8006c06:	6878      	ldr	r0, [r7, #4]
 8006c08:	f000 fbfb 	bl	8007402 <USBD_CtlSendData>
              break;
 8006c0c:	e06a      	b.n	8006ce4 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006c0e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	da11      	bge.n	8006c3a <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006c16:	7bbb      	ldrb	r3, [r7, #14]
 8006c18:	f003 020f 	and.w	r2, r3, #15
 8006c1c:	6879      	ldr	r1, [r7, #4]
 8006c1e:	4613      	mov	r3, r2
 8006c20:	009b      	lsls	r3, r3, #2
 8006c22:	4413      	add	r3, r2
 8006c24:	009b      	lsls	r3, r3, #2
 8006c26:	440b      	add	r3, r1
 8006c28:	3318      	adds	r3, #24
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d117      	bne.n	8006c60 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8006c30:	6839      	ldr	r1, [r7, #0]
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f000 fb7b 	bl	800732e <USBD_CtlError>
                  break;
 8006c38:	e054      	b.n	8006ce4 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006c3a:	7bbb      	ldrb	r3, [r7, #14]
 8006c3c:	f003 020f 	and.w	r2, r3, #15
 8006c40:	6879      	ldr	r1, [r7, #4]
 8006c42:	4613      	mov	r3, r2
 8006c44:	009b      	lsls	r3, r3, #2
 8006c46:	4413      	add	r3, r2
 8006c48:	009b      	lsls	r3, r3, #2
 8006c4a:	440b      	add	r3, r1
 8006c4c:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d104      	bne.n	8006c60 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8006c56:	6839      	ldr	r1, [r7, #0]
 8006c58:	6878      	ldr	r0, [r7, #4]
 8006c5a:	f000 fb68 	bl	800732e <USBD_CtlError>
                  break;
 8006c5e:	e041      	b.n	8006ce4 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006c60:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	da0b      	bge.n	8006c80 <USBD_StdEPReq+0x240>
 8006c68:	7bbb      	ldrb	r3, [r7, #14]
 8006c6a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006c6e:	4613      	mov	r3, r2
 8006c70:	009b      	lsls	r3, r3, #2
 8006c72:	4413      	add	r3, r2
 8006c74:	009b      	lsls	r3, r3, #2
 8006c76:	3310      	adds	r3, #16
 8006c78:	687a      	ldr	r2, [r7, #4]
 8006c7a:	4413      	add	r3, r2
 8006c7c:	3304      	adds	r3, #4
 8006c7e:	e00b      	b.n	8006c98 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006c80:	7bbb      	ldrb	r3, [r7, #14]
 8006c82:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006c86:	4613      	mov	r3, r2
 8006c88:	009b      	lsls	r3, r3, #2
 8006c8a:	4413      	add	r3, r2
 8006c8c:	009b      	lsls	r3, r3, #2
 8006c8e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006c92:	687a      	ldr	r2, [r7, #4]
 8006c94:	4413      	add	r3, r2
 8006c96:	3304      	adds	r3, #4
 8006c98:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006c9a:	7bbb      	ldrb	r3, [r7, #14]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d002      	beq.n	8006ca6 <USBD_StdEPReq+0x266>
 8006ca0:	7bbb      	ldrb	r3, [r7, #14]
 8006ca2:	2b80      	cmp	r3, #128	; 0x80
 8006ca4:	d103      	bne.n	8006cae <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8006ca6:	68bb      	ldr	r3, [r7, #8]
 8006ca8:	2200      	movs	r2, #0
 8006caa:	601a      	str	r2, [r3, #0]
 8006cac:	e00e      	b.n	8006ccc <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8006cae:	7bbb      	ldrb	r3, [r7, #14]
 8006cb0:	4619      	mov	r1, r3
 8006cb2:	6878      	ldr	r0, [r7, #4]
 8006cb4:	f000 fee8 	bl	8007a88 <USBD_LL_IsStallEP>
 8006cb8:	4603      	mov	r3, r0
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d003      	beq.n	8006cc6 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	2201      	movs	r2, #1
 8006cc2:	601a      	str	r2, [r3, #0]
 8006cc4:	e002      	b.n	8006ccc <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	2200      	movs	r2, #0
 8006cca:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006ccc:	68bb      	ldr	r3, [r7, #8]
 8006cce:	2202      	movs	r2, #2
 8006cd0:	4619      	mov	r1, r3
 8006cd2:	6878      	ldr	r0, [r7, #4]
 8006cd4:	f000 fb95 	bl	8007402 <USBD_CtlSendData>
              break;
 8006cd8:	e004      	b.n	8006ce4 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8006cda:	6839      	ldr	r1, [r7, #0]
 8006cdc:	6878      	ldr	r0, [r7, #4]
 8006cde:	f000 fb26 	bl	800732e <USBD_CtlError>
              break;
 8006ce2:	bf00      	nop
          }
          break;
 8006ce4:	e004      	b.n	8006cf0 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8006ce6:	6839      	ldr	r1, [r7, #0]
 8006ce8:	6878      	ldr	r0, [r7, #4]
 8006cea:	f000 fb20 	bl	800732e <USBD_CtlError>
          break;
 8006cee:	bf00      	nop
      }
      break;
 8006cf0:	e004      	b.n	8006cfc <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8006cf2:	6839      	ldr	r1, [r7, #0]
 8006cf4:	6878      	ldr	r0, [r7, #4]
 8006cf6:	f000 fb1a 	bl	800732e <USBD_CtlError>
      break;
 8006cfa:	bf00      	nop
  }

  return ret;
 8006cfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cfe:	4618      	mov	r0, r3
 8006d00:	3710      	adds	r7, #16
 8006d02:	46bd      	mov	sp, r7
 8006d04:	bd80      	pop	{r7, pc}
	...

08006d08 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b084      	sub	sp, #16
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
 8006d10:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006d12:	2300      	movs	r3, #0
 8006d14:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006d16:	2300      	movs	r3, #0
 8006d18:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	885b      	ldrh	r3, [r3, #2]
 8006d22:	0a1b      	lsrs	r3, r3, #8
 8006d24:	b29b      	uxth	r3, r3
 8006d26:	3b01      	subs	r3, #1
 8006d28:	2b06      	cmp	r3, #6
 8006d2a:	f200 8128 	bhi.w	8006f7e <USBD_GetDescriptor+0x276>
 8006d2e:	a201      	add	r2, pc, #4	; (adr r2, 8006d34 <USBD_GetDescriptor+0x2c>)
 8006d30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d34:	08006d51 	.word	0x08006d51
 8006d38:	08006d69 	.word	0x08006d69
 8006d3c:	08006da9 	.word	0x08006da9
 8006d40:	08006f7f 	.word	0x08006f7f
 8006d44:	08006f7f 	.word	0x08006f7f
 8006d48:	08006f1f 	.word	0x08006f1f
 8006d4c:	08006f4b 	.word	0x08006f4b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	687a      	ldr	r2, [r7, #4]
 8006d5a:	7c12      	ldrb	r2, [r2, #16]
 8006d5c:	f107 0108 	add.w	r1, r7, #8
 8006d60:	4610      	mov	r0, r2
 8006d62:	4798      	blx	r3
 8006d64:	60f8      	str	r0, [r7, #12]
      break;
 8006d66:	e112      	b.n	8006f8e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	7c1b      	ldrb	r3, [r3, #16]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d10d      	bne.n	8006d8c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d78:	f107 0208 	add.w	r2, r7, #8
 8006d7c:	4610      	mov	r0, r2
 8006d7e:	4798      	blx	r3
 8006d80:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	3301      	adds	r3, #1
 8006d86:	2202      	movs	r2, #2
 8006d88:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006d8a:	e100      	b.n	8006f8e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d94:	f107 0208 	add.w	r2, r7, #8
 8006d98:	4610      	mov	r0, r2
 8006d9a:	4798      	blx	r3
 8006d9c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	3301      	adds	r3, #1
 8006da2:	2202      	movs	r2, #2
 8006da4:	701a      	strb	r2, [r3, #0]
      break;
 8006da6:	e0f2      	b.n	8006f8e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	885b      	ldrh	r3, [r3, #2]
 8006dac:	b2db      	uxtb	r3, r3
 8006dae:	2b05      	cmp	r3, #5
 8006db0:	f200 80ac 	bhi.w	8006f0c <USBD_GetDescriptor+0x204>
 8006db4:	a201      	add	r2, pc, #4	; (adr r2, 8006dbc <USBD_GetDescriptor+0xb4>)
 8006db6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dba:	bf00      	nop
 8006dbc:	08006dd5 	.word	0x08006dd5
 8006dc0:	08006e09 	.word	0x08006e09
 8006dc4:	08006e3d 	.word	0x08006e3d
 8006dc8:	08006e71 	.word	0x08006e71
 8006dcc:	08006ea5 	.word	0x08006ea5
 8006dd0:	08006ed9 	.word	0x08006ed9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006dda:	685b      	ldr	r3, [r3, #4]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d00b      	beq.n	8006df8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006de6:	685b      	ldr	r3, [r3, #4]
 8006de8:	687a      	ldr	r2, [r7, #4]
 8006dea:	7c12      	ldrb	r2, [r2, #16]
 8006dec:	f107 0108 	add.w	r1, r7, #8
 8006df0:	4610      	mov	r0, r2
 8006df2:	4798      	blx	r3
 8006df4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006df6:	e091      	b.n	8006f1c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006df8:	6839      	ldr	r1, [r7, #0]
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	f000 fa97 	bl	800732e <USBD_CtlError>
            err++;
 8006e00:	7afb      	ldrb	r3, [r7, #11]
 8006e02:	3301      	adds	r3, #1
 8006e04:	72fb      	strb	r3, [r7, #11]
          break;
 8006e06:	e089      	b.n	8006f1c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006e0e:	689b      	ldr	r3, [r3, #8]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d00b      	beq.n	8006e2c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006e1a:	689b      	ldr	r3, [r3, #8]
 8006e1c:	687a      	ldr	r2, [r7, #4]
 8006e1e:	7c12      	ldrb	r2, [r2, #16]
 8006e20:	f107 0108 	add.w	r1, r7, #8
 8006e24:	4610      	mov	r0, r2
 8006e26:	4798      	blx	r3
 8006e28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006e2a:	e077      	b.n	8006f1c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006e2c:	6839      	ldr	r1, [r7, #0]
 8006e2e:	6878      	ldr	r0, [r7, #4]
 8006e30:	f000 fa7d 	bl	800732e <USBD_CtlError>
            err++;
 8006e34:	7afb      	ldrb	r3, [r7, #11]
 8006e36:	3301      	adds	r3, #1
 8006e38:	72fb      	strb	r3, [r7, #11]
          break;
 8006e3a:	e06f      	b.n	8006f1c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006e42:	68db      	ldr	r3, [r3, #12]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d00b      	beq.n	8006e60 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006e4e:	68db      	ldr	r3, [r3, #12]
 8006e50:	687a      	ldr	r2, [r7, #4]
 8006e52:	7c12      	ldrb	r2, [r2, #16]
 8006e54:	f107 0108 	add.w	r1, r7, #8
 8006e58:	4610      	mov	r0, r2
 8006e5a:	4798      	blx	r3
 8006e5c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006e5e:	e05d      	b.n	8006f1c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006e60:	6839      	ldr	r1, [r7, #0]
 8006e62:	6878      	ldr	r0, [r7, #4]
 8006e64:	f000 fa63 	bl	800732e <USBD_CtlError>
            err++;
 8006e68:	7afb      	ldrb	r3, [r7, #11]
 8006e6a:	3301      	adds	r3, #1
 8006e6c:	72fb      	strb	r3, [r7, #11]
          break;
 8006e6e:	e055      	b.n	8006f1c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006e76:	691b      	ldr	r3, [r3, #16]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d00b      	beq.n	8006e94 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006e82:	691b      	ldr	r3, [r3, #16]
 8006e84:	687a      	ldr	r2, [r7, #4]
 8006e86:	7c12      	ldrb	r2, [r2, #16]
 8006e88:	f107 0108 	add.w	r1, r7, #8
 8006e8c:	4610      	mov	r0, r2
 8006e8e:	4798      	blx	r3
 8006e90:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006e92:	e043      	b.n	8006f1c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006e94:	6839      	ldr	r1, [r7, #0]
 8006e96:	6878      	ldr	r0, [r7, #4]
 8006e98:	f000 fa49 	bl	800732e <USBD_CtlError>
            err++;
 8006e9c:	7afb      	ldrb	r3, [r7, #11]
 8006e9e:	3301      	adds	r3, #1
 8006ea0:	72fb      	strb	r3, [r7, #11]
          break;
 8006ea2:	e03b      	b.n	8006f1c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006eaa:	695b      	ldr	r3, [r3, #20]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d00b      	beq.n	8006ec8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006eb6:	695b      	ldr	r3, [r3, #20]
 8006eb8:	687a      	ldr	r2, [r7, #4]
 8006eba:	7c12      	ldrb	r2, [r2, #16]
 8006ebc:	f107 0108 	add.w	r1, r7, #8
 8006ec0:	4610      	mov	r0, r2
 8006ec2:	4798      	blx	r3
 8006ec4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006ec6:	e029      	b.n	8006f1c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006ec8:	6839      	ldr	r1, [r7, #0]
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f000 fa2f 	bl	800732e <USBD_CtlError>
            err++;
 8006ed0:	7afb      	ldrb	r3, [r7, #11]
 8006ed2:	3301      	adds	r3, #1
 8006ed4:	72fb      	strb	r3, [r7, #11]
          break;
 8006ed6:	e021      	b.n	8006f1c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006ede:	699b      	ldr	r3, [r3, #24]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d00b      	beq.n	8006efc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006eea:	699b      	ldr	r3, [r3, #24]
 8006eec:	687a      	ldr	r2, [r7, #4]
 8006eee:	7c12      	ldrb	r2, [r2, #16]
 8006ef0:	f107 0108 	add.w	r1, r7, #8
 8006ef4:	4610      	mov	r0, r2
 8006ef6:	4798      	blx	r3
 8006ef8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006efa:	e00f      	b.n	8006f1c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006efc:	6839      	ldr	r1, [r7, #0]
 8006efe:	6878      	ldr	r0, [r7, #4]
 8006f00:	f000 fa15 	bl	800732e <USBD_CtlError>
            err++;
 8006f04:	7afb      	ldrb	r3, [r7, #11]
 8006f06:	3301      	adds	r3, #1
 8006f08:	72fb      	strb	r3, [r7, #11]
          break;
 8006f0a:	e007      	b.n	8006f1c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8006f0c:	6839      	ldr	r1, [r7, #0]
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	f000 fa0d 	bl	800732e <USBD_CtlError>
          err++;
 8006f14:	7afb      	ldrb	r3, [r7, #11]
 8006f16:	3301      	adds	r3, #1
 8006f18:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8006f1a:	e038      	b.n	8006f8e <USBD_GetDescriptor+0x286>
 8006f1c:	e037      	b.n	8006f8e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	7c1b      	ldrb	r3, [r3, #16]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d109      	bne.n	8006f3a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f2e:	f107 0208 	add.w	r2, r7, #8
 8006f32:	4610      	mov	r0, r2
 8006f34:	4798      	blx	r3
 8006f36:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006f38:	e029      	b.n	8006f8e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006f3a:	6839      	ldr	r1, [r7, #0]
 8006f3c:	6878      	ldr	r0, [r7, #4]
 8006f3e:	f000 f9f6 	bl	800732e <USBD_CtlError>
        err++;
 8006f42:	7afb      	ldrb	r3, [r7, #11]
 8006f44:	3301      	adds	r3, #1
 8006f46:	72fb      	strb	r3, [r7, #11]
      break;
 8006f48:	e021      	b.n	8006f8e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	7c1b      	ldrb	r3, [r3, #16]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d10d      	bne.n	8006f6e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f5a:	f107 0208 	add.w	r2, r7, #8
 8006f5e:	4610      	mov	r0, r2
 8006f60:	4798      	blx	r3
 8006f62:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	3301      	adds	r3, #1
 8006f68:	2207      	movs	r2, #7
 8006f6a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006f6c:	e00f      	b.n	8006f8e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006f6e:	6839      	ldr	r1, [r7, #0]
 8006f70:	6878      	ldr	r0, [r7, #4]
 8006f72:	f000 f9dc 	bl	800732e <USBD_CtlError>
        err++;
 8006f76:	7afb      	ldrb	r3, [r7, #11]
 8006f78:	3301      	adds	r3, #1
 8006f7a:	72fb      	strb	r3, [r7, #11]
      break;
 8006f7c:	e007      	b.n	8006f8e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006f7e:	6839      	ldr	r1, [r7, #0]
 8006f80:	6878      	ldr	r0, [r7, #4]
 8006f82:	f000 f9d4 	bl	800732e <USBD_CtlError>
      err++;
 8006f86:	7afb      	ldrb	r3, [r7, #11]
 8006f88:	3301      	adds	r3, #1
 8006f8a:	72fb      	strb	r3, [r7, #11]
      break;
 8006f8c:	bf00      	nop
  }

  if (err != 0U)
 8006f8e:	7afb      	ldrb	r3, [r7, #11]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d11c      	bne.n	8006fce <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8006f94:	893b      	ldrh	r3, [r7, #8]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d011      	beq.n	8006fbe <USBD_GetDescriptor+0x2b6>
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	88db      	ldrh	r3, [r3, #6]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d00d      	beq.n	8006fbe <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	88da      	ldrh	r2, [r3, #6]
 8006fa6:	893b      	ldrh	r3, [r7, #8]
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	bf28      	it	cs
 8006fac:	4613      	movcs	r3, r2
 8006fae:	b29b      	uxth	r3, r3
 8006fb0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006fb2:	893b      	ldrh	r3, [r7, #8]
 8006fb4:	461a      	mov	r2, r3
 8006fb6:	68f9      	ldr	r1, [r7, #12]
 8006fb8:	6878      	ldr	r0, [r7, #4]
 8006fba:	f000 fa22 	bl	8007402 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	88db      	ldrh	r3, [r3, #6]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d104      	bne.n	8006fd0 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8006fc6:	6878      	ldr	r0, [r7, #4]
 8006fc8:	f000 fa5b 	bl	8007482 <USBD_CtlSendStatus>
 8006fcc:	e000      	b.n	8006fd0 <USBD_GetDescriptor+0x2c8>
    return;
 8006fce:	bf00      	nop
    }
  }
}
 8006fd0:	3710      	adds	r7, #16
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	bd80      	pop	{r7, pc}
 8006fd6:	bf00      	nop

08006fd8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b084      	sub	sp, #16
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
 8006fe0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	889b      	ldrh	r3, [r3, #4]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d130      	bne.n	800704c <USBD_SetAddress+0x74>
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	88db      	ldrh	r3, [r3, #6]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d12c      	bne.n	800704c <USBD_SetAddress+0x74>
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	885b      	ldrh	r3, [r3, #2]
 8006ff6:	2b7f      	cmp	r3, #127	; 0x7f
 8006ff8:	d828      	bhi.n	800704c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	885b      	ldrh	r3, [r3, #2]
 8006ffe:	b2db      	uxtb	r3, r3
 8007000:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007004:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800700c:	2b03      	cmp	r3, #3
 800700e:	d104      	bne.n	800701a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007010:	6839      	ldr	r1, [r7, #0]
 8007012:	6878      	ldr	r0, [r7, #4]
 8007014:	f000 f98b 	bl	800732e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007018:	e01d      	b.n	8007056 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	7bfa      	ldrb	r2, [r7, #15]
 800701e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007022:	7bfb      	ldrb	r3, [r7, #15]
 8007024:	4619      	mov	r1, r3
 8007026:	6878      	ldr	r0, [r7, #4]
 8007028:	f000 fd5a 	bl	8007ae0 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800702c:	6878      	ldr	r0, [r7, #4]
 800702e:	f000 fa28 	bl	8007482 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007032:	7bfb      	ldrb	r3, [r7, #15]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d004      	beq.n	8007042 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2202      	movs	r2, #2
 800703c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007040:	e009      	b.n	8007056 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2201      	movs	r2, #1
 8007046:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800704a:	e004      	b.n	8007056 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800704c:	6839      	ldr	r1, [r7, #0]
 800704e:	6878      	ldr	r0, [r7, #4]
 8007050:	f000 f96d 	bl	800732e <USBD_CtlError>
  }
}
 8007054:	bf00      	nop
 8007056:	bf00      	nop
 8007058:	3710      	adds	r7, #16
 800705a:	46bd      	mov	sp, r7
 800705c:	bd80      	pop	{r7, pc}
	...

08007060 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007060:	b580      	push	{r7, lr}
 8007062:	b082      	sub	sp, #8
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
 8007068:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	885b      	ldrh	r3, [r3, #2]
 800706e:	b2da      	uxtb	r2, r3
 8007070:	4b41      	ldr	r3, [pc, #260]	; (8007178 <USBD_SetConfig+0x118>)
 8007072:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007074:	4b40      	ldr	r3, [pc, #256]	; (8007178 <USBD_SetConfig+0x118>)
 8007076:	781b      	ldrb	r3, [r3, #0]
 8007078:	2b01      	cmp	r3, #1
 800707a:	d904      	bls.n	8007086 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800707c:	6839      	ldr	r1, [r7, #0]
 800707e:	6878      	ldr	r0, [r7, #4]
 8007080:	f000 f955 	bl	800732e <USBD_CtlError>
 8007084:	e075      	b.n	8007172 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800708c:	2b02      	cmp	r3, #2
 800708e:	d002      	beq.n	8007096 <USBD_SetConfig+0x36>
 8007090:	2b03      	cmp	r3, #3
 8007092:	d023      	beq.n	80070dc <USBD_SetConfig+0x7c>
 8007094:	e062      	b.n	800715c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007096:	4b38      	ldr	r3, [pc, #224]	; (8007178 <USBD_SetConfig+0x118>)
 8007098:	781b      	ldrb	r3, [r3, #0]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d01a      	beq.n	80070d4 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800709e:	4b36      	ldr	r3, [pc, #216]	; (8007178 <USBD_SetConfig+0x118>)
 80070a0:	781b      	ldrb	r3, [r3, #0]
 80070a2:	461a      	mov	r2, r3
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2203      	movs	r2, #3
 80070ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80070b0:	4b31      	ldr	r3, [pc, #196]	; (8007178 <USBD_SetConfig+0x118>)
 80070b2:	781b      	ldrb	r3, [r3, #0]
 80070b4:	4619      	mov	r1, r3
 80070b6:	6878      	ldr	r0, [r7, #4]
 80070b8:	f7ff f9e8 	bl	800648c <USBD_SetClassConfig>
 80070bc:	4603      	mov	r3, r0
 80070be:	2b02      	cmp	r3, #2
 80070c0:	d104      	bne.n	80070cc <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80070c2:	6839      	ldr	r1, [r7, #0]
 80070c4:	6878      	ldr	r0, [r7, #4]
 80070c6:	f000 f932 	bl	800732e <USBD_CtlError>
            return;
 80070ca:	e052      	b.n	8007172 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80070cc:	6878      	ldr	r0, [r7, #4]
 80070ce:	f000 f9d8 	bl	8007482 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80070d2:	e04e      	b.n	8007172 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80070d4:	6878      	ldr	r0, [r7, #4]
 80070d6:	f000 f9d4 	bl	8007482 <USBD_CtlSendStatus>
        break;
 80070da:	e04a      	b.n	8007172 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80070dc:	4b26      	ldr	r3, [pc, #152]	; (8007178 <USBD_SetConfig+0x118>)
 80070de:	781b      	ldrb	r3, [r3, #0]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d112      	bne.n	800710a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2202      	movs	r2, #2
 80070e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80070ec:	4b22      	ldr	r3, [pc, #136]	; (8007178 <USBD_SetConfig+0x118>)
 80070ee:	781b      	ldrb	r3, [r3, #0]
 80070f0:	461a      	mov	r2, r3
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80070f6:	4b20      	ldr	r3, [pc, #128]	; (8007178 <USBD_SetConfig+0x118>)
 80070f8:	781b      	ldrb	r3, [r3, #0]
 80070fa:	4619      	mov	r1, r3
 80070fc:	6878      	ldr	r0, [r7, #4]
 80070fe:	f7ff f9e4 	bl	80064ca <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8007102:	6878      	ldr	r0, [r7, #4]
 8007104:	f000 f9bd 	bl	8007482 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007108:	e033      	b.n	8007172 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800710a:	4b1b      	ldr	r3, [pc, #108]	; (8007178 <USBD_SetConfig+0x118>)
 800710c:	781b      	ldrb	r3, [r3, #0]
 800710e:	461a      	mov	r2, r3
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	685b      	ldr	r3, [r3, #4]
 8007114:	429a      	cmp	r2, r3
 8007116:	d01d      	beq.n	8007154 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	685b      	ldr	r3, [r3, #4]
 800711c:	b2db      	uxtb	r3, r3
 800711e:	4619      	mov	r1, r3
 8007120:	6878      	ldr	r0, [r7, #4]
 8007122:	f7ff f9d2 	bl	80064ca <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8007126:	4b14      	ldr	r3, [pc, #80]	; (8007178 <USBD_SetConfig+0x118>)
 8007128:	781b      	ldrb	r3, [r3, #0]
 800712a:	461a      	mov	r2, r3
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007130:	4b11      	ldr	r3, [pc, #68]	; (8007178 <USBD_SetConfig+0x118>)
 8007132:	781b      	ldrb	r3, [r3, #0]
 8007134:	4619      	mov	r1, r3
 8007136:	6878      	ldr	r0, [r7, #4]
 8007138:	f7ff f9a8 	bl	800648c <USBD_SetClassConfig>
 800713c:	4603      	mov	r3, r0
 800713e:	2b02      	cmp	r3, #2
 8007140:	d104      	bne.n	800714c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8007142:	6839      	ldr	r1, [r7, #0]
 8007144:	6878      	ldr	r0, [r7, #4]
 8007146:	f000 f8f2 	bl	800732e <USBD_CtlError>
            return;
 800714a:	e012      	b.n	8007172 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800714c:	6878      	ldr	r0, [r7, #4]
 800714e:	f000 f998 	bl	8007482 <USBD_CtlSendStatus>
        break;
 8007152:	e00e      	b.n	8007172 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007154:	6878      	ldr	r0, [r7, #4]
 8007156:	f000 f994 	bl	8007482 <USBD_CtlSendStatus>
        break;
 800715a:	e00a      	b.n	8007172 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800715c:	6839      	ldr	r1, [r7, #0]
 800715e:	6878      	ldr	r0, [r7, #4]
 8007160:	f000 f8e5 	bl	800732e <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007164:	4b04      	ldr	r3, [pc, #16]	; (8007178 <USBD_SetConfig+0x118>)
 8007166:	781b      	ldrb	r3, [r3, #0]
 8007168:	4619      	mov	r1, r3
 800716a:	6878      	ldr	r0, [r7, #4]
 800716c:	f7ff f9ad 	bl	80064ca <USBD_ClrClassConfig>
        break;
 8007170:	bf00      	nop
    }
  }
}
 8007172:	3708      	adds	r7, #8
 8007174:	46bd      	mov	sp, r7
 8007176:	bd80      	pop	{r7, pc}
 8007178:	20000158 	.word	0x20000158

0800717c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b082      	sub	sp, #8
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
 8007184:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	88db      	ldrh	r3, [r3, #6]
 800718a:	2b01      	cmp	r3, #1
 800718c:	d004      	beq.n	8007198 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800718e:	6839      	ldr	r1, [r7, #0]
 8007190:	6878      	ldr	r0, [r7, #4]
 8007192:	f000 f8cc 	bl	800732e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007196:	e022      	b.n	80071de <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800719e:	2b02      	cmp	r3, #2
 80071a0:	dc02      	bgt.n	80071a8 <USBD_GetConfig+0x2c>
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	dc03      	bgt.n	80071ae <USBD_GetConfig+0x32>
 80071a6:	e015      	b.n	80071d4 <USBD_GetConfig+0x58>
 80071a8:	2b03      	cmp	r3, #3
 80071aa:	d00b      	beq.n	80071c4 <USBD_GetConfig+0x48>
 80071ac:	e012      	b.n	80071d4 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	2200      	movs	r2, #0
 80071b2:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	3308      	adds	r3, #8
 80071b8:	2201      	movs	r2, #1
 80071ba:	4619      	mov	r1, r3
 80071bc:	6878      	ldr	r0, [r7, #4]
 80071be:	f000 f920 	bl	8007402 <USBD_CtlSendData>
        break;
 80071c2:	e00c      	b.n	80071de <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	3304      	adds	r3, #4
 80071c8:	2201      	movs	r2, #1
 80071ca:	4619      	mov	r1, r3
 80071cc:	6878      	ldr	r0, [r7, #4]
 80071ce:	f000 f918 	bl	8007402 <USBD_CtlSendData>
        break;
 80071d2:	e004      	b.n	80071de <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 80071d4:	6839      	ldr	r1, [r7, #0]
 80071d6:	6878      	ldr	r0, [r7, #4]
 80071d8:	f000 f8a9 	bl	800732e <USBD_CtlError>
        break;
 80071dc:	bf00      	nop
}
 80071de:	bf00      	nop
 80071e0:	3708      	adds	r7, #8
 80071e2:	46bd      	mov	sp, r7
 80071e4:	bd80      	pop	{r7, pc}

080071e6 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80071e6:	b580      	push	{r7, lr}
 80071e8:	b082      	sub	sp, #8
 80071ea:	af00      	add	r7, sp, #0
 80071ec:	6078      	str	r0, [r7, #4]
 80071ee:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071f6:	3b01      	subs	r3, #1
 80071f8:	2b02      	cmp	r3, #2
 80071fa:	d81e      	bhi.n	800723a <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	88db      	ldrh	r3, [r3, #6]
 8007200:	2b02      	cmp	r3, #2
 8007202:	d004      	beq.n	800720e <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8007204:	6839      	ldr	r1, [r7, #0]
 8007206:	6878      	ldr	r0, [r7, #4]
 8007208:	f000 f891 	bl	800732e <USBD_CtlError>
        break;
 800720c:	e01a      	b.n	8007244 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2201      	movs	r2, #1
 8007212:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800721a:	2b00      	cmp	r3, #0
 800721c:	d005      	beq.n	800722a <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	68db      	ldr	r3, [r3, #12]
 8007222:	f043 0202 	orr.w	r2, r3, #2
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	330c      	adds	r3, #12
 800722e:	2202      	movs	r2, #2
 8007230:	4619      	mov	r1, r3
 8007232:	6878      	ldr	r0, [r7, #4]
 8007234:	f000 f8e5 	bl	8007402 <USBD_CtlSendData>
      break;
 8007238:	e004      	b.n	8007244 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800723a:	6839      	ldr	r1, [r7, #0]
 800723c:	6878      	ldr	r0, [r7, #4]
 800723e:	f000 f876 	bl	800732e <USBD_CtlError>
      break;
 8007242:	bf00      	nop
  }
}
 8007244:	bf00      	nop
 8007246:	3708      	adds	r7, #8
 8007248:	46bd      	mov	sp, r7
 800724a:	bd80      	pop	{r7, pc}

0800724c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800724c:	b580      	push	{r7, lr}
 800724e:	b082      	sub	sp, #8
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
 8007254:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	885b      	ldrh	r3, [r3, #2]
 800725a:	2b01      	cmp	r3, #1
 800725c:	d106      	bne.n	800726c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2201      	movs	r2, #1
 8007262:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8007266:	6878      	ldr	r0, [r7, #4]
 8007268:	f000 f90b 	bl	8007482 <USBD_CtlSendStatus>
  }
}
 800726c:	bf00      	nop
 800726e:	3708      	adds	r7, #8
 8007270:	46bd      	mov	sp, r7
 8007272:	bd80      	pop	{r7, pc}

08007274 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b082      	sub	sp, #8
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
 800727c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007284:	3b01      	subs	r3, #1
 8007286:	2b02      	cmp	r3, #2
 8007288:	d80b      	bhi.n	80072a2 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	885b      	ldrh	r3, [r3, #2]
 800728e:	2b01      	cmp	r3, #1
 8007290:	d10c      	bne.n	80072ac <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2200      	movs	r2, #0
 8007296:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800729a:	6878      	ldr	r0, [r7, #4]
 800729c:	f000 f8f1 	bl	8007482 <USBD_CtlSendStatus>
      }
      break;
 80072a0:	e004      	b.n	80072ac <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80072a2:	6839      	ldr	r1, [r7, #0]
 80072a4:	6878      	ldr	r0, [r7, #4]
 80072a6:	f000 f842 	bl	800732e <USBD_CtlError>
      break;
 80072aa:	e000      	b.n	80072ae <USBD_ClrFeature+0x3a>
      break;
 80072ac:	bf00      	nop
  }
}
 80072ae:	bf00      	nop
 80072b0:	3708      	adds	r7, #8
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bd80      	pop	{r7, pc}

080072b6 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80072b6:	b480      	push	{r7}
 80072b8:	b083      	sub	sp, #12
 80072ba:	af00      	add	r7, sp, #0
 80072bc:	6078      	str	r0, [r7, #4]
 80072be:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	781a      	ldrb	r2, [r3, #0]
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	785a      	ldrb	r2, [r3, #1]
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	3302      	adds	r3, #2
 80072d4:	781b      	ldrb	r3, [r3, #0]
 80072d6:	b29a      	uxth	r2, r3
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	3303      	adds	r3, #3
 80072dc:	781b      	ldrb	r3, [r3, #0]
 80072de:	b29b      	uxth	r3, r3
 80072e0:	021b      	lsls	r3, r3, #8
 80072e2:	b29b      	uxth	r3, r3
 80072e4:	4413      	add	r3, r2
 80072e6:	b29a      	uxth	r2, r3
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	3304      	adds	r3, #4
 80072f0:	781b      	ldrb	r3, [r3, #0]
 80072f2:	b29a      	uxth	r2, r3
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	3305      	adds	r3, #5
 80072f8:	781b      	ldrb	r3, [r3, #0]
 80072fa:	b29b      	uxth	r3, r3
 80072fc:	021b      	lsls	r3, r3, #8
 80072fe:	b29b      	uxth	r3, r3
 8007300:	4413      	add	r3, r2
 8007302:	b29a      	uxth	r2, r3
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	3306      	adds	r3, #6
 800730c:	781b      	ldrb	r3, [r3, #0]
 800730e:	b29a      	uxth	r2, r3
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	3307      	adds	r3, #7
 8007314:	781b      	ldrb	r3, [r3, #0]
 8007316:	b29b      	uxth	r3, r3
 8007318:	021b      	lsls	r3, r3, #8
 800731a:	b29b      	uxth	r3, r3
 800731c:	4413      	add	r3, r2
 800731e:	b29a      	uxth	r2, r3
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	80da      	strh	r2, [r3, #6]

}
 8007324:	bf00      	nop
 8007326:	370c      	adds	r7, #12
 8007328:	46bd      	mov	sp, r7
 800732a:	bc80      	pop	{r7}
 800732c:	4770      	bx	lr

0800732e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800732e:	b580      	push	{r7, lr}
 8007330:	b082      	sub	sp, #8
 8007332:	af00      	add	r7, sp, #0
 8007334:	6078      	str	r0, [r7, #4]
 8007336:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8007338:	2180      	movs	r1, #128	; 0x80
 800733a:	6878      	ldr	r0, [r7, #4]
 800733c:	f000 fb66 	bl	8007a0c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007340:	2100      	movs	r1, #0
 8007342:	6878      	ldr	r0, [r7, #4]
 8007344:	f000 fb62 	bl	8007a0c <USBD_LL_StallEP>
}
 8007348:	bf00      	nop
 800734a:	3708      	adds	r7, #8
 800734c:	46bd      	mov	sp, r7
 800734e:	bd80      	pop	{r7, pc}

08007350 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007350:	b580      	push	{r7, lr}
 8007352:	b086      	sub	sp, #24
 8007354:	af00      	add	r7, sp, #0
 8007356:	60f8      	str	r0, [r7, #12]
 8007358:	60b9      	str	r1, [r7, #8]
 800735a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800735c:	2300      	movs	r3, #0
 800735e:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d032      	beq.n	80073cc <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007366:	68f8      	ldr	r0, [r7, #12]
 8007368:	f000 f834 	bl	80073d4 <USBD_GetLen>
 800736c:	4603      	mov	r3, r0
 800736e:	3301      	adds	r3, #1
 8007370:	b29b      	uxth	r3, r3
 8007372:	005b      	lsls	r3, r3, #1
 8007374:	b29a      	uxth	r2, r3
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800737a:	7dfb      	ldrb	r3, [r7, #23]
 800737c:	1c5a      	adds	r2, r3, #1
 800737e:	75fa      	strb	r2, [r7, #23]
 8007380:	461a      	mov	r2, r3
 8007382:	68bb      	ldr	r3, [r7, #8]
 8007384:	4413      	add	r3, r2
 8007386:	687a      	ldr	r2, [r7, #4]
 8007388:	7812      	ldrb	r2, [r2, #0]
 800738a:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800738c:	7dfb      	ldrb	r3, [r7, #23]
 800738e:	1c5a      	adds	r2, r3, #1
 8007390:	75fa      	strb	r2, [r7, #23]
 8007392:	461a      	mov	r2, r3
 8007394:	68bb      	ldr	r3, [r7, #8]
 8007396:	4413      	add	r3, r2
 8007398:	2203      	movs	r2, #3
 800739a:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800739c:	e012      	b.n	80073c4 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	1c5a      	adds	r2, r3, #1
 80073a2:	60fa      	str	r2, [r7, #12]
 80073a4:	7dfa      	ldrb	r2, [r7, #23]
 80073a6:	1c51      	adds	r1, r2, #1
 80073a8:	75f9      	strb	r1, [r7, #23]
 80073aa:	4611      	mov	r1, r2
 80073ac:	68ba      	ldr	r2, [r7, #8]
 80073ae:	440a      	add	r2, r1
 80073b0:	781b      	ldrb	r3, [r3, #0]
 80073b2:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80073b4:	7dfb      	ldrb	r3, [r7, #23]
 80073b6:	1c5a      	adds	r2, r3, #1
 80073b8:	75fa      	strb	r2, [r7, #23]
 80073ba:	461a      	mov	r2, r3
 80073bc:	68bb      	ldr	r3, [r7, #8]
 80073be:	4413      	add	r3, r2
 80073c0:	2200      	movs	r2, #0
 80073c2:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	781b      	ldrb	r3, [r3, #0]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d1e8      	bne.n	800739e <USBD_GetString+0x4e>
    }
  }
}
 80073cc:	bf00      	nop
 80073ce:	3718      	adds	r7, #24
 80073d0:	46bd      	mov	sp, r7
 80073d2:	bd80      	pop	{r7, pc}

080073d4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80073d4:	b480      	push	{r7}
 80073d6:	b085      	sub	sp, #20
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80073dc:	2300      	movs	r3, #0
 80073de:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80073e0:	e005      	b.n	80073ee <USBD_GetLen+0x1a>
  {
    len++;
 80073e2:	7bfb      	ldrb	r3, [r7, #15]
 80073e4:	3301      	adds	r3, #1
 80073e6:	73fb      	strb	r3, [r7, #15]
    buf++;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	3301      	adds	r3, #1
 80073ec:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	781b      	ldrb	r3, [r3, #0]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d1f5      	bne.n	80073e2 <USBD_GetLen+0xe>
  }

  return len;
 80073f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80073f8:	4618      	mov	r0, r3
 80073fa:	3714      	adds	r7, #20
 80073fc:	46bd      	mov	sp, r7
 80073fe:	bc80      	pop	{r7}
 8007400:	4770      	bx	lr

08007402 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8007402:	b580      	push	{r7, lr}
 8007404:	b084      	sub	sp, #16
 8007406:	af00      	add	r7, sp, #0
 8007408:	60f8      	str	r0, [r7, #12]
 800740a:	60b9      	str	r1, [r7, #8]
 800740c:	4613      	mov	r3, r2
 800740e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	2202      	movs	r2, #2
 8007414:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007418:	88fa      	ldrh	r2, [r7, #6]
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800741e:	88fa      	ldrh	r2, [r7, #6]
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007424:	88fb      	ldrh	r3, [r7, #6]
 8007426:	68ba      	ldr	r2, [r7, #8]
 8007428:	2100      	movs	r1, #0
 800742a:	68f8      	ldr	r0, [r7, #12]
 800742c:	f000 fb77 	bl	8007b1e <USBD_LL_Transmit>

  return USBD_OK;
 8007430:	2300      	movs	r3, #0
}
 8007432:	4618      	mov	r0, r3
 8007434:	3710      	adds	r7, #16
 8007436:	46bd      	mov	sp, r7
 8007438:	bd80      	pop	{r7, pc}

0800743a <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800743a:	b580      	push	{r7, lr}
 800743c:	b084      	sub	sp, #16
 800743e:	af00      	add	r7, sp, #0
 8007440:	60f8      	str	r0, [r7, #12]
 8007442:	60b9      	str	r1, [r7, #8]
 8007444:	4613      	mov	r3, r2
 8007446:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007448:	88fb      	ldrh	r3, [r7, #6]
 800744a:	68ba      	ldr	r2, [r7, #8]
 800744c:	2100      	movs	r1, #0
 800744e:	68f8      	ldr	r0, [r7, #12]
 8007450:	f000 fb65 	bl	8007b1e <USBD_LL_Transmit>

  return USBD_OK;
 8007454:	2300      	movs	r3, #0
}
 8007456:	4618      	mov	r0, r3
 8007458:	3710      	adds	r7, #16
 800745a:	46bd      	mov	sp, r7
 800745c:	bd80      	pop	{r7, pc}

0800745e <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800745e:	b580      	push	{r7, lr}
 8007460:	b084      	sub	sp, #16
 8007462:	af00      	add	r7, sp, #0
 8007464:	60f8      	str	r0, [r7, #12]
 8007466:	60b9      	str	r1, [r7, #8]
 8007468:	4613      	mov	r3, r2
 800746a:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800746c:	88fb      	ldrh	r3, [r7, #6]
 800746e:	68ba      	ldr	r2, [r7, #8]
 8007470:	2100      	movs	r1, #0
 8007472:	68f8      	ldr	r0, [r7, #12]
 8007474:	f000 fb76 	bl	8007b64 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007478:	2300      	movs	r3, #0
}
 800747a:	4618      	mov	r0, r3
 800747c:	3710      	adds	r7, #16
 800747e:	46bd      	mov	sp, r7
 8007480:	bd80      	pop	{r7, pc}

08007482 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007482:	b580      	push	{r7, lr}
 8007484:	b082      	sub	sp, #8
 8007486:	af00      	add	r7, sp, #0
 8007488:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2204      	movs	r2, #4
 800748e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007492:	2300      	movs	r3, #0
 8007494:	2200      	movs	r2, #0
 8007496:	2100      	movs	r1, #0
 8007498:	6878      	ldr	r0, [r7, #4]
 800749a:	f000 fb40 	bl	8007b1e <USBD_LL_Transmit>

  return USBD_OK;
 800749e:	2300      	movs	r3, #0
}
 80074a0:	4618      	mov	r0, r3
 80074a2:	3708      	adds	r7, #8
 80074a4:	46bd      	mov	sp, r7
 80074a6:	bd80      	pop	{r7, pc}

080074a8 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b082      	sub	sp, #8
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2205      	movs	r2, #5
 80074b4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80074b8:	2300      	movs	r3, #0
 80074ba:	2200      	movs	r2, #0
 80074bc:	2100      	movs	r1, #0
 80074be:	6878      	ldr	r0, [r7, #4]
 80074c0:	f000 fb50 	bl	8007b64 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80074c4:	2300      	movs	r3, #0
}
 80074c6:	4618      	mov	r0, r3
 80074c8:	3708      	adds	r7, #8
 80074ca:	46bd      	mov	sp, r7
 80074cc:	bd80      	pop	{r7, pc}
	...

080074d0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80074d4:	2200      	movs	r2, #0
 80074d6:	490e      	ldr	r1, [pc, #56]	; (8007510 <MX_USB_DEVICE_Init+0x40>)
 80074d8:	480e      	ldr	r0, [pc, #56]	; (8007514 <MX_USB_DEVICE_Init+0x44>)
 80074da:	f7fe ff7d 	bl	80063d8 <USBD_Init>
 80074de:	4603      	mov	r3, r0
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d001      	beq.n	80074e8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80074e4:	f7f8 fffc 	bl	80004e0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 80074e8:	490b      	ldr	r1, [pc, #44]	; (8007518 <MX_USB_DEVICE_Init+0x48>)
 80074ea:	480a      	ldr	r0, [pc, #40]	; (8007514 <MX_USB_DEVICE_Init+0x44>)
 80074ec:	f7fe ff9f 	bl	800642e <USBD_RegisterClass>
 80074f0:	4603      	mov	r3, r0
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d001      	beq.n	80074fa <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80074f6:	f7f8 fff3 	bl	80004e0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80074fa:	4806      	ldr	r0, [pc, #24]	; (8007514 <MX_USB_DEVICE_Init+0x44>)
 80074fc:	f7fe ffb0 	bl	8006460 <USBD_Start>
 8007500:	4603      	mov	r3, r0
 8007502:	2b00      	cmp	r3, #0
 8007504:	d001      	beq.n	800750a <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8007506:	f7f8 ffeb 	bl	80004e0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800750a:	bf00      	nop
 800750c:	bd80      	pop	{r7, pc}
 800750e:	bf00      	nop
 8007510:	200000ec 	.word	0x200000ec
 8007514:	20000208 	.word	0x20000208
 8007518:	2000000c 	.word	0x2000000c

0800751c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800751c:	b480      	push	{r7}
 800751e:	b083      	sub	sp, #12
 8007520:	af00      	add	r7, sp, #0
 8007522:	4603      	mov	r3, r0
 8007524:	6039      	str	r1, [r7, #0]
 8007526:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	2212      	movs	r2, #18
 800752c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800752e:	4b03      	ldr	r3, [pc, #12]	; (800753c <USBD_FS_DeviceDescriptor+0x20>)
}
 8007530:	4618      	mov	r0, r3
 8007532:	370c      	adds	r7, #12
 8007534:	46bd      	mov	sp, r7
 8007536:	bc80      	pop	{r7}
 8007538:	4770      	bx	lr
 800753a:	bf00      	nop
 800753c:	20000108 	.word	0x20000108

08007540 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007540:	b480      	push	{r7}
 8007542:	b083      	sub	sp, #12
 8007544:	af00      	add	r7, sp, #0
 8007546:	4603      	mov	r3, r0
 8007548:	6039      	str	r1, [r7, #0]
 800754a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	2204      	movs	r2, #4
 8007550:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007552:	4b03      	ldr	r3, [pc, #12]	; (8007560 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007554:	4618      	mov	r0, r3
 8007556:	370c      	adds	r7, #12
 8007558:	46bd      	mov	sp, r7
 800755a:	bc80      	pop	{r7}
 800755c:	4770      	bx	lr
 800755e:	bf00      	nop
 8007560:	2000011c 	.word	0x2000011c

08007564 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b082      	sub	sp, #8
 8007568:	af00      	add	r7, sp, #0
 800756a:	4603      	mov	r3, r0
 800756c:	6039      	str	r1, [r7, #0]
 800756e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007570:	79fb      	ldrb	r3, [r7, #7]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d105      	bne.n	8007582 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007576:	683a      	ldr	r2, [r7, #0]
 8007578:	4907      	ldr	r1, [pc, #28]	; (8007598 <USBD_FS_ProductStrDescriptor+0x34>)
 800757a:	4808      	ldr	r0, [pc, #32]	; (800759c <USBD_FS_ProductStrDescriptor+0x38>)
 800757c:	f7ff fee8 	bl	8007350 <USBD_GetString>
 8007580:	e004      	b.n	800758c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007582:	683a      	ldr	r2, [r7, #0]
 8007584:	4904      	ldr	r1, [pc, #16]	; (8007598 <USBD_FS_ProductStrDescriptor+0x34>)
 8007586:	4805      	ldr	r0, [pc, #20]	; (800759c <USBD_FS_ProductStrDescriptor+0x38>)
 8007588:	f7ff fee2 	bl	8007350 <USBD_GetString>
  }
  return USBD_StrDesc;
 800758c:	4b02      	ldr	r3, [pc, #8]	; (8007598 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800758e:	4618      	mov	r0, r3
 8007590:	3708      	adds	r7, #8
 8007592:	46bd      	mov	sp, r7
 8007594:	bd80      	pop	{r7, pc}
 8007596:	bf00      	nop
 8007598:	200004cc 	.word	0x200004cc
 800759c:	08007cc4 	.word	0x08007cc4

080075a0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b082      	sub	sp, #8
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	4603      	mov	r3, r0
 80075a8:	6039      	str	r1, [r7, #0]
 80075aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80075ac:	683a      	ldr	r2, [r7, #0]
 80075ae:	4904      	ldr	r1, [pc, #16]	; (80075c0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80075b0:	4804      	ldr	r0, [pc, #16]	; (80075c4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80075b2:	f7ff fecd 	bl	8007350 <USBD_GetString>
  return USBD_StrDesc;
 80075b6:	4b02      	ldr	r3, [pc, #8]	; (80075c0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80075b8:	4618      	mov	r0, r3
 80075ba:	3708      	adds	r7, #8
 80075bc:	46bd      	mov	sp, r7
 80075be:	bd80      	pop	{r7, pc}
 80075c0:	200004cc 	.word	0x200004cc
 80075c4:	08007cdc 	.word	0x08007cdc

080075c8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b082      	sub	sp, #8
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	4603      	mov	r3, r0
 80075d0:	6039      	str	r1, [r7, #0]
 80075d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	221a      	movs	r2, #26
 80075d8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80075da:	f000 f843 	bl	8007664 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80075de:	4b02      	ldr	r3, [pc, #8]	; (80075e8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80075e0:	4618      	mov	r0, r3
 80075e2:	3708      	adds	r7, #8
 80075e4:	46bd      	mov	sp, r7
 80075e6:	bd80      	pop	{r7, pc}
 80075e8:	20000120 	.word	0x20000120

080075ec <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b082      	sub	sp, #8
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	4603      	mov	r3, r0
 80075f4:	6039      	str	r1, [r7, #0]
 80075f6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80075f8:	79fb      	ldrb	r3, [r7, #7]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d105      	bne.n	800760a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80075fe:	683a      	ldr	r2, [r7, #0]
 8007600:	4907      	ldr	r1, [pc, #28]	; (8007620 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007602:	4808      	ldr	r0, [pc, #32]	; (8007624 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007604:	f7ff fea4 	bl	8007350 <USBD_GetString>
 8007608:	e004      	b.n	8007614 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800760a:	683a      	ldr	r2, [r7, #0]
 800760c:	4904      	ldr	r1, [pc, #16]	; (8007620 <USBD_FS_ConfigStrDescriptor+0x34>)
 800760e:	4805      	ldr	r0, [pc, #20]	; (8007624 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007610:	f7ff fe9e 	bl	8007350 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007614:	4b02      	ldr	r3, [pc, #8]	; (8007620 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007616:	4618      	mov	r0, r3
 8007618:	3708      	adds	r7, #8
 800761a:	46bd      	mov	sp, r7
 800761c:	bd80      	pop	{r7, pc}
 800761e:	bf00      	nop
 8007620:	200004cc 	.word	0x200004cc
 8007624:	08007cf0 	.word	0x08007cf0

08007628 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b082      	sub	sp, #8
 800762c:	af00      	add	r7, sp, #0
 800762e:	4603      	mov	r3, r0
 8007630:	6039      	str	r1, [r7, #0]
 8007632:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007634:	79fb      	ldrb	r3, [r7, #7]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d105      	bne.n	8007646 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800763a:	683a      	ldr	r2, [r7, #0]
 800763c:	4907      	ldr	r1, [pc, #28]	; (800765c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800763e:	4808      	ldr	r0, [pc, #32]	; (8007660 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007640:	f7ff fe86 	bl	8007350 <USBD_GetString>
 8007644:	e004      	b.n	8007650 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007646:	683a      	ldr	r2, [r7, #0]
 8007648:	4904      	ldr	r1, [pc, #16]	; (800765c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800764a:	4805      	ldr	r0, [pc, #20]	; (8007660 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800764c:	f7ff fe80 	bl	8007350 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007650:	4b02      	ldr	r3, [pc, #8]	; (800765c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007652:	4618      	mov	r0, r3
 8007654:	3708      	adds	r7, #8
 8007656:	46bd      	mov	sp, r7
 8007658:	bd80      	pop	{r7, pc}
 800765a:	bf00      	nop
 800765c:	200004cc 	.word	0x200004cc
 8007660:	08007cfc 	.word	0x08007cfc

08007664 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b084      	sub	sp, #16
 8007668:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800766a:	4b0f      	ldr	r3, [pc, #60]	; (80076a8 <Get_SerialNum+0x44>)
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007670:	4b0e      	ldr	r3, [pc, #56]	; (80076ac <Get_SerialNum+0x48>)
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007676:	4b0e      	ldr	r3, [pc, #56]	; (80076b0 <Get_SerialNum+0x4c>)
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800767c:	68fa      	ldr	r2, [r7, #12]
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	4413      	add	r3, r2
 8007682:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d009      	beq.n	800769e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800768a:	2208      	movs	r2, #8
 800768c:	4909      	ldr	r1, [pc, #36]	; (80076b4 <Get_SerialNum+0x50>)
 800768e:	68f8      	ldr	r0, [r7, #12]
 8007690:	f000 f814 	bl	80076bc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007694:	2204      	movs	r2, #4
 8007696:	4908      	ldr	r1, [pc, #32]	; (80076b8 <Get_SerialNum+0x54>)
 8007698:	68b8      	ldr	r0, [r7, #8]
 800769a:	f000 f80f 	bl	80076bc <IntToUnicode>
  }
}
 800769e:	bf00      	nop
 80076a0:	3710      	adds	r7, #16
 80076a2:	46bd      	mov	sp, r7
 80076a4:	bd80      	pop	{r7, pc}
 80076a6:	bf00      	nop
 80076a8:	1ffff7e8 	.word	0x1ffff7e8
 80076ac:	1ffff7ec 	.word	0x1ffff7ec
 80076b0:	1ffff7f0 	.word	0x1ffff7f0
 80076b4:	20000122 	.word	0x20000122
 80076b8:	20000132 	.word	0x20000132

080076bc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80076bc:	b480      	push	{r7}
 80076be:	b087      	sub	sp, #28
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	60f8      	str	r0, [r7, #12]
 80076c4:	60b9      	str	r1, [r7, #8]
 80076c6:	4613      	mov	r3, r2
 80076c8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80076ca:	2300      	movs	r3, #0
 80076cc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80076ce:	2300      	movs	r3, #0
 80076d0:	75fb      	strb	r3, [r7, #23]
 80076d2:	e027      	b.n	8007724 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	0f1b      	lsrs	r3, r3, #28
 80076d8:	2b09      	cmp	r3, #9
 80076da:	d80b      	bhi.n	80076f4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	0f1b      	lsrs	r3, r3, #28
 80076e0:	b2da      	uxtb	r2, r3
 80076e2:	7dfb      	ldrb	r3, [r7, #23]
 80076e4:	005b      	lsls	r3, r3, #1
 80076e6:	4619      	mov	r1, r3
 80076e8:	68bb      	ldr	r3, [r7, #8]
 80076ea:	440b      	add	r3, r1
 80076ec:	3230      	adds	r2, #48	; 0x30
 80076ee:	b2d2      	uxtb	r2, r2
 80076f0:	701a      	strb	r2, [r3, #0]
 80076f2:	e00a      	b.n	800770a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	0f1b      	lsrs	r3, r3, #28
 80076f8:	b2da      	uxtb	r2, r3
 80076fa:	7dfb      	ldrb	r3, [r7, #23]
 80076fc:	005b      	lsls	r3, r3, #1
 80076fe:	4619      	mov	r1, r3
 8007700:	68bb      	ldr	r3, [r7, #8]
 8007702:	440b      	add	r3, r1
 8007704:	3237      	adds	r2, #55	; 0x37
 8007706:	b2d2      	uxtb	r2, r2
 8007708:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	011b      	lsls	r3, r3, #4
 800770e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007710:	7dfb      	ldrb	r3, [r7, #23]
 8007712:	005b      	lsls	r3, r3, #1
 8007714:	3301      	adds	r3, #1
 8007716:	68ba      	ldr	r2, [r7, #8]
 8007718:	4413      	add	r3, r2
 800771a:	2200      	movs	r2, #0
 800771c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800771e:	7dfb      	ldrb	r3, [r7, #23]
 8007720:	3301      	adds	r3, #1
 8007722:	75fb      	strb	r3, [r7, #23]
 8007724:	7dfa      	ldrb	r2, [r7, #23]
 8007726:	79fb      	ldrb	r3, [r7, #7]
 8007728:	429a      	cmp	r2, r3
 800772a:	d3d3      	bcc.n	80076d4 <IntToUnicode+0x18>
  }
}
 800772c:	bf00      	nop
 800772e:	bf00      	nop
 8007730:	371c      	adds	r7, #28
 8007732:	46bd      	mov	sp, r7
 8007734:	bc80      	pop	{r7}
 8007736:	4770      	bx	lr

08007738 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b084      	sub	sp, #16
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	4a0d      	ldr	r2, [pc, #52]	; (800777c <HAL_PCD_MspInit+0x44>)
 8007746:	4293      	cmp	r3, r2
 8007748:	d113      	bne.n	8007772 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800774a:	4b0d      	ldr	r3, [pc, #52]	; (8007780 <HAL_PCD_MspInit+0x48>)
 800774c:	69db      	ldr	r3, [r3, #28]
 800774e:	4a0c      	ldr	r2, [pc, #48]	; (8007780 <HAL_PCD_MspInit+0x48>)
 8007750:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007754:	61d3      	str	r3, [r2, #28]
 8007756:	4b0a      	ldr	r3, [pc, #40]	; (8007780 <HAL_PCD_MspInit+0x48>)
 8007758:	69db      	ldr	r3, [r3, #28]
 800775a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800775e:	60fb      	str	r3, [r7, #12]
 8007760:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8007762:	2200      	movs	r2, #0
 8007764:	2100      	movs	r1, #0
 8007766:	2014      	movs	r0, #20
 8007768:	f7f9 fcfb 	bl	8001162 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800776c:	2014      	movs	r0, #20
 800776e:	f7f9 fd14 	bl	800119a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8007772:	bf00      	nop
 8007774:	3710      	adds	r7, #16
 8007776:	46bd      	mov	sp, r7
 8007778:	bd80      	pop	{r7, pc}
 800777a:	bf00      	nop
 800777c:	40005c00 	.word	0x40005c00
 8007780:	40021000 	.word	0x40021000

08007784 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007784:	b580      	push	{r7, lr}
 8007786:	b082      	sub	sp, #8
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8007798:	4619      	mov	r1, r3
 800779a:	4610      	mov	r0, r2
 800779c:	f7fe fea8 	bl	80064f0 <USBD_LL_SetupStage>
}
 80077a0:	bf00      	nop
 80077a2:	3708      	adds	r7, #8
 80077a4:	46bd      	mov	sp, r7
 80077a6:	bd80      	pop	{r7, pc}

080077a8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b082      	sub	sp, #8
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
 80077b0:	460b      	mov	r3, r1
 80077b2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80077ba:	78fa      	ldrb	r2, [r7, #3]
 80077bc:	6879      	ldr	r1, [r7, #4]
 80077be:	4613      	mov	r3, r2
 80077c0:	009b      	lsls	r3, r3, #2
 80077c2:	4413      	add	r3, r2
 80077c4:	00db      	lsls	r3, r3, #3
 80077c6:	440b      	add	r3, r1
 80077c8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80077cc:	681a      	ldr	r2, [r3, #0]
 80077ce:	78fb      	ldrb	r3, [r7, #3]
 80077d0:	4619      	mov	r1, r3
 80077d2:	f7fe feda 	bl	800658a <USBD_LL_DataOutStage>
}
 80077d6:	bf00      	nop
 80077d8:	3708      	adds	r7, #8
 80077da:	46bd      	mov	sp, r7
 80077dc:	bd80      	pop	{r7, pc}

080077de <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80077de:	b580      	push	{r7, lr}
 80077e0:	b082      	sub	sp, #8
 80077e2:	af00      	add	r7, sp, #0
 80077e4:	6078      	str	r0, [r7, #4]
 80077e6:	460b      	mov	r3, r1
 80077e8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80077f0:	78fa      	ldrb	r2, [r7, #3]
 80077f2:	6879      	ldr	r1, [r7, #4]
 80077f4:	4613      	mov	r3, r2
 80077f6:	009b      	lsls	r3, r3, #2
 80077f8:	4413      	add	r3, r2
 80077fa:	00db      	lsls	r3, r3, #3
 80077fc:	440b      	add	r3, r1
 80077fe:	333c      	adds	r3, #60	; 0x3c
 8007800:	681a      	ldr	r2, [r3, #0]
 8007802:	78fb      	ldrb	r3, [r7, #3]
 8007804:	4619      	mov	r1, r3
 8007806:	f7fe ff31 	bl	800666c <USBD_LL_DataInStage>
}
 800780a:	bf00      	nop
 800780c:	3708      	adds	r7, #8
 800780e:	46bd      	mov	sp, r7
 8007810:	bd80      	pop	{r7, pc}

08007812 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007812:	b580      	push	{r7, lr}
 8007814:	b082      	sub	sp, #8
 8007816:	af00      	add	r7, sp, #0
 8007818:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007820:	4618      	mov	r0, r3
 8007822:	f7ff f841 	bl	80068a8 <USBD_LL_SOF>
}
 8007826:	bf00      	nop
 8007828:	3708      	adds	r7, #8
 800782a:	46bd      	mov	sp, r7
 800782c:	bd80      	pop	{r7, pc}

0800782e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800782e:	b580      	push	{r7, lr}
 8007830:	b084      	sub	sp, #16
 8007832:	af00      	add	r7, sp, #0
 8007834:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007836:	2301      	movs	r3, #1
 8007838:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	689b      	ldr	r3, [r3, #8]
 800783e:	2b02      	cmp	r3, #2
 8007840:	d001      	beq.n	8007846 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007842:	f7f8 fe4d 	bl	80004e0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800784c:	7bfa      	ldrb	r2, [r7, #15]
 800784e:	4611      	mov	r1, r2
 8007850:	4618      	mov	r0, r3
 8007852:	f7fe fff1 	bl	8006838 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800785c:	4618      	mov	r0, r3
 800785e:	f7fe ffaa 	bl	80067b6 <USBD_LL_Reset>
}
 8007862:	bf00      	nop
 8007864:	3710      	adds	r7, #16
 8007866:	46bd      	mov	sp, r7
 8007868:	bd80      	pop	{r7, pc}
	...

0800786c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b082      	sub	sp, #8
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800787a:	4618      	mov	r0, r3
 800787c:	f7fe ffeb 	bl	8006856 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	699b      	ldr	r3, [r3, #24]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d005      	beq.n	8007894 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007888:	4b04      	ldr	r3, [pc, #16]	; (800789c <HAL_PCD_SuspendCallback+0x30>)
 800788a:	691b      	ldr	r3, [r3, #16]
 800788c:	4a03      	ldr	r2, [pc, #12]	; (800789c <HAL_PCD_SuspendCallback+0x30>)
 800788e:	f043 0306 	orr.w	r3, r3, #6
 8007892:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007894:	bf00      	nop
 8007896:	3708      	adds	r7, #8
 8007898:	46bd      	mov	sp, r7
 800789a:	bd80      	pop	{r7, pc}
 800789c:	e000ed00 	.word	0xe000ed00

080078a0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	b082      	sub	sp, #8
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80078ae:	4618      	mov	r0, r3
 80078b0:	f7fe ffe5 	bl	800687e <USBD_LL_Resume>
}
 80078b4:	bf00      	nop
 80078b6:	3708      	adds	r7, #8
 80078b8:	46bd      	mov	sp, r7
 80078ba:	bd80      	pop	{r7, pc}

080078bc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b082      	sub	sp, #8
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80078c4:	4a1f      	ldr	r2, [pc, #124]	; (8007944 <USBD_LL_Init+0x88>)
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	4a1d      	ldr	r2, [pc, #116]	; (8007944 <USBD_LL_Init+0x88>)
 80078d0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 80078d4:	4b1b      	ldr	r3, [pc, #108]	; (8007944 <USBD_LL_Init+0x88>)
 80078d6:	4a1c      	ldr	r2, [pc, #112]	; (8007948 <USBD_LL_Init+0x8c>)
 80078d8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80078da:	4b1a      	ldr	r3, [pc, #104]	; (8007944 <USBD_LL_Init+0x88>)
 80078dc:	2208      	movs	r2, #8
 80078de:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80078e0:	4b18      	ldr	r3, [pc, #96]	; (8007944 <USBD_LL_Init+0x88>)
 80078e2:	2202      	movs	r2, #2
 80078e4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80078e6:	4b17      	ldr	r3, [pc, #92]	; (8007944 <USBD_LL_Init+0x88>)
 80078e8:	2200      	movs	r2, #0
 80078ea:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80078ec:	4b15      	ldr	r3, [pc, #84]	; (8007944 <USBD_LL_Init+0x88>)
 80078ee:	2200      	movs	r2, #0
 80078f0:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80078f2:	4b14      	ldr	r3, [pc, #80]	; (8007944 <USBD_LL_Init+0x88>)
 80078f4:	2200      	movs	r2, #0
 80078f6:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80078f8:	4812      	ldr	r0, [pc, #72]	; (8007944 <USBD_LL_Init+0x88>)
 80078fa:	f7f9 ffdb 	bl	80018b4 <HAL_PCD_Init>
 80078fe:	4603      	mov	r3, r0
 8007900:	2b00      	cmp	r3, #0
 8007902:	d001      	beq.n	8007908 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8007904:	f7f8 fdec 	bl	80004e0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800790e:	2318      	movs	r3, #24
 8007910:	2200      	movs	r2, #0
 8007912:	2100      	movs	r1, #0
 8007914:	f7fb fc3a 	bl	800318c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800791e:	2358      	movs	r3, #88	; 0x58
 8007920:	2200      	movs	r2, #0
 8007922:	2180      	movs	r1, #128	; 0x80
 8007924:	f7fb fc32 	bl	800318c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800792e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007932:	2200      	movs	r2, #0
 8007934:	2181      	movs	r1, #129	; 0x81
 8007936:	f7fb fc29 	bl	800318c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 800793a:	2300      	movs	r3, #0
}
 800793c:	4618      	mov	r0, r3
 800793e:	3708      	adds	r7, #8
 8007940:	46bd      	mov	sp, r7
 8007942:	bd80      	pop	{r7, pc}
 8007944:	200006cc 	.word	0x200006cc
 8007948:	40005c00 	.word	0x40005c00

0800794c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b084      	sub	sp, #16
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007954:	2300      	movs	r3, #0
 8007956:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007958:	2300      	movs	r3, #0
 800795a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007962:	4618      	mov	r0, r3
 8007964:	f7fa f8b1 	bl	8001aca <HAL_PCD_Start>
 8007968:	4603      	mov	r3, r0
 800796a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800796c:	7bfb      	ldrb	r3, [r7, #15]
 800796e:	4618      	mov	r0, r3
 8007970:	f000 f93c 	bl	8007bec <USBD_Get_USB_Status>
 8007974:	4603      	mov	r3, r0
 8007976:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007978:	7bbb      	ldrb	r3, [r7, #14]
}
 800797a:	4618      	mov	r0, r3
 800797c:	3710      	adds	r7, #16
 800797e:	46bd      	mov	sp, r7
 8007980:	bd80      	pop	{r7, pc}

08007982 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007982:	b580      	push	{r7, lr}
 8007984:	b084      	sub	sp, #16
 8007986:	af00      	add	r7, sp, #0
 8007988:	6078      	str	r0, [r7, #4]
 800798a:	4608      	mov	r0, r1
 800798c:	4611      	mov	r1, r2
 800798e:	461a      	mov	r2, r3
 8007990:	4603      	mov	r3, r0
 8007992:	70fb      	strb	r3, [r7, #3]
 8007994:	460b      	mov	r3, r1
 8007996:	70bb      	strb	r3, [r7, #2]
 8007998:	4613      	mov	r3, r2
 800799a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800799c:	2300      	movs	r3, #0
 800799e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80079a0:	2300      	movs	r3, #0
 80079a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80079aa:	78bb      	ldrb	r3, [r7, #2]
 80079ac:	883a      	ldrh	r2, [r7, #0]
 80079ae:	78f9      	ldrb	r1, [r7, #3]
 80079b0:	f7fa fa2b 	bl	8001e0a <HAL_PCD_EP_Open>
 80079b4:	4603      	mov	r3, r0
 80079b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80079b8:	7bfb      	ldrb	r3, [r7, #15]
 80079ba:	4618      	mov	r0, r3
 80079bc:	f000 f916 	bl	8007bec <USBD_Get_USB_Status>
 80079c0:	4603      	mov	r3, r0
 80079c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80079c4:	7bbb      	ldrb	r3, [r7, #14]
}
 80079c6:	4618      	mov	r0, r3
 80079c8:	3710      	adds	r7, #16
 80079ca:	46bd      	mov	sp, r7
 80079cc:	bd80      	pop	{r7, pc}

080079ce <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80079ce:	b580      	push	{r7, lr}
 80079d0:	b084      	sub	sp, #16
 80079d2:	af00      	add	r7, sp, #0
 80079d4:	6078      	str	r0, [r7, #4]
 80079d6:	460b      	mov	r3, r1
 80079d8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80079da:	2300      	movs	r3, #0
 80079dc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80079de:	2300      	movs	r3, #0
 80079e0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80079e8:	78fa      	ldrb	r2, [r7, #3]
 80079ea:	4611      	mov	r1, r2
 80079ec:	4618      	mov	r0, r3
 80079ee:	f7fa fa72 	bl	8001ed6 <HAL_PCD_EP_Close>
 80079f2:	4603      	mov	r3, r0
 80079f4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80079f6:	7bfb      	ldrb	r3, [r7, #15]
 80079f8:	4618      	mov	r0, r3
 80079fa:	f000 f8f7 	bl	8007bec <USBD_Get_USB_Status>
 80079fe:	4603      	mov	r3, r0
 8007a00:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007a02:	7bbb      	ldrb	r3, [r7, #14]
}
 8007a04:	4618      	mov	r0, r3
 8007a06:	3710      	adds	r7, #16
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	bd80      	pop	{r7, pc}

08007a0c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	b084      	sub	sp, #16
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
 8007a14:	460b      	mov	r3, r1
 8007a16:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a18:	2300      	movs	r3, #0
 8007a1a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007a26:	78fa      	ldrb	r2, [r7, #3]
 8007a28:	4611      	mov	r1, r2
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	f7fa fb1b 	bl	8002066 <HAL_PCD_EP_SetStall>
 8007a30:	4603      	mov	r3, r0
 8007a32:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a34:	7bfb      	ldrb	r3, [r7, #15]
 8007a36:	4618      	mov	r0, r3
 8007a38:	f000 f8d8 	bl	8007bec <USBD_Get_USB_Status>
 8007a3c:	4603      	mov	r3, r0
 8007a3e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007a40:	7bbb      	ldrb	r3, [r7, #14]
}
 8007a42:	4618      	mov	r0, r3
 8007a44:	3710      	adds	r7, #16
 8007a46:	46bd      	mov	sp, r7
 8007a48:	bd80      	pop	{r7, pc}

08007a4a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007a4a:	b580      	push	{r7, lr}
 8007a4c:	b084      	sub	sp, #16
 8007a4e:	af00      	add	r7, sp, #0
 8007a50:	6078      	str	r0, [r7, #4]
 8007a52:	460b      	mov	r3, r1
 8007a54:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a56:	2300      	movs	r3, #0
 8007a58:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007a64:	78fa      	ldrb	r2, [r7, #3]
 8007a66:	4611      	mov	r1, r2
 8007a68:	4618      	mov	r0, r3
 8007a6a:	f7fa fb5c 	bl	8002126 <HAL_PCD_EP_ClrStall>
 8007a6e:	4603      	mov	r3, r0
 8007a70:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a72:	7bfb      	ldrb	r3, [r7, #15]
 8007a74:	4618      	mov	r0, r3
 8007a76:	f000 f8b9 	bl	8007bec <USBD_Get_USB_Status>
 8007a7a:	4603      	mov	r3, r0
 8007a7c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007a7e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007a80:	4618      	mov	r0, r3
 8007a82:	3710      	adds	r7, #16
 8007a84:	46bd      	mov	sp, r7
 8007a86:	bd80      	pop	{r7, pc}

08007a88 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007a88:	b480      	push	{r7}
 8007a8a:	b085      	sub	sp, #20
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
 8007a90:	460b      	mov	r3, r1
 8007a92:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007a9a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007a9c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	da0c      	bge.n	8007abe <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007aa4:	78fb      	ldrb	r3, [r7, #3]
 8007aa6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007aaa:	68f9      	ldr	r1, [r7, #12]
 8007aac:	1c5a      	adds	r2, r3, #1
 8007aae:	4613      	mov	r3, r2
 8007ab0:	009b      	lsls	r3, r3, #2
 8007ab2:	4413      	add	r3, r2
 8007ab4:	00db      	lsls	r3, r3, #3
 8007ab6:	440b      	add	r3, r1
 8007ab8:	3302      	adds	r3, #2
 8007aba:	781b      	ldrb	r3, [r3, #0]
 8007abc:	e00b      	b.n	8007ad6 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007abe:	78fb      	ldrb	r3, [r7, #3]
 8007ac0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007ac4:	68f9      	ldr	r1, [r7, #12]
 8007ac6:	4613      	mov	r3, r2
 8007ac8:	009b      	lsls	r3, r3, #2
 8007aca:	4413      	add	r3, r2
 8007acc:	00db      	lsls	r3, r3, #3
 8007ace:	440b      	add	r3, r1
 8007ad0:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8007ad4:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	3714      	adds	r7, #20
 8007ada:	46bd      	mov	sp, r7
 8007adc:	bc80      	pop	{r7}
 8007ade:	4770      	bx	lr

08007ae0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b084      	sub	sp, #16
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
 8007ae8:	460b      	mov	r3, r1
 8007aea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007aec:	2300      	movs	r3, #0
 8007aee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007af0:	2300      	movs	r3, #0
 8007af2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007afa:	78fa      	ldrb	r2, [r7, #3]
 8007afc:	4611      	mov	r1, r2
 8007afe:	4618      	mov	r0, r3
 8007b00:	f7fa f95e 	bl	8001dc0 <HAL_PCD_SetAddress>
 8007b04:	4603      	mov	r3, r0
 8007b06:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b08:	7bfb      	ldrb	r3, [r7, #15]
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	f000 f86e 	bl	8007bec <USBD_Get_USB_Status>
 8007b10:	4603      	mov	r3, r0
 8007b12:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007b14:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b16:	4618      	mov	r0, r3
 8007b18:	3710      	adds	r7, #16
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	bd80      	pop	{r7, pc}

08007b1e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007b1e:	b580      	push	{r7, lr}
 8007b20:	b086      	sub	sp, #24
 8007b22:	af00      	add	r7, sp, #0
 8007b24:	60f8      	str	r0, [r7, #12]
 8007b26:	607a      	str	r2, [r7, #4]
 8007b28:	461a      	mov	r2, r3
 8007b2a:	460b      	mov	r3, r1
 8007b2c:	72fb      	strb	r3, [r7, #11]
 8007b2e:	4613      	mov	r3, r2
 8007b30:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b32:	2300      	movs	r3, #0
 8007b34:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b36:	2300      	movs	r3, #0
 8007b38:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007b40:	893b      	ldrh	r3, [r7, #8]
 8007b42:	7af9      	ldrb	r1, [r7, #11]
 8007b44:	687a      	ldr	r2, [r7, #4]
 8007b46:	f7fa fa4b 	bl	8001fe0 <HAL_PCD_EP_Transmit>
 8007b4a:	4603      	mov	r3, r0
 8007b4c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b4e:	7dfb      	ldrb	r3, [r7, #23]
 8007b50:	4618      	mov	r0, r3
 8007b52:	f000 f84b 	bl	8007bec <USBD_Get_USB_Status>
 8007b56:	4603      	mov	r3, r0
 8007b58:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007b5a:	7dbb      	ldrb	r3, [r7, #22]
}
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	3718      	adds	r7, #24
 8007b60:	46bd      	mov	sp, r7
 8007b62:	bd80      	pop	{r7, pc}

08007b64 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b086      	sub	sp, #24
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	60f8      	str	r0, [r7, #12]
 8007b6c:	607a      	str	r2, [r7, #4]
 8007b6e:	461a      	mov	r2, r3
 8007b70:	460b      	mov	r3, r1
 8007b72:	72fb      	strb	r3, [r7, #11]
 8007b74:	4613      	mov	r3, r2
 8007b76:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b78:	2300      	movs	r3, #0
 8007b7a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007b86:	893b      	ldrh	r3, [r7, #8]
 8007b88:	7af9      	ldrb	r1, [r7, #11]
 8007b8a:	687a      	ldr	r2, [r7, #4]
 8007b8c:	f7fa f9eb 	bl	8001f66 <HAL_PCD_EP_Receive>
 8007b90:	4603      	mov	r3, r0
 8007b92:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b94:	7dfb      	ldrb	r3, [r7, #23]
 8007b96:	4618      	mov	r0, r3
 8007b98:	f000 f828 	bl	8007bec <USBD_Get_USB_Status>
 8007b9c:	4603      	mov	r3, r0
 8007b9e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007ba0:	7dbb      	ldrb	r3, [r7, #22]
}
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	3718      	adds	r7, #24
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	bd80      	pop	{r7, pc}
	...

08007bac <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007bac:	b480      	push	{r7}
 8007bae:	b083      	sub	sp, #12
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007bb4:	4b02      	ldr	r3, [pc, #8]	; (8007bc0 <USBD_static_malloc+0x14>)
}
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	370c      	adds	r7, #12
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	bc80      	pop	{r7}
 8007bbe:	4770      	bx	lr
 8007bc0:	2000015c 	.word	0x2000015c

08007bc4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007bc4:	b480      	push	{r7}
 8007bc6:	b083      	sub	sp, #12
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]

}
 8007bcc:	bf00      	nop
 8007bce:	370c      	adds	r7, #12
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	bc80      	pop	{r7}
 8007bd4:	4770      	bx	lr

08007bd6 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007bd6:	b480      	push	{r7}
 8007bd8:	b083      	sub	sp, #12
 8007bda:	af00      	add	r7, sp, #0
 8007bdc:	6078      	str	r0, [r7, #4]
 8007bde:	460b      	mov	r3, r1
 8007be0:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8007be2:	bf00      	nop
 8007be4:	370c      	adds	r7, #12
 8007be6:	46bd      	mov	sp, r7
 8007be8:	bc80      	pop	{r7}
 8007bea:	4770      	bx	lr

08007bec <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007bec:	b480      	push	{r7}
 8007bee:	b085      	sub	sp, #20
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	4603      	mov	r3, r0
 8007bf4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007bfa:	79fb      	ldrb	r3, [r7, #7]
 8007bfc:	2b03      	cmp	r3, #3
 8007bfe:	d817      	bhi.n	8007c30 <USBD_Get_USB_Status+0x44>
 8007c00:	a201      	add	r2, pc, #4	; (adr r2, 8007c08 <USBD_Get_USB_Status+0x1c>)
 8007c02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c06:	bf00      	nop
 8007c08:	08007c19 	.word	0x08007c19
 8007c0c:	08007c1f 	.word	0x08007c1f
 8007c10:	08007c25 	.word	0x08007c25
 8007c14:	08007c2b 	.word	0x08007c2b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007c18:	2300      	movs	r3, #0
 8007c1a:	73fb      	strb	r3, [r7, #15]
    break;
 8007c1c:	e00b      	b.n	8007c36 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007c1e:	2302      	movs	r3, #2
 8007c20:	73fb      	strb	r3, [r7, #15]
    break;
 8007c22:	e008      	b.n	8007c36 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007c24:	2301      	movs	r3, #1
 8007c26:	73fb      	strb	r3, [r7, #15]
    break;
 8007c28:	e005      	b.n	8007c36 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007c2a:	2302      	movs	r3, #2
 8007c2c:	73fb      	strb	r3, [r7, #15]
    break;
 8007c2e:	e002      	b.n	8007c36 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007c30:	2302      	movs	r3, #2
 8007c32:	73fb      	strb	r3, [r7, #15]
    break;
 8007c34:	bf00      	nop
  }
  return usb_status;
 8007c36:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c38:	4618      	mov	r0, r3
 8007c3a:	3714      	adds	r7, #20
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	bc80      	pop	{r7}
 8007c40:	4770      	bx	lr
 8007c42:	bf00      	nop

08007c44 <__libc_init_array>:
 8007c44:	b570      	push	{r4, r5, r6, lr}
 8007c46:	2600      	movs	r6, #0
 8007c48:	4d0c      	ldr	r5, [pc, #48]	; (8007c7c <__libc_init_array+0x38>)
 8007c4a:	4c0d      	ldr	r4, [pc, #52]	; (8007c80 <__libc_init_array+0x3c>)
 8007c4c:	1b64      	subs	r4, r4, r5
 8007c4e:	10a4      	asrs	r4, r4, #2
 8007c50:	42a6      	cmp	r6, r4
 8007c52:	d109      	bne.n	8007c68 <__libc_init_array+0x24>
 8007c54:	f000 f822 	bl	8007c9c <_init>
 8007c58:	2600      	movs	r6, #0
 8007c5a:	4d0a      	ldr	r5, [pc, #40]	; (8007c84 <__libc_init_array+0x40>)
 8007c5c:	4c0a      	ldr	r4, [pc, #40]	; (8007c88 <__libc_init_array+0x44>)
 8007c5e:	1b64      	subs	r4, r4, r5
 8007c60:	10a4      	asrs	r4, r4, #2
 8007c62:	42a6      	cmp	r6, r4
 8007c64:	d105      	bne.n	8007c72 <__libc_init_array+0x2e>
 8007c66:	bd70      	pop	{r4, r5, r6, pc}
 8007c68:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c6c:	4798      	blx	r3
 8007c6e:	3601      	adds	r6, #1
 8007c70:	e7ee      	b.n	8007c50 <__libc_init_array+0xc>
 8007c72:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c76:	4798      	blx	r3
 8007c78:	3601      	adds	r6, #1
 8007c7a:	e7f2      	b.n	8007c62 <__libc_init_array+0x1e>
 8007c7c:	08007d1c 	.word	0x08007d1c
 8007c80:	08007d1c 	.word	0x08007d1c
 8007c84:	08007d1c 	.word	0x08007d1c
 8007c88:	08007d20 	.word	0x08007d20

08007c8c <memset>:
 8007c8c:	4603      	mov	r3, r0
 8007c8e:	4402      	add	r2, r0
 8007c90:	4293      	cmp	r3, r2
 8007c92:	d100      	bne.n	8007c96 <memset+0xa>
 8007c94:	4770      	bx	lr
 8007c96:	f803 1b01 	strb.w	r1, [r3], #1
 8007c9a:	e7f9      	b.n	8007c90 <memset+0x4>

08007c9c <_init>:
 8007c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c9e:	bf00      	nop
 8007ca0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ca2:	bc08      	pop	{r3}
 8007ca4:	469e      	mov	lr, r3
 8007ca6:	4770      	bx	lr

08007ca8 <_fini>:
 8007ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007caa:	bf00      	nop
 8007cac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cae:	bc08      	pop	{r3}
 8007cb0:	469e      	mov	lr, r3
 8007cb2:	4770      	bx	lr
